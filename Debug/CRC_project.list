
CRC_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007310  08008188  08008188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800f498  0800f498  0000f498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f4b4  0800f4b4  00010090  2**0
                  CONTENTS
  4 .ARM          00000008  0800f4b4  0800f4b4  0000f4b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f4bc  0800f4bc  00010090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f4bc  0800f4bc  0000f4bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f4c0  0800f4c0  0000f4c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800f4c4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000814  20000090  0800f554  00010090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008a4  0800f554  000108a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a42a  00000000  00000000  000100c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000396b  00000000  00000000  0002a4ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001358  00000000  00000000  0002de58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011d8  00000000  00000000  0002f1b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002418b  00000000  00000000  00030388  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012cbb  00000000  00000000  00054513  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cd494  00000000  00000000  000671ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00134662  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005204  00000000  00000000  001346e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008188 <__do_global_dtors_aux>:
 8008188:	b510      	push	{r4, lr}
 800818a:	4c05      	ldr	r4, [pc, #20]	; (80081a0 <__do_global_dtors_aux+0x18>)
 800818c:	7823      	ldrb	r3, [r4, #0]
 800818e:	b933      	cbnz	r3, 800819e <__do_global_dtors_aux+0x16>
 8008190:	4b04      	ldr	r3, [pc, #16]	; (80081a4 <__do_global_dtors_aux+0x1c>)
 8008192:	b113      	cbz	r3, 800819a <__do_global_dtors_aux+0x12>
 8008194:	4804      	ldr	r0, [pc, #16]	; (80081a8 <__do_global_dtors_aux+0x20>)
 8008196:	f3af 8000 	nop.w
 800819a:	2301      	movs	r3, #1
 800819c:	7023      	strb	r3, [r4, #0]
 800819e:	bd10      	pop	{r4, pc}
 80081a0:	20000090 	.word	0x20000090
 80081a4:	00000000 	.word	0x00000000
 80081a8:	0800f480 	.word	0x0800f480

080081ac <frame_dummy>:
 80081ac:	b508      	push	{r3, lr}
 80081ae:	4b03      	ldr	r3, [pc, #12]	; (80081bc <frame_dummy+0x10>)
 80081b0:	b11b      	cbz	r3, 80081ba <frame_dummy+0xe>
 80081b2:	4903      	ldr	r1, [pc, #12]	; (80081c0 <frame_dummy+0x14>)
 80081b4:	4803      	ldr	r0, [pc, #12]	; (80081c4 <frame_dummy+0x18>)
 80081b6:	f3af 8000 	nop.w
 80081ba:	bd08      	pop	{r3, pc}
 80081bc:	00000000 	.word	0x00000000
 80081c0:	20000094 	.word	0x20000094
 80081c4:	0800f480 	.word	0x0800f480

080081c8 <__aeabi_uldivmod>:
 80081c8:	b953      	cbnz	r3, 80081e0 <__aeabi_uldivmod+0x18>
 80081ca:	b94a      	cbnz	r2, 80081e0 <__aeabi_uldivmod+0x18>
 80081cc:	2900      	cmp	r1, #0
 80081ce:	bf08      	it	eq
 80081d0:	2800      	cmpeq	r0, #0
 80081d2:	bf1c      	itt	ne
 80081d4:	f04f 31ff 	movne.w	r1, #4294967295
 80081d8:	f04f 30ff 	movne.w	r0, #4294967295
 80081dc:	f000 b972 	b.w	80084c4 <__aeabi_idiv0>
 80081e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80081e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80081e8:	f000 f806 	bl	80081f8 <__udivmoddi4>
 80081ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80081f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081f4:	b004      	add	sp, #16
 80081f6:	4770      	bx	lr

080081f8 <__udivmoddi4>:
 80081f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081fc:	9e08      	ldr	r6, [sp, #32]
 80081fe:	4604      	mov	r4, r0
 8008200:	4688      	mov	r8, r1
 8008202:	2b00      	cmp	r3, #0
 8008204:	d14b      	bne.n	800829e <__udivmoddi4+0xa6>
 8008206:	428a      	cmp	r2, r1
 8008208:	4615      	mov	r5, r2
 800820a:	d967      	bls.n	80082dc <__udivmoddi4+0xe4>
 800820c:	fab2 f282 	clz	r2, r2
 8008210:	b14a      	cbz	r2, 8008226 <__udivmoddi4+0x2e>
 8008212:	f1c2 0720 	rsb	r7, r2, #32
 8008216:	fa01 f302 	lsl.w	r3, r1, r2
 800821a:	fa20 f707 	lsr.w	r7, r0, r7
 800821e:	4095      	lsls	r5, r2
 8008220:	ea47 0803 	orr.w	r8, r7, r3
 8008224:	4094      	lsls	r4, r2
 8008226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800822a:	0c23      	lsrs	r3, r4, #16
 800822c:	fbb8 f7fe 	udiv	r7, r8, lr
 8008230:	fa1f fc85 	uxth.w	ip, r5
 8008234:	fb0e 8817 	mls	r8, lr, r7, r8
 8008238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800823c:	fb07 f10c 	mul.w	r1, r7, ip
 8008240:	4299      	cmp	r1, r3
 8008242:	d909      	bls.n	8008258 <__udivmoddi4+0x60>
 8008244:	18eb      	adds	r3, r5, r3
 8008246:	f107 30ff 	add.w	r0, r7, #4294967295
 800824a:	f080 811b 	bcs.w	8008484 <__udivmoddi4+0x28c>
 800824e:	4299      	cmp	r1, r3
 8008250:	f240 8118 	bls.w	8008484 <__udivmoddi4+0x28c>
 8008254:	3f02      	subs	r7, #2
 8008256:	442b      	add	r3, r5
 8008258:	1a5b      	subs	r3, r3, r1
 800825a:	b2a4      	uxth	r4, r4
 800825c:	fbb3 f0fe 	udiv	r0, r3, lr
 8008260:	fb0e 3310 	mls	r3, lr, r0, r3
 8008264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008268:	fb00 fc0c 	mul.w	ip, r0, ip
 800826c:	45a4      	cmp	ip, r4
 800826e:	d909      	bls.n	8008284 <__udivmoddi4+0x8c>
 8008270:	192c      	adds	r4, r5, r4
 8008272:	f100 33ff 	add.w	r3, r0, #4294967295
 8008276:	f080 8107 	bcs.w	8008488 <__udivmoddi4+0x290>
 800827a:	45a4      	cmp	ip, r4
 800827c:	f240 8104 	bls.w	8008488 <__udivmoddi4+0x290>
 8008280:	3802      	subs	r0, #2
 8008282:	442c      	add	r4, r5
 8008284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008288:	eba4 040c 	sub.w	r4, r4, ip
 800828c:	2700      	movs	r7, #0
 800828e:	b11e      	cbz	r6, 8008298 <__udivmoddi4+0xa0>
 8008290:	40d4      	lsrs	r4, r2
 8008292:	2300      	movs	r3, #0
 8008294:	e9c6 4300 	strd	r4, r3, [r6]
 8008298:	4639      	mov	r1, r7
 800829a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800829e:	428b      	cmp	r3, r1
 80082a0:	d909      	bls.n	80082b6 <__udivmoddi4+0xbe>
 80082a2:	2e00      	cmp	r6, #0
 80082a4:	f000 80eb 	beq.w	800847e <__udivmoddi4+0x286>
 80082a8:	2700      	movs	r7, #0
 80082aa:	e9c6 0100 	strd	r0, r1, [r6]
 80082ae:	4638      	mov	r0, r7
 80082b0:	4639      	mov	r1, r7
 80082b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082b6:	fab3 f783 	clz	r7, r3
 80082ba:	2f00      	cmp	r7, #0
 80082bc:	d147      	bne.n	800834e <__udivmoddi4+0x156>
 80082be:	428b      	cmp	r3, r1
 80082c0:	d302      	bcc.n	80082c8 <__udivmoddi4+0xd0>
 80082c2:	4282      	cmp	r2, r0
 80082c4:	f200 80fa 	bhi.w	80084bc <__udivmoddi4+0x2c4>
 80082c8:	1a84      	subs	r4, r0, r2
 80082ca:	eb61 0303 	sbc.w	r3, r1, r3
 80082ce:	2001      	movs	r0, #1
 80082d0:	4698      	mov	r8, r3
 80082d2:	2e00      	cmp	r6, #0
 80082d4:	d0e0      	beq.n	8008298 <__udivmoddi4+0xa0>
 80082d6:	e9c6 4800 	strd	r4, r8, [r6]
 80082da:	e7dd      	b.n	8008298 <__udivmoddi4+0xa0>
 80082dc:	b902      	cbnz	r2, 80082e0 <__udivmoddi4+0xe8>
 80082de:	deff      	udf	#255	; 0xff
 80082e0:	fab2 f282 	clz	r2, r2
 80082e4:	2a00      	cmp	r2, #0
 80082e6:	f040 808f 	bne.w	8008408 <__udivmoddi4+0x210>
 80082ea:	1b49      	subs	r1, r1, r5
 80082ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80082f0:	fa1f f885 	uxth.w	r8, r5
 80082f4:	2701      	movs	r7, #1
 80082f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80082fa:	0c23      	lsrs	r3, r4, #16
 80082fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8008300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008304:	fb08 f10c 	mul.w	r1, r8, ip
 8008308:	4299      	cmp	r1, r3
 800830a:	d907      	bls.n	800831c <__udivmoddi4+0x124>
 800830c:	18eb      	adds	r3, r5, r3
 800830e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8008312:	d202      	bcs.n	800831a <__udivmoddi4+0x122>
 8008314:	4299      	cmp	r1, r3
 8008316:	f200 80cd 	bhi.w	80084b4 <__udivmoddi4+0x2bc>
 800831a:	4684      	mov	ip, r0
 800831c:	1a59      	subs	r1, r3, r1
 800831e:	b2a3      	uxth	r3, r4
 8008320:	fbb1 f0fe 	udiv	r0, r1, lr
 8008324:	fb0e 1410 	mls	r4, lr, r0, r1
 8008328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800832c:	fb08 f800 	mul.w	r8, r8, r0
 8008330:	45a0      	cmp	r8, r4
 8008332:	d907      	bls.n	8008344 <__udivmoddi4+0x14c>
 8008334:	192c      	adds	r4, r5, r4
 8008336:	f100 33ff 	add.w	r3, r0, #4294967295
 800833a:	d202      	bcs.n	8008342 <__udivmoddi4+0x14a>
 800833c:	45a0      	cmp	r8, r4
 800833e:	f200 80b6 	bhi.w	80084ae <__udivmoddi4+0x2b6>
 8008342:	4618      	mov	r0, r3
 8008344:	eba4 0408 	sub.w	r4, r4, r8
 8008348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800834c:	e79f      	b.n	800828e <__udivmoddi4+0x96>
 800834e:	f1c7 0c20 	rsb	ip, r7, #32
 8008352:	40bb      	lsls	r3, r7
 8008354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008358:	ea4e 0e03 	orr.w	lr, lr, r3
 800835c:	fa01 f407 	lsl.w	r4, r1, r7
 8008360:	fa20 f50c 	lsr.w	r5, r0, ip
 8008364:	fa21 f30c 	lsr.w	r3, r1, ip
 8008368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800836c:	4325      	orrs	r5, r4
 800836e:	fbb3 f9f8 	udiv	r9, r3, r8
 8008372:	0c2c      	lsrs	r4, r5, #16
 8008374:	fb08 3319 	mls	r3, r8, r9, r3
 8008378:	fa1f fa8e 	uxth.w	sl, lr
 800837c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008380:	fb09 f40a 	mul.w	r4, r9, sl
 8008384:	429c      	cmp	r4, r3
 8008386:	fa02 f207 	lsl.w	r2, r2, r7
 800838a:	fa00 f107 	lsl.w	r1, r0, r7
 800838e:	d90b      	bls.n	80083a8 <__udivmoddi4+0x1b0>
 8008390:	eb1e 0303 	adds.w	r3, lr, r3
 8008394:	f109 30ff 	add.w	r0, r9, #4294967295
 8008398:	f080 8087 	bcs.w	80084aa <__udivmoddi4+0x2b2>
 800839c:	429c      	cmp	r4, r3
 800839e:	f240 8084 	bls.w	80084aa <__udivmoddi4+0x2b2>
 80083a2:	f1a9 0902 	sub.w	r9, r9, #2
 80083a6:	4473      	add	r3, lr
 80083a8:	1b1b      	subs	r3, r3, r4
 80083aa:	b2ad      	uxth	r5, r5
 80083ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80083b0:	fb08 3310 	mls	r3, r8, r0, r3
 80083b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80083b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80083bc:	45a2      	cmp	sl, r4
 80083be:	d908      	bls.n	80083d2 <__udivmoddi4+0x1da>
 80083c0:	eb1e 0404 	adds.w	r4, lr, r4
 80083c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80083c8:	d26b      	bcs.n	80084a2 <__udivmoddi4+0x2aa>
 80083ca:	45a2      	cmp	sl, r4
 80083cc:	d969      	bls.n	80084a2 <__udivmoddi4+0x2aa>
 80083ce:	3802      	subs	r0, #2
 80083d0:	4474      	add	r4, lr
 80083d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80083d6:	fba0 8902 	umull	r8, r9, r0, r2
 80083da:	eba4 040a 	sub.w	r4, r4, sl
 80083de:	454c      	cmp	r4, r9
 80083e0:	46c2      	mov	sl, r8
 80083e2:	464b      	mov	r3, r9
 80083e4:	d354      	bcc.n	8008490 <__udivmoddi4+0x298>
 80083e6:	d051      	beq.n	800848c <__udivmoddi4+0x294>
 80083e8:	2e00      	cmp	r6, #0
 80083ea:	d069      	beq.n	80084c0 <__udivmoddi4+0x2c8>
 80083ec:	ebb1 050a 	subs.w	r5, r1, sl
 80083f0:	eb64 0403 	sbc.w	r4, r4, r3
 80083f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80083f8:	40fd      	lsrs	r5, r7
 80083fa:	40fc      	lsrs	r4, r7
 80083fc:	ea4c 0505 	orr.w	r5, ip, r5
 8008400:	e9c6 5400 	strd	r5, r4, [r6]
 8008404:	2700      	movs	r7, #0
 8008406:	e747      	b.n	8008298 <__udivmoddi4+0xa0>
 8008408:	f1c2 0320 	rsb	r3, r2, #32
 800840c:	fa20 f703 	lsr.w	r7, r0, r3
 8008410:	4095      	lsls	r5, r2
 8008412:	fa01 f002 	lsl.w	r0, r1, r2
 8008416:	fa21 f303 	lsr.w	r3, r1, r3
 800841a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800841e:	4338      	orrs	r0, r7
 8008420:	0c01      	lsrs	r1, r0, #16
 8008422:	fbb3 f7fe 	udiv	r7, r3, lr
 8008426:	fa1f f885 	uxth.w	r8, r5
 800842a:	fb0e 3317 	mls	r3, lr, r7, r3
 800842e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008432:	fb07 f308 	mul.w	r3, r7, r8
 8008436:	428b      	cmp	r3, r1
 8008438:	fa04 f402 	lsl.w	r4, r4, r2
 800843c:	d907      	bls.n	800844e <__udivmoddi4+0x256>
 800843e:	1869      	adds	r1, r5, r1
 8008440:	f107 3cff 	add.w	ip, r7, #4294967295
 8008444:	d22f      	bcs.n	80084a6 <__udivmoddi4+0x2ae>
 8008446:	428b      	cmp	r3, r1
 8008448:	d92d      	bls.n	80084a6 <__udivmoddi4+0x2ae>
 800844a:	3f02      	subs	r7, #2
 800844c:	4429      	add	r1, r5
 800844e:	1acb      	subs	r3, r1, r3
 8008450:	b281      	uxth	r1, r0
 8008452:	fbb3 f0fe 	udiv	r0, r3, lr
 8008456:	fb0e 3310 	mls	r3, lr, r0, r3
 800845a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800845e:	fb00 f308 	mul.w	r3, r0, r8
 8008462:	428b      	cmp	r3, r1
 8008464:	d907      	bls.n	8008476 <__udivmoddi4+0x27e>
 8008466:	1869      	adds	r1, r5, r1
 8008468:	f100 3cff 	add.w	ip, r0, #4294967295
 800846c:	d217      	bcs.n	800849e <__udivmoddi4+0x2a6>
 800846e:	428b      	cmp	r3, r1
 8008470:	d915      	bls.n	800849e <__udivmoddi4+0x2a6>
 8008472:	3802      	subs	r0, #2
 8008474:	4429      	add	r1, r5
 8008476:	1ac9      	subs	r1, r1, r3
 8008478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800847c:	e73b      	b.n	80082f6 <__udivmoddi4+0xfe>
 800847e:	4637      	mov	r7, r6
 8008480:	4630      	mov	r0, r6
 8008482:	e709      	b.n	8008298 <__udivmoddi4+0xa0>
 8008484:	4607      	mov	r7, r0
 8008486:	e6e7      	b.n	8008258 <__udivmoddi4+0x60>
 8008488:	4618      	mov	r0, r3
 800848a:	e6fb      	b.n	8008284 <__udivmoddi4+0x8c>
 800848c:	4541      	cmp	r1, r8
 800848e:	d2ab      	bcs.n	80083e8 <__udivmoddi4+0x1f0>
 8008490:	ebb8 0a02 	subs.w	sl, r8, r2
 8008494:	eb69 020e 	sbc.w	r2, r9, lr
 8008498:	3801      	subs	r0, #1
 800849a:	4613      	mov	r3, r2
 800849c:	e7a4      	b.n	80083e8 <__udivmoddi4+0x1f0>
 800849e:	4660      	mov	r0, ip
 80084a0:	e7e9      	b.n	8008476 <__udivmoddi4+0x27e>
 80084a2:	4618      	mov	r0, r3
 80084a4:	e795      	b.n	80083d2 <__udivmoddi4+0x1da>
 80084a6:	4667      	mov	r7, ip
 80084a8:	e7d1      	b.n	800844e <__udivmoddi4+0x256>
 80084aa:	4681      	mov	r9, r0
 80084ac:	e77c      	b.n	80083a8 <__udivmoddi4+0x1b0>
 80084ae:	3802      	subs	r0, #2
 80084b0:	442c      	add	r4, r5
 80084b2:	e747      	b.n	8008344 <__udivmoddi4+0x14c>
 80084b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80084b8:	442b      	add	r3, r5
 80084ba:	e72f      	b.n	800831c <__udivmoddi4+0x124>
 80084bc:	4638      	mov	r0, r7
 80084be:	e708      	b.n	80082d2 <__udivmoddi4+0xda>
 80084c0:	4637      	mov	r7, r6
 80084c2:	e6e9      	b.n	8008298 <__udivmoddi4+0xa0>

080084c4 <__aeabi_idiv0>:
 80084c4:	4770      	bx	lr
 80084c6:	bf00      	nop

080084c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80084cc:	f000 fcae 	bl	8008e2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80084d0:	f000 f81a 	bl	8008508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80084d4:	f000 f96c 	bl	80087b0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80084d8:	f000 f8ac 	bl	8008634 <MX_I2C1_Init>
  MX_I2S3_Init();
 80084dc:	f000 f8d8 	bl	8008690 <MX_I2S3_Init>
  MX_SPI1_Init();
 80084e0:	f000 f906 	bl	80086f0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80084e4:	f006 fc1c 	bl	800ed20 <MX_USB_HOST_Init>
  MX_CRC_Init();
 80084e8:	f000 f890 	bl	800860c <MX_CRC_Init>
  MX_USART2_UART_Init();
 80084ec:	f000 f936 	bl	800875c <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//  HAL_UART_Transmit();
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80084f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80084f4:	4803      	ldr	r0, [pc, #12]	; (8008504 <main+0x3c>)
 80084f6:	f001 f80e 	bl	8009516 <HAL_GPIO_TogglePin>
	  HAL_Delay(300);
 80084fa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80084fe:	f000 fd07 	bl	8008f10 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8008502:	e7f5      	b.n	80084f0 <main+0x28>
 8008504:	40020c00 	.word	0x40020c00

08008508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b098      	sub	sp, #96	; 0x60
 800850c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800850e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008512:	2230      	movs	r2, #48	; 0x30
 8008514:	2100      	movs	r1, #0
 8008516:	4618      	mov	r0, r3
 8008518:	f006 fef0 	bl	800f2fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800851c:	f107 031c 	add.w	r3, r7, #28
 8008520:	2200      	movs	r2, #0
 8008522:	601a      	str	r2, [r3, #0]
 8008524:	605a      	str	r2, [r3, #4]
 8008526:	609a      	str	r2, [r3, #8]
 8008528:	60da      	str	r2, [r3, #12]
 800852a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800852c:	f107 030c 	add.w	r3, r7, #12
 8008530:	2200      	movs	r2, #0
 8008532:	601a      	str	r2, [r3, #0]
 8008534:	605a      	str	r2, [r3, #4]
 8008536:	609a      	str	r2, [r3, #8]
 8008538:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800853a:	2300      	movs	r3, #0
 800853c:	60bb      	str	r3, [r7, #8]
 800853e:	4b31      	ldr	r3, [pc, #196]	; (8008604 <SystemClock_Config+0xfc>)
 8008540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008542:	4a30      	ldr	r2, [pc, #192]	; (8008604 <SystemClock_Config+0xfc>)
 8008544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008548:	6413      	str	r3, [r2, #64]	; 0x40
 800854a:	4b2e      	ldr	r3, [pc, #184]	; (8008604 <SystemClock_Config+0xfc>)
 800854c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800854e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008552:	60bb      	str	r3, [r7, #8]
 8008554:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008556:	2300      	movs	r3, #0
 8008558:	607b      	str	r3, [r7, #4]
 800855a:	4b2b      	ldr	r3, [pc, #172]	; (8008608 <SystemClock_Config+0x100>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a2a      	ldr	r2, [pc, #168]	; (8008608 <SystemClock_Config+0x100>)
 8008560:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008564:	6013      	str	r3, [r2, #0]
 8008566:	4b28      	ldr	r3, [pc, #160]	; (8008608 <SystemClock_Config+0x100>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800856e:	607b      	str	r3, [r7, #4]
 8008570:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008572:	2301      	movs	r3, #1
 8008574:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008576:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800857a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800857c:	2302      	movs	r3, #2
 800857e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008580:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008584:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8008586:	2308      	movs	r3, #8
 8008588:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 800858a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800858e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008590:	2302      	movs	r3, #2
 8008592:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8008594:	2307      	movs	r3, #7
 8008596:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008598:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800859c:	4618      	mov	r0, r3
 800859e:	f003 fa83 	bl	800baa8 <HAL_RCC_OscConfig>
 80085a2:	4603      	mov	r3, r0
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d001      	beq.n	80085ac <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80085a8:	f000 fa00 	bl	80089ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80085ac:	230f      	movs	r3, #15
 80085ae:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80085b0:	2302      	movs	r3, #2
 80085b2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80085b4:	2300      	movs	r3, #0
 80085b6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80085b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80085bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80085be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80085c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80085c4:	f107 031c 	add.w	r3, r7, #28
 80085c8:	2105      	movs	r1, #5
 80085ca:	4618      	mov	r0, r3
 80085cc:	f003 fcdc 	bl	800bf88 <HAL_RCC_ClockConfig>
 80085d0:	4603      	mov	r3, r0
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d001      	beq.n	80085da <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80085d6:	f000 f9e9 	bl	80089ac <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80085da:	2301      	movs	r3, #1
 80085dc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80085de:	23c0      	movs	r3, #192	; 0xc0
 80085e0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80085e2:	2302      	movs	r3, #2
 80085e4:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80085e6:	f107 030c 	add.w	r3, r7, #12
 80085ea:	4618      	mov	r0, r3
 80085ec:	f003 febe 	bl	800c36c <HAL_RCCEx_PeriphCLKConfig>
 80085f0:	4603      	mov	r3, r0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d001      	beq.n	80085fa <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80085f6:	f000 f9d9 	bl	80089ac <Error_Handler>
  }
}
 80085fa:	bf00      	nop
 80085fc:	3760      	adds	r7, #96	; 0x60
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop
 8008604:	40023800 	.word	0x40023800
 8008608:	40007000 	.word	0x40007000

0800860c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8008610:	4b06      	ldr	r3, [pc, #24]	; (800862c <MX_CRC_Init+0x20>)
 8008612:	4a07      	ldr	r2, [pc, #28]	; (8008630 <MX_CRC_Init+0x24>)
 8008614:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8008616:	4805      	ldr	r0, [pc, #20]	; (800862c <MX_CRC_Init+0x20>)
 8008618:	f000 fdad 	bl	8009176 <HAL_CRC_Init>
 800861c:	4603      	mov	r3, r0
 800861e:	2b00      	cmp	r3, #0
 8008620:	d001      	beq.n	8008626 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8008622:	f000 f9c3 	bl	80089ac <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8008626:	bf00      	nop
 8008628:	bd80      	pop	{r7, pc}
 800862a:	bf00      	nop
 800862c:	20000118 	.word	0x20000118
 8008630:	40023000 	.word	0x40023000

08008634 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008638:	4b12      	ldr	r3, [pc, #72]	; (8008684 <MX_I2C1_Init+0x50>)
 800863a:	4a13      	ldr	r2, [pc, #76]	; (8008688 <MX_I2C1_Init+0x54>)
 800863c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800863e:	4b11      	ldr	r3, [pc, #68]	; (8008684 <MX_I2C1_Init+0x50>)
 8008640:	4a12      	ldr	r2, [pc, #72]	; (800868c <MX_I2C1_Init+0x58>)
 8008642:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008644:	4b0f      	ldr	r3, [pc, #60]	; (8008684 <MX_I2C1_Init+0x50>)
 8008646:	2200      	movs	r2, #0
 8008648:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800864a:	4b0e      	ldr	r3, [pc, #56]	; (8008684 <MX_I2C1_Init+0x50>)
 800864c:	2200      	movs	r2, #0
 800864e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008650:	4b0c      	ldr	r3, [pc, #48]	; (8008684 <MX_I2C1_Init+0x50>)
 8008652:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008656:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008658:	4b0a      	ldr	r3, [pc, #40]	; (8008684 <MX_I2C1_Init+0x50>)
 800865a:	2200      	movs	r2, #0
 800865c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800865e:	4b09      	ldr	r3, [pc, #36]	; (8008684 <MX_I2C1_Init+0x50>)
 8008660:	2200      	movs	r2, #0
 8008662:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008664:	4b07      	ldr	r3, [pc, #28]	; (8008684 <MX_I2C1_Init+0x50>)
 8008666:	2200      	movs	r2, #0
 8008668:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800866a:	4b06      	ldr	r3, [pc, #24]	; (8008684 <MX_I2C1_Init+0x50>)
 800866c:	2200      	movs	r2, #0
 800866e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008670:	4804      	ldr	r0, [pc, #16]	; (8008684 <MX_I2C1_Init+0x50>)
 8008672:	f002 fc41 	bl	800aef8 <HAL_I2C_Init>
 8008676:	4603      	mov	r3, r0
 8008678:	2b00      	cmp	r3, #0
 800867a:	d001      	beq.n	8008680 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800867c:	f000 f996 	bl	80089ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8008680:	bf00      	nop
 8008682:	bd80      	pop	{r7, pc}
 8008684:	200000c4 	.word	0x200000c4
 8008688:	40005400 	.word	0x40005400
 800868c:	000186a0 	.word	0x000186a0

08008690 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8008694:	4b13      	ldr	r3, [pc, #76]	; (80086e4 <MX_I2S3_Init+0x54>)
 8008696:	4a14      	ldr	r2, [pc, #80]	; (80086e8 <MX_I2S3_Init+0x58>)
 8008698:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800869a:	4b12      	ldr	r3, [pc, #72]	; (80086e4 <MX_I2S3_Init+0x54>)
 800869c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086a0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80086a2:	4b10      	ldr	r3, [pc, #64]	; (80086e4 <MX_I2S3_Init+0x54>)
 80086a4:	2200      	movs	r2, #0
 80086a6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80086a8:	4b0e      	ldr	r3, [pc, #56]	; (80086e4 <MX_I2S3_Init+0x54>)
 80086aa:	2200      	movs	r2, #0
 80086ac:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80086ae:	4b0d      	ldr	r3, [pc, #52]	; (80086e4 <MX_I2S3_Init+0x54>)
 80086b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086b4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80086b6:	4b0b      	ldr	r3, [pc, #44]	; (80086e4 <MX_I2S3_Init+0x54>)
 80086b8:	4a0c      	ldr	r2, [pc, #48]	; (80086ec <MX_I2S3_Init+0x5c>)
 80086ba:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80086bc:	4b09      	ldr	r3, [pc, #36]	; (80086e4 <MX_I2S3_Init+0x54>)
 80086be:	2200      	movs	r2, #0
 80086c0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80086c2:	4b08      	ldr	r3, [pc, #32]	; (80086e4 <MX_I2S3_Init+0x54>)
 80086c4:	2200      	movs	r2, #0
 80086c6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80086c8:	4b06      	ldr	r3, [pc, #24]	; (80086e4 <MX_I2S3_Init+0x54>)
 80086ca:	2200      	movs	r2, #0
 80086cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80086ce:	4805      	ldr	r0, [pc, #20]	; (80086e4 <MX_I2S3_Init+0x54>)
 80086d0:	f002 fd4a 	bl	800b168 <HAL_I2S_Init>
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d001      	beq.n	80086de <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80086da:	f000 f967 	bl	80089ac <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80086de:	bf00      	nop
 80086e0:	bd80      	pop	{r7, pc}
 80086e2:	bf00      	nop
 80086e4:	200001b8 	.word	0x200001b8
 80086e8:	40003c00 	.word	0x40003c00
 80086ec:	00017700 	.word	0x00017700

080086f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80086f4:	4b17      	ldr	r3, [pc, #92]	; (8008754 <MX_SPI1_Init+0x64>)
 80086f6:	4a18      	ldr	r2, [pc, #96]	; (8008758 <MX_SPI1_Init+0x68>)
 80086f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80086fa:	4b16      	ldr	r3, [pc, #88]	; (8008754 <MX_SPI1_Init+0x64>)
 80086fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008700:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8008702:	4b14      	ldr	r3, [pc, #80]	; (8008754 <MX_SPI1_Init+0x64>)
 8008704:	2200      	movs	r2, #0
 8008706:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008708:	4b12      	ldr	r3, [pc, #72]	; (8008754 <MX_SPI1_Init+0x64>)
 800870a:	2200      	movs	r2, #0
 800870c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800870e:	4b11      	ldr	r3, [pc, #68]	; (8008754 <MX_SPI1_Init+0x64>)
 8008710:	2200      	movs	r2, #0
 8008712:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008714:	4b0f      	ldr	r3, [pc, #60]	; (8008754 <MX_SPI1_Init+0x64>)
 8008716:	2200      	movs	r2, #0
 8008718:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800871a:	4b0e      	ldr	r3, [pc, #56]	; (8008754 <MX_SPI1_Init+0x64>)
 800871c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008720:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008722:	4b0c      	ldr	r3, [pc, #48]	; (8008754 <MX_SPI1_Init+0x64>)
 8008724:	2200      	movs	r2, #0
 8008726:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008728:	4b0a      	ldr	r3, [pc, #40]	; (8008754 <MX_SPI1_Init+0x64>)
 800872a:	2200      	movs	r2, #0
 800872c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800872e:	4b09      	ldr	r3, [pc, #36]	; (8008754 <MX_SPI1_Init+0x64>)
 8008730:	2200      	movs	r2, #0
 8008732:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008734:	4b07      	ldr	r3, [pc, #28]	; (8008754 <MX_SPI1_Init+0x64>)
 8008736:	2200      	movs	r2, #0
 8008738:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800873a:	4b06      	ldr	r3, [pc, #24]	; (8008754 <MX_SPI1_Init+0x64>)
 800873c:	220a      	movs	r2, #10
 800873e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8008740:	4804      	ldr	r0, [pc, #16]	; (8008754 <MX_SPI1_Init+0x64>)
 8008742:	f003 ff51 	bl	800c5e8 <HAL_SPI_Init>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d001      	beq.n	8008750 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800874c:	f000 f92e 	bl	80089ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8008750:	bf00      	nop
 8008752:	bd80      	pop	{r7, pc}
 8008754:	20000120 	.word	0x20000120
 8008758:	40013000 	.word	0x40013000

0800875c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008760:	4b11      	ldr	r3, [pc, #68]	; (80087a8 <MX_USART2_UART_Init+0x4c>)
 8008762:	4a12      	ldr	r2, [pc, #72]	; (80087ac <MX_USART2_UART_Init+0x50>)
 8008764:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8008766:	4b10      	ldr	r3, [pc, #64]	; (80087a8 <MX_USART2_UART_Init+0x4c>)
 8008768:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800876c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800876e:	4b0e      	ldr	r3, [pc, #56]	; (80087a8 <MX_USART2_UART_Init+0x4c>)
 8008770:	2200      	movs	r2, #0
 8008772:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008774:	4b0c      	ldr	r3, [pc, #48]	; (80087a8 <MX_USART2_UART_Init+0x4c>)
 8008776:	2200      	movs	r2, #0
 8008778:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800877a:	4b0b      	ldr	r3, [pc, #44]	; (80087a8 <MX_USART2_UART_Init+0x4c>)
 800877c:	2200      	movs	r2, #0
 800877e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008780:	4b09      	ldr	r3, [pc, #36]	; (80087a8 <MX_USART2_UART_Init+0x4c>)
 8008782:	220c      	movs	r2, #12
 8008784:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008786:	4b08      	ldr	r3, [pc, #32]	; (80087a8 <MX_USART2_UART_Init+0x4c>)
 8008788:	2200      	movs	r2, #0
 800878a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800878c:	4b06      	ldr	r3, [pc, #24]	; (80087a8 <MX_USART2_UART_Init+0x4c>)
 800878e:	2200      	movs	r2, #0
 8008790:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008792:	4805      	ldr	r0, [pc, #20]	; (80087a8 <MX_USART2_UART_Init+0x4c>)
 8008794:	f003 ff8c 	bl	800c6b0 <HAL_UART_Init>
 8008798:	4603      	mov	r3, r0
 800879a:	2b00      	cmp	r3, #0
 800879c:	d001      	beq.n	80087a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800879e:	f000 f905 	bl	80089ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80087a2:	bf00      	nop
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	bf00      	nop
 80087a8:	20000178 	.word	0x20000178
 80087ac:	40004400 	.word	0x40004400

080087b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b08c      	sub	sp, #48	; 0x30
 80087b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087b6:	f107 031c 	add.w	r3, r7, #28
 80087ba:	2200      	movs	r2, #0
 80087bc:	601a      	str	r2, [r3, #0]
 80087be:	605a      	str	r2, [r3, #4]
 80087c0:	609a      	str	r2, [r3, #8]
 80087c2:	60da      	str	r2, [r3, #12]
 80087c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80087c6:	2300      	movs	r3, #0
 80087c8:	61bb      	str	r3, [r7, #24]
 80087ca:	4b71      	ldr	r3, [pc, #452]	; (8008990 <MX_GPIO_Init+0x1e0>)
 80087cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ce:	4a70      	ldr	r2, [pc, #448]	; (8008990 <MX_GPIO_Init+0x1e0>)
 80087d0:	f043 0310 	orr.w	r3, r3, #16
 80087d4:	6313      	str	r3, [r2, #48]	; 0x30
 80087d6:	4b6e      	ldr	r3, [pc, #440]	; (8008990 <MX_GPIO_Init+0x1e0>)
 80087d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087da:	f003 0310 	and.w	r3, r3, #16
 80087de:	61bb      	str	r3, [r7, #24]
 80087e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80087e2:	2300      	movs	r3, #0
 80087e4:	617b      	str	r3, [r7, #20]
 80087e6:	4b6a      	ldr	r3, [pc, #424]	; (8008990 <MX_GPIO_Init+0x1e0>)
 80087e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ea:	4a69      	ldr	r2, [pc, #420]	; (8008990 <MX_GPIO_Init+0x1e0>)
 80087ec:	f043 0304 	orr.w	r3, r3, #4
 80087f0:	6313      	str	r3, [r2, #48]	; 0x30
 80087f2:	4b67      	ldr	r3, [pc, #412]	; (8008990 <MX_GPIO_Init+0x1e0>)
 80087f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087f6:	f003 0304 	and.w	r3, r3, #4
 80087fa:	617b      	str	r3, [r7, #20]
 80087fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80087fe:	2300      	movs	r3, #0
 8008800:	613b      	str	r3, [r7, #16]
 8008802:	4b63      	ldr	r3, [pc, #396]	; (8008990 <MX_GPIO_Init+0x1e0>)
 8008804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008806:	4a62      	ldr	r2, [pc, #392]	; (8008990 <MX_GPIO_Init+0x1e0>)
 8008808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800880c:	6313      	str	r3, [r2, #48]	; 0x30
 800880e:	4b60      	ldr	r3, [pc, #384]	; (8008990 <MX_GPIO_Init+0x1e0>)
 8008810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008816:	613b      	str	r3, [r7, #16]
 8008818:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800881a:	2300      	movs	r3, #0
 800881c:	60fb      	str	r3, [r7, #12]
 800881e:	4b5c      	ldr	r3, [pc, #368]	; (8008990 <MX_GPIO_Init+0x1e0>)
 8008820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008822:	4a5b      	ldr	r2, [pc, #364]	; (8008990 <MX_GPIO_Init+0x1e0>)
 8008824:	f043 0301 	orr.w	r3, r3, #1
 8008828:	6313      	str	r3, [r2, #48]	; 0x30
 800882a:	4b59      	ldr	r3, [pc, #356]	; (8008990 <MX_GPIO_Init+0x1e0>)
 800882c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800882e:	f003 0301 	and.w	r3, r3, #1
 8008832:	60fb      	str	r3, [r7, #12]
 8008834:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008836:	2300      	movs	r3, #0
 8008838:	60bb      	str	r3, [r7, #8]
 800883a:	4b55      	ldr	r3, [pc, #340]	; (8008990 <MX_GPIO_Init+0x1e0>)
 800883c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800883e:	4a54      	ldr	r2, [pc, #336]	; (8008990 <MX_GPIO_Init+0x1e0>)
 8008840:	f043 0302 	orr.w	r3, r3, #2
 8008844:	6313      	str	r3, [r2, #48]	; 0x30
 8008846:	4b52      	ldr	r3, [pc, #328]	; (8008990 <MX_GPIO_Init+0x1e0>)
 8008848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800884a:	f003 0302 	and.w	r3, r3, #2
 800884e:	60bb      	str	r3, [r7, #8]
 8008850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008852:	2300      	movs	r3, #0
 8008854:	607b      	str	r3, [r7, #4]
 8008856:	4b4e      	ldr	r3, [pc, #312]	; (8008990 <MX_GPIO_Init+0x1e0>)
 8008858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800885a:	4a4d      	ldr	r2, [pc, #308]	; (8008990 <MX_GPIO_Init+0x1e0>)
 800885c:	f043 0308 	orr.w	r3, r3, #8
 8008860:	6313      	str	r3, [r2, #48]	; 0x30
 8008862:	4b4b      	ldr	r3, [pc, #300]	; (8008990 <MX_GPIO_Init+0x1e0>)
 8008864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008866:	f003 0308 	and.w	r3, r3, #8
 800886a:	607b      	str	r3, [r7, #4]
 800886c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800886e:	2200      	movs	r2, #0
 8008870:	2108      	movs	r1, #8
 8008872:	4848      	ldr	r0, [pc, #288]	; (8008994 <MX_GPIO_Init+0x1e4>)
 8008874:	f000 fe36 	bl	80094e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8008878:	2201      	movs	r2, #1
 800887a:	2101      	movs	r1, #1
 800887c:	4846      	ldr	r0, [pc, #280]	; (8008998 <MX_GPIO_Init+0x1e8>)
 800887e:	f000 fe31 	bl	80094e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8008882:	2200      	movs	r2, #0
 8008884:	f24f 0110 	movw	r1, #61456	; 0xf010
 8008888:	4844      	ldr	r0, [pc, #272]	; (800899c <MX_GPIO_Init+0x1ec>)
 800888a:	f000 fe2b 	bl	80094e4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800888e:	2308      	movs	r3, #8
 8008890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008892:	2301      	movs	r3, #1
 8008894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008896:	2300      	movs	r3, #0
 8008898:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800889a:	2300      	movs	r3, #0
 800889c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800889e:	f107 031c 	add.w	r3, r7, #28
 80088a2:	4619      	mov	r1, r3
 80088a4:	483b      	ldr	r0, [pc, #236]	; (8008994 <MX_GPIO_Init+0x1e4>)
 80088a6:	f000 fc83 	bl	80091b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80088aa:	2301      	movs	r3, #1
 80088ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80088ae:	2301      	movs	r3, #1
 80088b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088b2:	2300      	movs	r3, #0
 80088b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088b6:	2300      	movs	r3, #0
 80088b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80088ba:	f107 031c 	add.w	r3, r7, #28
 80088be:	4619      	mov	r1, r3
 80088c0:	4835      	ldr	r0, [pc, #212]	; (8008998 <MX_GPIO_Init+0x1e8>)
 80088c2:	f000 fc75 	bl	80091b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80088c6:	2308      	movs	r3, #8
 80088c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088ca:	2302      	movs	r3, #2
 80088cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088ce:	2300      	movs	r3, #0
 80088d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088d2:	2300      	movs	r3, #0
 80088d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80088d6:	2305      	movs	r3, #5
 80088d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80088da:	f107 031c 	add.w	r3, r7, #28
 80088de:	4619      	mov	r1, r3
 80088e0:	482d      	ldr	r0, [pc, #180]	; (8008998 <MX_GPIO_Init+0x1e8>)
 80088e2:	f000 fc65 	bl	80091b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80088e6:	2301      	movs	r3, #1
 80088e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80088ea:	4b2d      	ldr	r3, [pc, #180]	; (80089a0 <MX_GPIO_Init+0x1f0>)
 80088ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088ee:	2300      	movs	r3, #0
 80088f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80088f2:	f107 031c 	add.w	r3, r7, #28
 80088f6:	4619      	mov	r1, r3
 80088f8:	482a      	ldr	r0, [pc, #168]	; (80089a4 <MX_GPIO_Init+0x1f4>)
 80088fa:	f000 fc59 	bl	80091b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80088fe:	2304      	movs	r3, #4
 8008900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008902:	2300      	movs	r3, #0
 8008904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008906:	2300      	movs	r3, #0
 8008908:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800890a:	f107 031c 	add.w	r3, r7, #28
 800890e:	4619      	mov	r1, r3
 8008910:	4825      	ldr	r0, [pc, #148]	; (80089a8 <MX_GPIO_Init+0x1f8>)
 8008912:	f000 fc4d 	bl	80091b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8008916:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800891a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800891c:	2302      	movs	r3, #2
 800891e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008920:	2300      	movs	r3, #0
 8008922:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008924:	2300      	movs	r3, #0
 8008926:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8008928:	2305      	movs	r3, #5
 800892a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800892c:	f107 031c 	add.w	r3, r7, #28
 8008930:	4619      	mov	r1, r3
 8008932:	481d      	ldr	r0, [pc, #116]	; (80089a8 <MX_GPIO_Init+0x1f8>)
 8008934:	f000 fc3c 	bl	80091b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8008938:	f24f 0310 	movw	r3, #61456	; 0xf010
 800893c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800893e:	2301      	movs	r3, #1
 8008940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008942:	2300      	movs	r3, #0
 8008944:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008946:	2300      	movs	r3, #0
 8008948:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800894a:	f107 031c 	add.w	r3, r7, #28
 800894e:	4619      	mov	r1, r3
 8008950:	4812      	ldr	r0, [pc, #72]	; (800899c <MX_GPIO_Init+0x1ec>)
 8008952:	f000 fc2d 	bl	80091b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8008956:	2320      	movs	r3, #32
 8008958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800895a:	2300      	movs	r3, #0
 800895c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800895e:	2300      	movs	r3, #0
 8008960:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8008962:	f107 031c 	add.w	r3, r7, #28
 8008966:	4619      	mov	r1, r3
 8008968:	480c      	ldr	r0, [pc, #48]	; (800899c <MX_GPIO_Init+0x1ec>)
 800896a:	f000 fc21 	bl	80091b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800896e:	2302      	movs	r3, #2
 8008970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8008972:	4b0b      	ldr	r3, [pc, #44]	; (80089a0 <MX_GPIO_Init+0x1f0>)
 8008974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008976:	2300      	movs	r3, #0
 8008978:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800897a:	f107 031c 	add.w	r3, r7, #28
 800897e:	4619      	mov	r1, r3
 8008980:	4804      	ldr	r0, [pc, #16]	; (8008994 <MX_GPIO_Init+0x1e4>)
 8008982:	f000 fc15 	bl	80091b0 <HAL_GPIO_Init>

}
 8008986:	bf00      	nop
 8008988:	3730      	adds	r7, #48	; 0x30
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
 800898e:	bf00      	nop
 8008990:	40023800 	.word	0x40023800
 8008994:	40021000 	.word	0x40021000
 8008998:	40020800 	.word	0x40020800
 800899c:	40020c00 	.word	0x40020c00
 80089a0:	10120000 	.word	0x10120000
 80089a4:	40020000 	.word	0x40020000
 80089a8:	40020400 	.word	0x40020400

080089ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80089ac:	b480      	push	{r7}
 80089ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80089b0:	bf00      	nop
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr
	...

080089bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b082      	sub	sp, #8
 80089c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80089c2:	2300      	movs	r3, #0
 80089c4:	607b      	str	r3, [r7, #4]
 80089c6:	4b10      	ldr	r3, [pc, #64]	; (8008a08 <HAL_MspInit+0x4c>)
 80089c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089ca:	4a0f      	ldr	r2, [pc, #60]	; (8008a08 <HAL_MspInit+0x4c>)
 80089cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80089d0:	6453      	str	r3, [r2, #68]	; 0x44
 80089d2:	4b0d      	ldr	r3, [pc, #52]	; (8008a08 <HAL_MspInit+0x4c>)
 80089d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089da:	607b      	str	r3, [r7, #4]
 80089dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80089de:	2300      	movs	r3, #0
 80089e0:	603b      	str	r3, [r7, #0]
 80089e2:	4b09      	ldr	r3, [pc, #36]	; (8008a08 <HAL_MspInit+0x4c>)
 80089e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089e6:	4a08      	ldr	r2, [pc, #32]	; (8008a08 <HAL_MspInit+0x4c>)
 80089e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089ec:	6413      	str	r3, [r2, #64]	; 0x40
 80089ee:	4b06      	ldr	r3, [pc, #24]	; (8008a08 <HAL_MspInit+0x4c>)
 80089f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089f6:	603b      	str	r3, [r7, #0]
 80089f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80089fa:	2007      	movs	r0, #7
 80089fc:	f000 fb7a 	bl	80090f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008a00:	bf00      	nop
 8008a02:	3708      	adds	r7, #8
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}
 8008a08:	40023800 	.word	0x40023800

08008a0c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b085      	sub	sp, #20
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a0b      	ldr	r2, [pc, #44]	; (8008a48 <HAL_CRC_MspInit+0x3c>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d10d      	bne.n	8008a3a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8008a1e:	2300      	movs	r3, #0
 8008a20:	60fb      	str	r3, [r7, #12]
 8008a22:	4b0a      	ldr	r3, [pc, #40]	; (8008a4c <HAL_CRC_MspInit+0x40>)
 8008a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a26:	4a09      	ldr	r2, [pc, #36]	; (8008a4c <HAL_CRC_MspInit+0x40>)
 8008a28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8008a2e:	4b07      	ldr	r3, [pc, #28]	; (8008a4c <HAL_CRC_MspInit+0x40>)
 8008a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a36:	60fb      	str	r3, [r7, #12]
 8008a38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8008a3a:	bf00      	nop
 8008a3c:	3714      	adds	r7, #20
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a44:	4770      	bx	lr
 8008a46:	bf00      	nop
 8008a48:	40023000 	.word	0x40023000
 8008a4c:	40023800 	.word	0x40023800

08008a50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b08a      	sub	sp, #40	; 0x28
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a58:	f107 0314 	add.w	r3, r7, #20
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	601a      	str	r2, [r3, #0]
 8008a60:	605a      	str	r2, [r3, #4]
 8008a62:	609a      	str	r2, [r3, #8]
 8008a64:	60da      	str	r2, [r3, #12]
 8008a66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a19      	ldr	r2, [pc, #100]	; (8008ad4 <HAL_I2C_MspInit+0x84>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d12c      	bne.n	8008acc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008a72:	2300      	movs	r3, #0
 8008a74:	613b      	str	r3, [r7, #16]
 8008a76:	4b18      	ldr	r3, [pc, #96]	; (8008ad8 <HAL_I2C_MspInit+0x88>)
 8008a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a7a:	4a17      	ldr	r2, [pc, #92]	; (8008ad8 <HAL_I2C_MspInit+0x88>)
 8008a7c:	f043 0302 	orr.w	r3, r3, #2
 8008a80:	6313      	str	r3, [r2, #48]	; 0x30
 8008a82:	4b15      	ldr	r3, [pc, #84]	; (8008ad8 <HAL_I2C_MspInit+0x88>)
 8008a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a86:	f003 0302 	and.w	r3, r3, #2
 8008a8a:	613b      	str	r3, [r7, #16]
 8008a8c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8008a8e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8008a92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008a94:	2312      	movs	r3, #18
 8008a96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008aa0:	2304      	movs	r3, #4
 8008aa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008aa4:	f107 0314 	add.w	r3, r7, #20
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	480c      	ldr	r0, [pc, #48]	; (8008adc <HAL_I2C_MspInit+0x8c>)
 8008aac:	f000 fb80 	bl	80091b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	60fb      	str	r3, [r7, #12]
 8008ab4:	4b08      	ldr	r3, [pc, #32]	; (8008ad8 <HAL_I2C_MspInit+0x88>)
 8008ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ab8:	4a07      	ldr	r2, [pc, #28]	; (8008ad8 <HAL_I2C_MspInit+0x88>)
 8008aba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008abe:	6413      	str	r3, [r2, #64]	; 0x40
 8008ac0:	4b05      	ldr	r3, [pc, #20]	; (8008ad8 <HAL_I2C_MspInit+0x88>)
 8008ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ac8:	60fb      	str	r3, [r7, #12]
 8008aca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008acc:	bf00      	nop
 8008ace:	3728      	adds	r7, #40	; 0x28
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}
 8008ad4:	40005400 	.word	0x40005400
 8008ad8:	40023800 	.word	0x40023800
 8008adc:	40020400 	.word	0x40020400

08008ae0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b08a      	sub	sp, #40	; 0x28
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ae8:	f107 0314 	add.w	r3, r7, #20
 8008aec:	2200      	movs	r2, #0
 8008aee:	601a      	str	r2, [r3, #0]
 8008af0:	605a      	str	r2, [r3, #4]
 8008af2:	609a      	str	r2, [r3, #8]
 8008af4:	60da      	str	r2, [r3, #12]
 8008af6:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a28      	ldr	r2, [pc, #160]	; (8008ba0 <HAL_I2S_MspInit+0xc0>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d14a      	bne.n	8008b98 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8008b02:	2300      	movs	r3, #0
 8008b04:	613b      	str	r3, [r7, #16]
 8008b06:	4b27      	ldr	r3, [pc, #156]	; (8008ba4 <HAL_I2S_MspInit+0xc4>)
 8008b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b0a:	4a26      	ldr	r2, [pc, #152]	; (8008ba4 <HAL_I2S_MspInit+0xc4>)
 8008b0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b10:	6413      	str	r3, [r2, #64]	; 0x40
 8008b12:	4b24      	ldr	r3, [pc, #144]	; (8008ba4 <HAL_I2S_MspInit+0xc4>)
 8008b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b1a:	613b      	str	r3, [r7, #16]
 8008b1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008b1e:	2300      	movs	r3, #0
 8008b20:	60fb      	str	r3, [r7, #12]
 8008b22:	4b20      	ldr	r3, [pc, #128]	; (8008ba4 <HAL_I2S_MspInit+0xc4>)
 8008b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b26:	4a1f      	ldr	r2, [pc, #124]	; (8008ba4 <HAL_I2S_MspInit+0xc4>)
 8008b28:	f043 0301 	orr.w	r3, r3, #1
 8008b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8008b2e:	4b1d      	ldr	r3, [pc, #116]	; (8008ba4 <HAL_I2S_MspInit+0xc4>)
 8008b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b32:	f003 0301 	and.w	r3, r3, #1
 8008b36:	60fb      	str	r3, [r7, #12]
 8008b38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	60bb      	str	r3, [r7, #8]
 8008b3e:	4b19      	ldr	r3, [pc, #100]	; (8008ba4 <HAL_I2S_MspInit+0xc4>)
 8008b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b42:	4a18      	ldr	r2, [pc, #96]	; (8008ba4 <HAL_I2S_MspInit+0xc4>)
 8008b44:	f043 0304 	orr.w	r3, r3, #4
 8008b48:	6313      	str	r3, [r2, #48]	; 0x30
 8008b4a:	4b16      	ldr	r3, [pc, #88]	; (8008ba4 <HAL_I2S_MspInit+0xc4>)
 8008b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b4e:	f003 0304 	and.w	r3, r3, #4
 8008b52:	60bb      	str	r3, [r7, #8]
 8008b54:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8008b56:	2310      	movs	r3, #16
 8008b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b5a:	2302      	movs	r3, #2
 8008b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b62:	2300      	movs	r3, #0
 8008b64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008b66:	2306      	movs	r3, #6
 8008b68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8008b6a:	f107 0314 	add.w	r3, r7, #20
 8008b6e:	4619      	mov	r1, r3
 8008b70:	480d      	ldr	r0, [pc, #52]	; (8008ba8 <HAL_I2S_MspInit+0xc8>)
 8008b72:	f000 fb1d 	bl	80091b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8008b76:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8008b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b7c:	2302      	movs	r3, #2
 8008b7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b80:	2300      	movs	r3, #0
 8008b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b84:	2300      	movs	r3, #0
 8008b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008b88:	2306      	movs	r3, #6
 8008b8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008b8c:	f107 0314 	add.w	r3, r7, #20
 8008b90:	4619      	mov	r1, r3
 8008b92:	4806      	ldr	r0, [pc, #24]	; (8008bac <HAL_I2S_MspInit+0xcc>)
 8008b94:	f000 fb0c 	bl	80091b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8008b98:	bf00      	nop
 8008b9a:	3728      	adds	r7, #40	; 0x28
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}
 8008ba0:	40003c00 	.word	0x40003c00
 8008ba4:	40023800 	.word	0x40023800
 8008ba8:	40020000 	.word	0x40020000
 8008bac:	40020800 	.word	0x40020800

08008bb0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b08a      	sub	sp, #40	; 0x28
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008bb8:	f107 0314 	add.w	r3, r7, #20
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	601a      	str	r2, [r3, #0]
 8008bc0:	605a      	str	r2, [r3, #4]
 8008bc2:	609a      	str	r2, [r3, #8]
 8008bc4:	60da      	str	r2, [r3, #12]
 8008bc6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4a19      	ldr	r2, [pc, #100]	; (8008c34 <HAL_SPI_MspInit+0x84>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d12b      	bne.n	8008c2a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	613b      	str	r3, [r7, #16]
 8008bd6:	4b18      	ldr	r3, [pc, #96]	; (8008c38 <HAL_SPI_MspInit+0x88>)
 8008bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bda:	4a17      	ldr	r2, [pc, #92]	; (8008c38 <HAL_SPI_MspInit+0x88>)
 8008bdc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008be0:	6453      	str	r3, [r2, #68]	; 0x44
 8008be2:	4b15      	ldr	r3, [pc, #84]	; (8008c38 <HAL_SPI_MspInit+0x88>)
 8008be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008be6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008bea:	613b      	str	r3, [r7, #16]
 8008bec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008bee:	2300      	movs	r3, #0
 8008bf0:	60fb      	str	r3, [r7, #12]
 8008bf2:	4b11      	ldr	r3, [pc, #68]	; (8008c38 <HAL_SPI_MspInit+0x88>)
 8008bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bf6:	4a10      	ldr	r2, [pc, #64]	; (8008c38 <HAL_SPI_MspInit+0x88>)
 8008bf8:	f043 0301 	orr.w	r3, r3, #1
 8008bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8008bfe:	4b0e      	ldr	r3, [pc, #56]	; (8008c38 <HAL_SPI_MspInit+0x88>)
 8008c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c02:	f003 0301 	and.w	r3, r3, #1
 8008c06:	60fb      	str	r3, [r7, #12]
 8008c08:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8008c0a:	23e0      	movs	r3, #224	; 0xe0
 8008c0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c0e:	2302      	movs	r3, #2
 8008c10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c12:	2300      	movs	r3, #0
 8008c14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c16:	2300      	movs	r3, #0
 8008c18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008c1a:	2305      	movs	r3, #5
 8008c1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c1e:	f107 0314 	add.w	r3, r7, #20
 8008c22:	4619      	mov	r1, r3
 8008c24:	4805      	ldr	r0, [pc, #20]	; (8008c3c <HAL_SPI_MspInit+0x8c>)
 8008c26:	f000 fac3 	bl	80091b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8008c2a:	bf00      	nop
 8008c2c:	3728      	adds	r7, #40	; 0x28
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	40013000 	.word	0x40013000
 8008c38:	40023800 	.word	0x40023800
 8008c3c:	40020000 	.word	0x40020000

08008c40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b08a      	sub	sp, #40	; 0x28
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c48:	f107 0314 	add.w	r3, r7, #20
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	601a      	str	r2, [r3, #0]
 8008c50:	605a      	str	r2, [r3, #4]
 8008c52:	609a      	str	r2, [r3, #8]
 8008c54:	60da      	str	r2, [r3, #12]
 8008c56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a19      	ldr	r2, [pc, #100]	; (8008cc4 <HAL_UART_MspInit+0x84>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d12b      	bne.n	8008cba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008c62:	2300      	movs	r3, #0
 8008c64:	613b      	str	r3, [r7, #16]
 8008c66:	4b18      	ldr	r3, [pc, #96]	; (8008cc8 <HAL_UART_MspInit+0x88>)
 8008c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c6a:	4a17      	ldr	r2, [pc, #92]	; (8008cc8 <HAL_UART_MspInit+0x88>)
 8008c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c70:	6413      	str	r3, [r2, #64]	; 0x40
 8008c72:	4b15      	ldr	r3, [pc, #84]	; (8008cc8 <HAL_UART_MspInit+0x88>)
 8008c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c7a:	613b      	str	r3, [r7, #16]
 8008c7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c7e:	2300      	movs	r3, #0
 8008c80:	60fb      	str	r3, [r7, #12]
 8008c82:	4b11      	ldr	r3, [pc, #68]	; (8008cc8 <HAL_UART_MspInit+0x88>)
 8008c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c86:	4a10      	ldr	r2, [pc, #64]	; (8008cc8 <HAL_UART_MspInit+0x88>)
 8008c88:	f043 0301 	orr.w	r3, r3, #1
 8008c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8008c8e:	4b0e      	ldr	r3, [pc, #56]	; (8008cc8 <HAL_UART_MspInit+0x88>)
 8008c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c92:	f003 0301 	and.w	r3, r3, #1
 8008c96:	60fb      	str	r3, [r7, #12]
 8008c98:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8008c9a:	230c      	movs	r3, #12
 8008c9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c9e:	2302      	movs	r3, #2
 8008ca0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ca6:	2303      	movs	r3, #3
 8008ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008caa:	2307      	movs	r3, #7
 8008cac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cae:	f107 0314 	add.w	r3, r7, #20
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	4805      	ldr	r0, [pc, #20]	; (8008ccc <HAL_UART_MspInit+0x8c>)
 8008cb6:	f000 fa7b 	bl	80091b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8008cba:	bf00      	nop
 8008cbc:	3728      	adds	r7, #40	; 0x28
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
 8008cc2:	bf00      	nop
 8008cc4:	40004400 	.word	0x40004400
 8008cc8:	40023800 	.word	0x40023800
 8008ccc:	40020000 	.word	0x40020000

08008cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008cd4:	bf00      	nop
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr

08008cde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008cde:	b480      	push	{r7}
 8008ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008ce2:	e7fe      	b.n	8008ce2 <HardFault_Handler+0x4>

08008ce4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008ce8:	e7fe      	b.n	8008ce8 <MemManage_Handler+0x4>

08008cea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008cea:	b480      	push	{r7}
 8008cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008cee:	e7fe      	b.n	8008cee <BusFault_Handler+0x4>

08008cf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008cf4:	e7fe      	b.n	8008cf4 <UsageFault_Handler+0x4>

08008cf6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008cf6:	b480      	push	{r7}
 8008cf8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008cfa:	bf00      	nop
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr

08008d04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008d04:	b480      	push	{r7}
 8008d06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008d08:	bf00      	nop
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr

08008d12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008d12:	b480      	push	{r7}
 8008d14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008d16:	bf00      	nop
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008d24:	f000 f8d4 	bl	8008ed0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008d28:	bf00      	nop
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8008d30:	4802      	ldr	r0, [pc, #8]	; (8008d3c <OTG_FS_IRQHandler+0x10>)
 8008d32:	f000 fe9b 	bl	8009a6c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8008d36:	bf00      	nop
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	200005dc 	.word	0x200005dc

08008d40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b086      	sub	sp, #24
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008d48:	4a14      	ldr	r2, [pc, #80]	; (8008d9c <_sbrk+0x5c>)
 8008d4a:	4b15      	ldr	r3, [pc, #84]	; (8008da0 <_sbrk+0x60>)
 8008d4c:	1ad3      	subs	r3, r2, r3
 8008d4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008d54:	4b13      	ldr	r3, [pc, #76]	; (8008da4 <_sbrk+0x64>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d102      	bne.n	8008d62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008d5c:	4b11      	ldr	r3, [pc, #68]	; (8008da4 <_sbrk+0x64>)
 8008d5e:	4a12      	ldr	r2, [pc, #72]	; (8008da8 <_sbrk+0x68>)
 8008d60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008d62:	4b10      	ldr	r3, [pc, #64]	; (8008da4 <_sbrk+0x64>)
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	4413      	add	r3, r2
 8008d6a:	693a      	ldr	r2, [r7, #16]
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d207      	bcs.n	8008d80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008d70:	f006 fa8a 	bl	800f288 <__errno>
 8008d74:	4602      	mov	r2, r0
 8008d76:	230c      	movs	r3, #12
 8008d78:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8008d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8008d7e:	e009      	b.n	8008d94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008d80:	4b08      	ldr	r3, [pc, #32]	; (8008da4 <_sbrk+0x64>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008d86:	4b07      	ldr	r3, [pc, #28]	; (8008da4 <_sbrk+0x64>)
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	4413      	add	r3, r2
 8008d8e:	4a05      	ldr	r2, [pc, #20]	; (8008da4 <_sbrk+0x64>)
 8008d90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008d92:	68fb      	ldr	r3, [r7, #12]
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3718      	adds	r7, #24
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}
 8008d9c:	20020000 	.word	0x20020000
 8008da0:	00000400 	.word	0x00000400
 8008da4:	200000ac 	.word	0x200000ac
 8008da8:	200008a8 	.word	0x200008a8

08008dac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008dac:	b480      	push	{r7}
 8008dae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008db0:	4b07      	ldr	r3, [pc, #28]	; (8008dd0 <SystemInit+0x24>)
 8008db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008db6:	4a06      	ldr	r2, [pc, #24]	; (8008dd0 <SystemInit+0x24>)
 8008db8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008dbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008dc0:	4b03      	ldr	r3, [pc, #12]	; (8008dd0 <SystemInit+0x24>)
 8008dc2:	4a04      	ldr	r2, [pc, #16]	; (8008dd4 <SystemInit+0x28>)
 8008dc4:	609a      	str	r2, [r3, #8]
#endif
}
 8008dc6:	bf00      	nop
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr
 8008dd0:	e000ed00 	.word	0xe000ed00
 8008dd4:	08008000 	.word	0x08008000

08008dd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008dd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008e10 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008ddc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008dde:	e003      	b.n	8008de8 <LoopCopyDataInit>

08008de0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008de0:	4b0c      	ldr	r3, [pc, #48]	; (8008e14 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008de2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008de4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008de6:	3104      	adds	r1, #4

08008de8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008de8:	480b      	ldr	r0, [pc, #44]	; (8008e18 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008dea:	4b0c      	ldr	r3, [pc, #48]	; (8008e1c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008dec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008dee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008df0:	d3f6      	bcc.n	8008de0 <CopyDataInit>
  ldr  r2, =_sbss
 8008df2:	4a0b      	ldr	r2, [pc, #44]	; (8008e20 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008df4:	e002      	b.n	8008dfc <LoopFillZerobss>

08008df6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008df6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008df8:	f842 3b04 	str.w	r3, [r2], #4

08008dfc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008dfc:	4b09      	ldr	r3, [pc, #36]	; (8008e24 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008dfe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008e00:	d3f9      	bcc.n	8008df6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008e02:	f7ff ffd3 	bl	8008dac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008e06:	f006 fa45 	bl	800f294 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008e0a:	f7ff fb5d 	bl	80084c8 <main>
  bx  lr    
 8008e0e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008e10:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008e14:	0800f4c4 	.word	0x0800f4c4
  ldr  r0, =_sdata
 8008e18:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008e1c:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8008e20:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8008e24:	200008a4 	.word	0x200008a4

08008e28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008e28:	e7fe      	b.n	8008e28 <ADC_IRQHandler>
	...

08008e2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008e30:	4b0e      	ldr	r3, [pc, #56]	; (8008e6c <HAL_Init+0x40>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4a0d      	ldr	r2, [pc, #52]	; (8008e6c <HAL_Init+0x40>)
 8008e36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008e3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008e3c:	4b0b      	ldr	r3, [pc, #44]	; (8008e6c <HAL_Init+0x40>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a0a      	ldr	r2, [pc, #40]	; (8008e6c <HAL_Init+0x40>)
 8008e42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008e46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008e48:	4b08      	ldr	r3, [pc, #32]	; (8008e6c <HAL_Init+0x40>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a07      	ldr	r2, [pc, #28]	; (8008e6c <HAL_Init+0x40>)
 8008e4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008e54:	2003      	movs	r0, #3
 8008e56:	f000 f94d 	bl	80090f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008e5a:	2000      	movs	r0, #0
 8008e5c:	f000 f808 	bl	8008e70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008e60:	f7ff fdac 	bl	80089bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008e64:	2300      	movs	r3, #0
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	bd80      	pop	{r7, pc}
 8008e6a:	bf00      	nop
 8008e6c:	40023c00 	.word	0x40023c00

08008e70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b082      	sub	sp, #8
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008e78:	4b12      	ldr	r3, [pc, #72]	; (8008ec4 <HAL_InitTick+0x54>)
 8008e7a:	681a      	ldr	r2, [r3, #0]
 8008e7c:	4b12      	ldr	r3, [pc, #72]	; (8008ec8 <HAL_InitTick+0x58>)
 8008e7e:	781b      	ldrb	r3, [r3, #0]
 8008e80:	4619      	mov	r1, r3
 8008e82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008e86:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f000 f965 	bl	800915e <HAL_SYSTICK_Config>
 8008e94:	4603      	mov	r3, r0
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d001      	beq.n	8008e9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	e00e      	b.n	8008ebc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2b0f      	cmp	r3, #15
 8008ea2:	d80a      	bhi.n	8008eba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	6879      	ldr	r1, [r7, #4]
 8008ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8008eac:	f000 f92d 	bl	800910a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008eb0:	4a06      	ldr	r2, [pc, #24]	; (8008ecc <HAL_InitTick+0x5c>)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	e000      	b.n	8008ebc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008eba:	2301      	movs	r3, #1
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3708      	adds	r7, #8
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}
 8008ec4:	20000000 	.word	0x20000000
 8008ec8:	20000008 	.word	0x20000008
 8008ecc:	20000004 	.word	0x20000004

08008ed0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008ed4:	4b06      	ldr	r3, [pc, #24]	; (8008ef0 <HAL_IncTick+0x20>)
 8008ed6:	781b      	ldrb	r3, [r3, #0]
 8008ed8:	461a      	mov	r2, r3
 8008eda:	4b06      	ldr	r3, [pc, #24]	; (8008ef4 <HAL_IncTick+0x24>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4413      	add	r3, r2
 8008ee0:	4a04      	ldr	r2, [pc, #16]	; (8008ef4 <HAL_IncTick+0x24>)
 8008ee2:	6013      	str	r3, [r2, #0]
}
 8008ee4:	bf00      	nop
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eec:	4770      	bx	lr
 8008eee:	bf00      	nop
 8008ef0:	20000008 	.word	0x20000008
 8008ef4:	20000200 	.word	0x20000200

08008ef8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	af00      	add	r7, sp, #0
  return uwTick;
 8008efc:	4b03      	ldr	r3, [pc, #12]	; (8008f0c <HAL_GetTick+0x14>)
 8008efe:	681b      	ldr	r3, [r3, #0]
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr
 8008f0a:	bf00      	nop
 8008f0c:	20000200 	.word	0x20000200

08008f10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b084      	sub	sp, #16
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008f18:	f7ff ffee 	bl	8008ef8 <HAL_GetTick>
 8008f1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f28:	d005      	beq.n	8008f36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008f2a:	4b09      	ldr	r3, [pc, #36]	; (8008f50 <HAL_Delay+0x40>)
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	461a      	mov	r2, r3
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	4413      	add	r3, r2
 8008f34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008f36:	bf00      	nop
 8008f38:	f7ff ffde 	bl	8008ef8 <HAL_GetTick>
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	1ad3      	subs	r3, r2, r3
 8008f42:	68fa      	ldr	r2, [r7, #12]
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d8f7      	bhi.n	8008f38 <HAL_Delay+0x28>
  {
  }
}
 8008f48:	bf00      	nop
 8008f4a:	3710      	adds	r7, #16
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}
 8008f50:	20000008 	.word	0x20000008

08008f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b085      	sub	sp, #20
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f003 0307 	and.w	r3, r3, #7
 8008f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008f64:	4b0c      	ldr	r3, [pc, #48]	; (8008f98 <__NVIC_SetPriorityGrouping+0x44>)
 8008f66:	68db      	ldr	r3, [r3, #12]
 8008f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008f6a:	68ba      	ldr	r2, [r7, #8]
 8008f6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008f70:	4013      	ands	r3, r2
 8008f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008f7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008f86:	4a04      	ldr	r2, [pc, #16]	; (8008f98 <__NVIC_SetPriorityGrouping+0x44>)
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	60d3      	str	r3, [r2, #12]
}
 8008f8c:	bf00      	nop
 8008f8e:	3714      	adds	r7, #20
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr
 8008f98:	e000ed00 	.word	0xe000ed00

08008f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008fa0:	4b04      	ldr	r3, [pc, #16]	; (8008fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8008fa2:	68db      	ldr	r3, [r3, #12]
 8008fa4:	0a1b      	lsrs	r3, r3, #8
 8008fa6:	f003 0307 	and.w	r3, r3, #7
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr
 8008fb4:	e000ed00 	.word	0xe000ed00

08008fb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b083      	sub	sp, #12
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	db0b      	blt.n	8008fe2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008fca:	79fb      	ldrb	r3, [r7, #7]
 8008fcc:	f003 021f 	and.w	r2, r3, #31
 8008fd0:	4907      	ldr	r1, [pc, #28]	; (8008ff0 <__NVIC_EnableIRQ+0x38>)
 8008fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fd6:	095b      	lsrs	r3, r3, #5
 8008fd8:	2001      	movs	r0, #1
 8008fda:	fa00 f202 	lsl.w	r2, r0, r2
 8008fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008fe2:	bf00      	nop
 8008fe4:	370c      	adds	r7, #12
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr
 8008fee:	bf00      	nop
 8008ff0:	e000e100 	.word	0xe000e100

08008ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	6039      	str	r1, [r7, #0]
 8008ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009004:	2b00      	cmp	r3, #0
 8009006:	db0a      	blt.n	800901e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	b2da      	uxtb	r2, r3
 800900c:	490c      	ldr	r1, [pc, #48]	; (8009040 <__NVIC_SetPriority+0x4c>)
 800900e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009012:	0112      	lsls	r2, r2, #4
 8009014:	b2d2      	uxtb	r2, r2
 8009016:	440b      	add	r3, r1
 8009018:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800901c:	e00a      	b.n	8009034 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	b2da      	uxtb	r2, r3
 8009022:	4908      	ldr	r1, [pc, #32]	; (8009044 <__NVIC_SetPriority+0x50>)
 8009024:	79fb      	ldrb	r3, [r7, #7]
 8009026:	f003 030f 	and.w	r3, r3, #15
 800902a:	3b04      	subs	r3, #4
 800902c:	0112      	lsls	r2, r2, #4
 800902e:	b2d2      	uxtb	r2, r2
 8009030:	440b      	add	r3, r1
 8009032:	761a      	strb	r2, [r3, #24]
}
 8009034:	bf00      	nop
 8009036:	370c      	adds	r7, #12
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr
 8009040:	e000e100 	.word	0xe000e100
 8009044:	e000ed00 	.word	0xe000ed00

08009048 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009048:	b480      	push	{r7}
 800904a:	b089      	sub	sp, #36	; 0x24
 800904c:	af00      	add	r7, sp, #0
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	60b9      	str	r1, [r7, #8]
 8009052:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f003 0307 	and.w	r3, r3, #7
 800905a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800905c:	69fb      	ldr	r3, [r7, #28]
 800905e:	f1c3 0307 	rsb	r3, r3, #7
 8009062:	2b04      	cmp	r3, #4
 8009064:	bf28      	it	cs
 8009066:	2304      	movcs	r3, #4
 8009068:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800906a:	69fb      	ldr	r3, [r7, #28]
 800906c:	3304      	adds	r3, #4
 800906e:	2b06      	cmp	r3, #6
 8009070:	d902      	bls.n	8009078 <NVIC_EncodePriority+0x30>
 8009072:	69fb      	ldr	r3, [r7, #28]
 8009074:	3b03      	subs	r3, #3
 8009076:	e000      	b.n	800907a <NVIC_EncodePriority+0x32>
 8009078:	2300      	movs	r3, #0
 800907a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800907c:	f04f 32ff 	mov.w	r2, #4294967295
 8009080:	69bb      	ldr	r3, [r7, #24]
 8009082:	fa02 f303 	lsl.w	r3, r2, r3
 8009086:	43da      	mvns	r2, r3
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	401a      	ands	r2, r3
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009090:	f04f 31ff 	mov.w	r1, #4294967295
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	fa01 f303 	lsl.w	r3, r1, r3
 800909a:	43d9      	mvns	r1, r3
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80090a0:	4313      	orrs	r3, r2
         );
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3724      	adds	r7, #36	; 0x24
 80090a6:	46bd      	mov	sp, r7
 80090a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ac:	4770      	bx	lr
	...

080090b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b082      	sub	sp, #8
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	3b01      	subs	r3, #1
 80090bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80090c0:	d301      	bcc.n	80090c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80090c2:	2301      	movs	r3, #1
 80090c4:	e00f      	b.n	80090e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80090c6:	4a0a      	ldr	r2, [pc, #40]	; (80090f0 <SysTick_Config+0x40>)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	3b01      	subs	r3, #1
 80090cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80090ce:	210f      	movs	r1, #15
 80090d0:	f04f 30ff 	mov.w	r0, #4294967295
 80090d4:	f7ff ff8e 	bl	8008ff4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80090d8:	4b05      	ldr	r3, [pc, #20]	; (80090f0 <SysTick_Config+0x40>)
 80090da:	2200      	movs	r2, #0
 80090dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80090de:	4b04      	ldr	r3, [pc, #16]	; (80090f0 <SysTick_Config+0x40>)
 80090e0:	2207      	movs	r2, #7
 80090e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80090e4:	2300      	movs	r3, #0
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3708      	adds	r7, #8
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	e000e010 	.word	0xe000e010

080090f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f7ff ff29 	bl	8008f54 <__NVIC_SetPriorityGrouping>
}
 8009102:	bf00      	nop
 8009104:	3708      	adds	r7, #8
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}

0800910a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800910a:	b580      	push	{r7, lr}
 800910c:	b086      	sub	sp, #24
 800910e:	af00      	add	r7, sp, #0
 8009110:	4603      	mov	r3, r0
 8009112:	60b9      	str	r1, [r7, #8]
 8009114:	607a      	str	r2, [r7, #4]
 8009116:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009118:	2300      	movs	r3, #0
 800911a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800911c:	f7ff ff3e 	bl	8008f9c <__NVIC_GetPriorityGrouping>
 8009120:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009122:	687a      	ldr	r2, [r7, #4]
 8009124:	68b9      	ldr	r1, [r7, #8]
 8009126:	6978      	ldr	r0, [r7, #20]
 8009128:	f7ff ff8e 	bl	8009048 <NVIC_EncodePriority>
 800912c:	4602      	mov	r2, r0
 800912e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009132:	4611      	mov	r1, r2
 8009134:	4618      	mov	r0, r3
 8009136:	f7ff ff5d 	bl	8008ff4 <__NVIC_SetPriority>
}
 800913a:	bf00      	nop
 800913c:	3718      	adds	r7, #24
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}

08009142 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009142:	b580      	push	{r7, lr}
 8009144:	b082      	sub	sp, #8
 8009146:	af00      	add	r7, sp, #0
 8009148:	4603      	mov	r3, r0
 800914a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800914c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009150:	4618      	mov	r0, r3
 8009152:	f7ff ff31 	bl	8008fb8 <__NVIC_EnableIRQ>
}
 8009156:	bf00      	nop
 8009158:	3708      	adds	r7, #8
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}

0800915e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800915e:	b580      	push	{r7, lr}
 8009160:	b082      	sub	sp, #8
 8009162:	af00      	add	r7, sp, #0
 8009164:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f7ff ffa2 	bl	80090b0 <SysTick_Config>
 800916c:	4603      	mov	r3, r0
}
 800916e:	4618      	mov	r0, r3
 8009170:	3708      	adds	r7, #8
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}

08009176 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8009176:	b580      	push	{r7, lr}
 8009178:	b082      	sub	sp, #8
 800917a:	af00      	add	r7, sp, #0
 800917c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d101      	bne.n	8009188 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8009184:	2301      	movs	r3, #1
 8009186:	e00e      	b.n	80091a6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	795b      	ldrb	r3, [r3, #5]
 800918c:	b2db      	uxtb	r3, r3
 800918e:	2b00      	cmp	r3, #0
 8009190:	d105      	bne.n	800919e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2200      	movs	r2, #0
 8009196:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f7ff fc37 	bl	8008a0c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2201      	movs	r2, #1
 80091a2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80091a4:	2300      	movs	r3, #0
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3708      	adds	r7, #8
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
	...

080091b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b089      	sub	sp, #36	; 0x24
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80091ba:	2300      	movs	r3, #0
 80091bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80091be:	2300      	movs	r3, #0
 80091c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80091c2:	2300      	movs	r3, #0
 80091c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80091c6:	2300      	movs	r3, #0
 80091c8:	61fb      	str	r3, [r7, #28]
 80091ca:	e16b      	b.n	80094a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80091cc:	2201      	movs	r2, #1
 80091ce:	69fb      	ldr	r3, [r7, #28]
 80091d0:	fa02 f303 	lsl.w	r3, r2, r3
 80091d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	697a      	ldr	r2, [r7, #20]
 80091dc:	4013      	ands	r3, r2
 80091de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80091e0:	693a      	ldr	r2, [r7, #16]
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	429a      	cmp	r2, r3
 80091e6:	f040 815a 	bne.w	800949e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	685b      	ldr	r3, [r3, #4]
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d00b      	beq.n	800920a <HAL_GPIO_Init+0x5a>
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	2b02      	cmp	r3, #2
 80091f8:	d007      	beq.n	800920a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80091fe:	2b11      	cmp	r3, #17
 8009200:	d003      	beq.n	800920a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	2b12      	cmp	r3, #18
 8009208:	d130      	bne.n	800926c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	689b      	ldr	r3, [r3, #8]
 800920e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009210:	69fb      	ldr	r3, [r7, #28]
 8009212:	005b      	lsls	r3, r3, #1
 8009214:	2203      	movs	r2, #3
 8009216:	fa02 f303 	lsl.w	r3, r2, r3
 800921a:	43db      	mvns	r3, r3
 800921c:	69ba      	ldr	r2, [r7, #24]
 800921e:	4013      	ands	r3, r2
 8009220:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	68da      	ldr	r2, [r3, #12]
 8009226:	69fb      	ldr	r3, [r7, #28]
 8009228:	005b      	lsls	r3, r3, #1
 800922a:	fa02 f303 	lsl.w	r3, r2, r3
 800922e:	69ba      	ldr	r2, [r7, #24]
 8009230:	4313      	orrs	r3, r2
 8009232:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	69ba      	ldr	r2, [r7, #24]
 8009238:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009240:	2201      	movs	r2, #1
 8009242:	69fb      	ldr	r3, [r7, #28]
 8009244:	fa02 f303 	lsl.w	r3, r2, r3
 8009248:	43db      	mvns	r3, r3
 800924a:	69ba      	ldr	r2, [r7, #24]
 800924c:	4013      	ands	r3, r2
 800924e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	091b      	lsrs	r3, r3, #4
 8009256:	f003 0201 	and.w	r2, r3, #1
 800925a:	69fb      	ldr	r3, [r7, #28]
 800925c:	fa02 f303 	lsl.w	r3, r2, r3
 8009260:	69ba      	ldr	r2, [r7, #24]
 8009262:	4313      	orrs	r3, r2
 8009264:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	69ba      	ldr	r2, [r7, #24]
 800926a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	68db      	ldr	r3, [r3, #12]
 8009270:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009272:	69fb      	ldr	r3, [r7, #28]
 8009274:	005b      	lsls	r3, r3, #1
 8009276:	2203      	movs	r2, #3
 8009278:	fa02 f303 	lsl.w	r3, r2, r3
 800927c:	43db      	mvns	r3, r3
 800927e:	69ba      	ldr	r2, [r7, #24]
 8009280:	4013      	ands	r3, r2
 8009282:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	689a      	ldr	r2, [r3, #8]
 8009288:	69fb      	ldr	r3, [r7, #28]
 800928a:	005b      	lsls	r3, r3, #1
 800928c:	fa02 f303 	lsl.w	r3, r2, r3
 8009290:	69ba      	ldr	r2, [r7, #24]
 8009292:	4313      	orrs	r3, r2
 8009294:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	69ba      	ldr	r2, [r7, #24]
 800929a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	2b02      	cmp	r3, #2
 80092a2:	d003      	beq.n	80092ac <HAL_GPIO_Init+0xfc>
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	2b12      	cmp	r3, #18
 80092aa:	d123      	bne.n	80092f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80092ac:	69fb      	ldr	r3, [r7, #28]
 80092ae:	08da      	lsrs	r2, r3, #3
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	3208      	adds	r2, #8
 80092b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80092ba:	69fb      	ldr	r3, [r7, #28]
 80092bc:	f003 0307 	and.w	r3, r3, #7
 80092c0:	009b      	lsls	r3, r3, #2
 80092c2:	220f      	movs	r2, #15
 80092c4:	fa02 f303 	lsl.w	r3, r2, r3
 80092c8:	43db      	mvns	r3, r3
 80092ca:	69ba      	ldr	r2, [r7, #24]
 80092cc:	4013      	ands	r3, r2
 80092ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	691a      	ldr	r2, [r3, #16]
 80092d4:	69fb      	ldr	r3, [r7, #28]
 80092d6:	f003 0307 	and.w	r3, r3, #7
 80092da:	009b      	lsls	r3, r3, #2
 80092dc:	fa02 f303 	lsl.w	r3, r2, r3
 80092e0:	69ba      	ldr	r2, [r7, #24]
 80092e2:	4313      	orrs	r3, r2
 80092e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80092e6:	69fb      	ldr	r3, [r7, #28]
 80092e8:	08da      	lsrs	r2, r3, #3
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	3208      	adds	r2, #8
 80092ee:	69b9      	ldr	r1, [r7, #24]
 80092f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80092fa:	69fb      	ldr	r3, [r7, #28]
 80092fc:	005b      	lsls	r3, r3, #1
 80092fe:	2203      	movs	r2, #3
 8009300:	fa02 f303 	lsl.w	r3, r2, r3
 8009304:	43db      	mvns	r3, r3
 8009306:	69ba      	ldr	r2, [r7, #24]
 8009308:	4013      	ands	r3, r2
 800930a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	f003 0203 	and.w	r2, r3, #3
 8009314:	69fb      	ldr	r3, [r7, #28]
 8009316:	005b      	lsls	r3, r3, #1
 8009318:	fa02 f303 	lsl.w	r3, r2, r3
 800931c:	69ba      	ldr	r2, [r7, #24]
 800931e:	4313      	orrs	r3, r2
 8009320:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	69ba      	ldr	r2, [r7, #24]
 8009326:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009330:	2b00      	cmp	r3, #0
 8009332:	f000 80b4 	beq.w	800949e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009336:	2300      	movs	r3, #0
 8009338:	60fb      	str	r3, [r7, #12]
 800933a:	4b5f      	ldr	r3, [pc, #380]	; (80094b8 <HAL_GPIO_Init+0x308>)
 800933c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800933e:	4a5e      	ldr	r2, [pc, #376]	; (80094b8 <HAL_GPIO_Init+0x308>)
 8009340:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009344:	6453      	str	r3, [r2, #68]	; 0x44
 8009346:	4b5c      	ldr	r3, [pc, #368]	; (80094b8 <HAL_GPIO_Init+0x308>)
 8009348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800934a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800934e:	60fb      	str	r3, [r7, #12]
 8009350:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009352:	4a5a      	ldr	r2, [pc, #360]	; (80094bc <HAL_GPIO_Init+0x30c>)
 8009354:	69fb      	ldr	r3, [r7, #28]
 8009356:	089b      	lsrs	r3, r3, #2
 8009358:	3302      	adds	r3, #2
 800935a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800935e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009360:	69fb      	ldr	r3, [r7, #28]
 8009362:	f003 0303 	and.w	r3, r3, #3
 8009366:	009b      	lsls	r3, r3, #2
 8009368:	220f      	movs	r2, #15
 800936a:	fa02 f303 	lsl.w	r3, r2, r3
 800936e:	43db      	mvns	r3, r3
 8009370:	69ba      	ldr	r2, [r7, #24]
 8009372:	4013      	ands	r3, r2
 8009374:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	4a51      	ldr	r2, [pc, #324]	; (80094c0 <HAL_GPIO_Init+0x310>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d02b      	beq.n	80093d6 <HAL_GPIO_Init+0x226>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	4a50      	ldr	r2, [pc, #320]	; (80094c4 <HAL_GPIO_Init+0x314>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d025      	beq.n	80093d2 <HAL_GPIO_Init+0x222>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	4a4f      	ldr	r2, [pc, #316]	; (80094c8 <HAL_GPIO_Init+0x318>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d01f      	beq.n	80093ce <HAL_GPIO_Init+0x21e>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	4a4e      	ldr	r2, [pc, #312]	; (80094cc <HAL_GPIO_Init+0x31c>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d019      	beq.n	80093ca <HAL_GPIO_Init+0x21a>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	4a4d      	ldr	r2, [pc, #308]	; (80094d0 <HAL_GPIO_Init+0x320>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d013      	beq.n	80093c6 <HAL_GPIO_Init+0x216>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	4a4c      	ldr	r2, [pc, #304]	; (80094d4 <HAL_GPIO_Init+0x324>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d00d      	beq.n	80093c2 <HAL_GPIO_Init+0x212>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	4a4b      	ldr	r2, [pc, #300]	; (80094d8 <HAL_GPIO_Init+0x328>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d007      	beq.n	80093be <HAL_GPIO_Init+0x20e>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	4a4a      	ldr	r2, [pc, #296]	; (80094dc <HAL_GPIO_Init+0x32c>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d101      	bne.n	80093ba <HAL_GPIO_Init+0x20a>
 80093b6:	2307      	movs	r3, #7
 80093b8:	e00e      	b.n	80093d8 <HAL_GPIO_Init+0x228>
 80093ba:	2308      	movs	r3, #8
 80093bc:	e00c      	b.n	80093d8 <HAL_GPIO_Init+0x228>
 80093be:	2306      	movs	r3, #6
 80093c0:	e00a      	b.n	80093d8 <HAL_GPIO_Init+0x228>
 80093c2:	2305      	movs	r3, #5
 80093c4:	e008      	b.n	80093d8 <HAL_GPIO_Init+0x228>
 80093c6:	2304      	movs	r3, #4
 80093c8:	e006      	b.n	80093d8 <HAL_GPIO_Init+0x228>
 80093ca:	2303      	movs	r3, #3
 80093cc:	e004      	b.n	80093d8 <HAL_GPIO_Init+0x228>
 80093ce:	2302      	movs	r3, #2
 80093d0:	e002      	b.n	80093d8 <HAL_GPIO_Init+0x228>
 80093d2:	2301      	movs	r3, #1
 80093d4:	e000      	b.n	80093d8 <HAL_GPIO_Init+0x228>
 80093d6:	2300      	movs	r3, #0
 80093d8:	69fa      	ldr	r2, [r7, #28]
 80093da:	f002 0203 	and.w	r2, r2, #3
 80093de:	0092      	lsls	r2, r2, #2
 80093e0:	4093      	lsls	r3, r2
 80093e2:	69ba      	ldr	r2, [r7, #24]
 80093e4:	4313      	orrs	r3, r2
 80093e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80093e8:	4934      	ldr	r1, [pc, #208]	; (80094bc <HAL_GPIO_Init+0x30c>)
 80093ea:	69fb      	ldr	r3, [r7, #28]
 80093ec:	089b      	lsrs	r3, r3, #2
 80093ee:	3302      	adds	r3, #2
 80093f0:	69ba      	ldr	r2, [r7, #24]
 80093f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80093f6:	4b3a      	ldr	r3, [pc, #232]	; (80094e0 <HAL_GPIO_Init+0x330>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	43db      	mvns	r3, r3
 8009400:	69ba      	ldr	r2, [r7, #24]
 8009402:	4013      	ands	r3, r2
 8009404:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800940e:	2b00      	cmp	r3, #0
 8009410:	d003      	beq.n	800941a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8009412:	69ba      	ldr	r2, [r7, #24]
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	4313      	orrs	r3, r2
 8009418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800941a:	4a31      	ldr	r2, [pc, #196]	; (80094e0 <HAL_GPIO_Init+0x330>)
 800941c:	69bb      	ldr	r3, [r7, #24]
 800941e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009420:	4b2f      	ldr	r3, [pc, #188]	; (80094e0 <HAL_GPIO_Init+0x330>)
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	43db      	mvns	r3, r3
 800942a:	69ba      	ldr	r2, [r7, #24]
 800942c:	4013      	ands	r3, r2
 800942e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009438:	2b00      	cmp	r3, #0
 800943a:	d003      	beq.n	8009444 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800943c:	69ba      	ldr	r2, [r7, #24]
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	4313      	orrs	r3, r2
 8009442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009444:	4a26      	ldr	r2, [pc, #152]	; (80094e0 <HAL_GPIO_Init+0x330>)
 8009446:	69bb      	ldr	r3, [r7, #24]
 8009448:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800944a:	4b25      	ldr	r3, [pc, #148]	; (80094e0 <HAL_GPIO_Init+0x330>)
 800944c:	689b      	ldr	r3, [r3, #8]
 800944e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	43db      	mvns	r3, r3
 8009454:	69ba      	ldr	r2, [r7, #24]
 8009456:	4013      	ands	r3, r2
 8009458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	685b      	ldr	r3, [r3, #4]
 800945e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009462:	2b00      	cmp	r3, #0
 8009464:	d003      	beq.n	800946e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8009466:	69ba      	ldr	r2, [r7, #24]
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	4313      	orrs	r3, r2
 800946c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800946e:	4a1c      	ldr	r2, [pc, #112]	; (80094e0 <HAL_GPIO_Init+0x330>)
 8009470:	69bb      	ldr	r3, [r7, #24]
 8009472:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009474:	4b1a      	ldr	r3, [pc, #104]	; (80094e0 <HAL_GPIO_Init+0x330>)
 8009476:	68db      	ldr	r3, [r3, #12]
 8009478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	43db      	mvns	r3, r3
 800947e:	69ba      	ldr	r2, [r7, #24]
 8009480:	4013      	ands	r3, r2
 8009482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800948c:	2b00      	cmp	r3, #0
 800948e:	d003      	beq.n	8009498 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8009490:	69ba      	ldr	r2, [r7, #24]
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	4313      	orrs	r3, r2
 8009496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009498:	4a11      	ldr	r2, [pc, #68]	; (80094e0 <HAL_GPIO_Init+0x330>)
 800949a:	69bb      	ldr	r3, [r7, #24]
 800949c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800949e:	69fb      	ldr	r3, [r7, #28]
 80094a0:	3301      	adds	r3, #1
 80094a2:	61fb      	str	r3, [r7, #28]
 80094a4:	69fb      	ldr	r3, [r7, #28]
 80094a6:	2b0f      	cmp	r3, #15
 80094a8:	f67f ae90 	bls.w	80091cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80094ac:	bf00      	nop
 80094ae:	3724      	adds	r7, #36	; 0x24
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr
 80094b8:	40023800 	.word	0x40023800
 80094bc:	40013800 	.word	0x40013800
 80094c0:	40020000 	.word	0x40020000
 80094c4:	40020400 	.word	0x40020400
 80094c8:	40020800 	.word	0x40020800
 80094cc:	40020c00 	.word	0x40020c00
 80094d0:	40021000 	.word	0x40021000
 80094d4:	40021400 	.word	0x40021400
 80094d8:	40021800 	.word	0x40021800
 80094dc:	40021c00 	.word	0x40021c00
 80094e0:	40013c00 	.word	0x40013c00

080094e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b083      	sub	sp, #12
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
 80094ec:	460b      	mov	r3, r1
 80094ee:	807b      	strh	r3, [r7, #2]
 80094f0:	4613      	mov	r3, r2
 80094f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80094f4:	787b      	ldrb	r3, [r7, #1]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d003      	beq.n	8009502 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80094fa:	887a      	ldrh	r2, [r7, #2]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009500:	e003      	b.n	800950a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009502:	887b      	ldrh	r3, [r7, #2]
 8009504:	041a      	lsls	r2, r3, #16
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	619a      	str	r2, [r3, #24]
}
 800950a:	bf00      	nop
 800950c:	370c      	adds	r7, #12
 800950e:	46bd      	mov	sp, r7
 8009510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009514:	4770      	bx	lr

08009516 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009516:	b480      	push	{r7}
 8009518:	b083      	sub	sp, #12
 800951a:	af00      	add	r7, sp, #0
 800951c:	6078      	str	r0, [r7, #4]
 800951e:	460b      	mov	r3, r1
 8009520:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	695a      	ldr	r2, [r3, #20]
 8009526:	887b      	ldrh	r3, [r7, #2]
 8009528:	401a      	ands	r2, r3
 800952a:	887b      	ldrh	r3, [r7, #2]
 800952c:	429a      	cmp	r2, r3
 800952e:	d104      	bne.n	800953a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009530:	887b      	ldrh	r3, [r7, #2]
 8009532:	041a      	lsls	r2, r3, #16
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8009538:	e002      	b.n	8009540 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800953a:	887a      	ldrh	r2, [r7, #2]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	619a      	str	r2, [r3, #24]
}
 8009540:	bf00      	nop
 8009542:	370c      	adds	r7, #12
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr

0800954c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800954c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800954e:	b08f      	sub	sp, #60	; 0x3c
 8009550:	af0a      	add	r7, sp, #40	; 0x28
 8009552:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d101      	bne.n	800955e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800955a:	2301      	movs	r3, #1
 800955c:	e054      	b.n	8009608 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800956a:	b2db      	uxtb	r3, r3
 800956c:	2b00      	cmp	r3, #0
 800956e:	d106      	bne.n	800957e <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2200      	movs	r2, #0
 8009574:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f005 fc25 	bl	800edc8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2203      	movs	r2, #3
 8009582:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800958a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800958e:	2b00      	cmp	r3, #0
 8009590:	d102      	bne.n	8009598 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2200      	movs	r2, #0
 8009596:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4618      	mov	r0, r3
 800959e:	f003 fcc3 	bl	800cf28 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	603b      	str	r3, [r7, #0]
 80095a8:	687e      	ldr	r6, [r7, #4]
 80095aa:	466d      	mov	r5, sp
 80095ac:	f106 0410 	add.w	r4, r6, #16
 80095b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80095b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80095b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80095b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80095b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80095bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80095c0:	1d33      	adds	r3, r6, #4
 80095c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80095c4:	6838      	ldr	r0, [r7, #0]
 80095c6:	f003 fc3d 	bl	800ce44 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	2101      	movs	r1, #1
 80095d0:	4618      	mov	r0, r3
 80095d2:	f003 fcba 	bl	800cf4a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	603b      	str	r3, [r7, #0]
 80095dc:	687e      	ldr	r6, [r7, #4]
 80095de:	466d      	mov	r5, sp
 80095e0:	f106 0410 	add.w	r4, r6, #16
 80095e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80095e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80095e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80095ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80095ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80095f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80095f4:	1d33      	adds	r3, r6, #4
 80095f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80095f8:	6838      	ldr	r0, [r7, #0]
 80095fa:	f003 fdcd 	bl	800d198 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2201      	movs	r2, #1
 8009602:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8009606:	2300      	movs	r3, #0
}
 8009608:	4618      	mov	r0, r3
 800960a:	3714      	adds	r7, #20
 800960c:	46bd      	mov	sp, r7
 800960e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009610 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8009610:	b590      	push	{r4, r7, lr}
 8009612:	b089      	sub	sp, #36	; 0x24
 8009614:	af04      	add	r7, sp, #16
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	4608      	mov	r0, r1
 800961a:	4611      	mov	r1, r2
 800961c:	461a      	mov	r2, r3
 800961e:	4603      	mov	r3, r0
 8009620:	70fb      	strb	r3, [r7, #3]
 8009622:	460b      	mov	r3, r1
 8009624:	70bb      	strb	r3, [r7, #2]
 8009626:	4613      	mov	r3, r2
 8009628:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8009630:	2b01      	cmp	r3, #1
 8009632:	d101      	bne.n	8009638 <HAL_HCD_HC_Init+0x28>
 8009634:	2302      	movs	r3, #2
 8009636:	e07f      	b.n	8009738 <HAL_HCD_HC_Init+0x128>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2201      	movs	r2, #1
 800963c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8009640:	78fa      	ldrb	r2, [r7, #3]
 8009642:	6879      	ldr	r1, [r7, #4]
 8009644:	4613      	mov	r3, r2
 8009646:	009b      	lsls	r3, r3, #2
 8009648:	4413      	add	r3, r2
 800964a:	00db      	lsls	r3, r3, #3
 800964c:	440b      	add	r3, r1
 800964e:	333d      	adds	r3, #61	; 0x3d
 8009650:	2200      	movs	r2, #0
 8009652:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8009654:	78fa      	ldrb	r2, [r7, #3]
 8009656:	6879      	ldr	r1, [r7, #4]
 8009658:	4613      	mov	r3, r2
 800965a:	009b      	lsls	r3, r3, #2
 800965c:	4413      	add	r3, r2
 800965e:	00db      	lsls	r3, r3, #3
 8009660:	440b      	add	r3, r1
 8009662:	3338      	adds	r3, #56	; 0x38
 8009664:	787a      	ldrb	r2, [r7, #1]
 8009666:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8009668:	78fa      	ldrb	r2, [r7, #3]
 800966a:	6879      	ldr	r1, [r7, #4]
 800966c:	4613      	mov	r3, r2
 800966e:	009b      	lsls	r3, r3, #2
 8009670:	4413      	add	r3, r2
 8009672:	00db      	lsls	r3, r3, #3
 8009674:	440b      	add	r3, r1
 8009676:	3340      	adds	r3, #64	; 0x40
 8009678:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800967a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800967c:	78fa      	ldrb	r2, [r7, #3]
 800967e:	6879      	ldr	r1, [r7, #4]
 8009680:	4613      	mov	r3, r2
 8009682:	009b      	lsls	r3, r3, #2
 8009684:	4413      	add	r3, r2
 8009686:	00db      	lsls	r3, r3, #3
 8009688:	440b      	add	r3, r1
 800968a:	3339      	adds	r3, #57	; 0x39
 800968c:	78fa      	ldrb	r2, [r7, #3]
 800968e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8009690:	78fa      	ldrb	r2, [r7, #3]
 8009692:	6879      	ldr	r1, [r7, #4]
 8009694:	4613      	mov	r3, r2
 8009696:	009b      	lsls	r3, r3, #2
 8009698:	4413      	add	r3, r2
 800969a:	00db      	lsls	r3, r3, #3
 800969c:	440b      	add	r3, r1
 800969e:	333f      	adds	r3, #63	; 0x3f
 80096a0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80096a4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80096a6:	78fa      	ldrb	r2, [r7, #3]
 80096a8:	78bb      	ldrb	r3, [r7, #2]
 80096aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096ae:	b2d8      	uxtb	r0, r3
 80096b0:	6879      	ldr	r1, [r7, #4]
 80096b2:	4613      	mov	r3, r2
 80096b4:	009b      	lsls	r3, r3, #2
 80096b6:	4413      	add	r3, r2
 80096b8:	00db      	lsls	r3, r3, #3
 80096ba:	440b      	add	r3, r1
 80096bc:	333a      	adds	r3, #58	; 0x3a
 80096be:	4602      	mov	r2, r0
 80096c0:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80096c2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	da0a      	bge.n	80096e0 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80096ca:	78fa      	ldrb	r2, [r7, #3]
 80096cc:	6879      	ldr	r1, [r7, #4]
 80096ce:	4613      	mov	r3, r2
 80096d0:	009b      	lsls	r3, r3, #2
 80096d2:	4413      	add	r3, r2
 80096d4:	00db      	lsls	r3, r3, #3
 80096d6:	440b      	add	r3, r1
 80096d8:	333b      	adds	r3, #59	; 0x3b
 80096da:	2201      	movs	r2, #1
 80096dc:	701a      	strb	r2, [r3, #0]
 80096de:	e009      	b.n	80096f4 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80096e0:	78fa      	ldrb	r2, [r7, #3]
 80096e2:	6879      	ldr	r1, [r7, #4]
 80096e4:	4613      	mov	r3, r2
 80096e6:	009b      	lsls	r3, r3, #2
 80096e8:	4413      	add	r3, r2
 80096ea:	00db      	lsls	r3, r3, #3
 80096ec:	440b      	add	r3, r1
 80096ee:	333b      	adds	r3, #59	; 0x3b
 80096f0:	2200      	movs	r2, #0
 80096f2:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80096f4:	78fa      	ldrb	r2, [r7, #3]
 80096f6:	6879      	ldr	r1, [r7, #4]
 80096f8:	4613      	mov	r3, r2
 80096fa:	009b      	lsls	r3, r3, #2
 80096fc:	4413      	add	r3, r2
 80096fe:	00db      	lsls	r3, r3, #3
 8009700:	440b      	add	r3, r1
 8009702:	333c      	adds	r3, #60	; 0x3c
 8009704:	f897 2020 	ldrb.w	r2, [r7, #32]
 8009708:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6818      	ldr	r0, [r3, #0]
 800970e:	787c      	ldrb	r4, [r7, #1]
 8009710:	78ba      	ldrb	r2, [r7, #2]
 8009712:	78f9      	ldrb	r1, [r7, #3]
 8009714:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009716:	9302      	str	r3, [sp, #8]
 8009718:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800971c:	9301      	str	r3, [sp, #4]
 800971e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009722:	9300      	str	r3, [sp, #0]
 8009724:	4623      	mov	r3, r4
 8009726:	f003 fe77 	bl	800d418 <USB_HC_Init>
 800972a:	4603      	mov	r3, r0
 800972c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2200      	movs	r2, #0
 8009732:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8009736:	7bfb      	ldrb	r3, [r7, #15]
}
 8009738:	4618      	mov	r0, r3
 800973a:	3714      	adds	r7, #20
 800973c:	46bd      	mov	sp, r7
 800973e:	bd90      	pop	{r4, r7, pc}

08009740 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	460b      	mov	r3, r1
 800974a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800974c:	2300      	movs	r3, #0
 800974e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8009756:	2b01      	cmp	r3, #1
 8009758:	d101      	bne.n	800975e <HAL_HCD_HC_Halt+0x1e>
 800975a:	2302      	movs	r3, #2
 800975c:	e00f      	b.n	800977e <HAL_HCD_HC_Halt+0x3e>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2201      	movs	r2, #1
 8009762:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	78fa      	ldrb	r2, [r7, #3]
 800976c:	4611      	mov	r1, r2
 800976e:	4618      	mov	r0, r3
 8009770:	f004 f8b3 	bl	800d8da <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800977c:	7bfb      	ldrb	r3, [r7, #15]
}
 800977e:	4618      	mov	r0, r3
 8009780:	3710      	adds	r7, #16
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}
	...

08009788 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	4608      	mov	r0, r1
 8009792:	4611      	mov	r1, r2
 8009794:	461a      	mov	r2, r3
 8009796:	4603      	mov	r3, r0
 8009798:	70fb      	strb	r3, [r7, #3]
 800979a:	460b      	mov	r3, r1
 800979c:	70bb      	strb	r3, [r7, #2]
 800979e:	4613      	mov	r3, r2
 80097a0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80097a2:	78fa      	ldrb	r2, [r7, #3]
 80097a4:	6879      	ldr	r1, [r7, #4]
 80097a6:	4613      	mov	r3, r2
 80097a8:	009b      	lsls	r3, r3, #2
 80097aa:	4413      	add	r3, r2
 80097ac:	00db      	lsls	r3, r3, #3
 80097ae:	440b      	add	r3, r1
 80097b0:	333b      	adds	r3, #59	; 0x3b
 80097b2:	78ba      	ldrb	r2, [r7, #2]
 80097b4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80097b6:	78fa      	ldrb	r2, [r7, #3]
 80097b8:	6879      	ldr	r1, [r7, #4]
 80097ba:	4613      	mov	r3, r2
 80097bc:	009b      	lsls	r3, r3, #2
 80097be:	4413      	add	r3, r2
 80097c0:	00db      	lsls	r3, r3, #3
 80097c2:	440b      	add	r3, r1
 80097c4:	333f      	adds	r3, #63	; 0x3f
 80097c6:	787a      	ldrb	r2, [r7, #1]
 80097c8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80097ca:	7c3b      	ldrb	r3, [r7, #16]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d114      	bne.n	80097fa <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80097d0:	78fa      	ldrb	r2, [r7, #3]
 80097d2:	6879      	ldr	r1, [r7, #4]
 80097d4:	4613      	mov	r3, r2
 80097d6:	009b      	lsls	r3, r3, #2
 80097d8:	4413      	add	r3, r2
 80097da:	00db      	lsls	r3, r3, #3
 80097dc:	440b      	add	r3, r1
 80097de:	3342      	adds	r3, #66	; 0x42
 80097e0:	2203      	movs	r2, #3
 80097e2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80097e4:	78fa      	ldrb	r2, [r7, #3]
 80097e6:	6879      	ldr	r1, [r7, #4]
 80097e8:	4613      	mov	r3, r2
 80097ea:	009b      	lsls	r3, r3, #2
 80097ec:	4413      	add	r3, r2
 80097ee:	00db      	lsls	r3, r3, #3
 80097f0:	440b      	add	r3, r1
 80097f2:	333d      	adds	r3, #61	; 0x3d
 80097f4:	7f3a      	ldrb	r2, [r7, #28]
 80097f6:	701a      	strb	r2, [r3, #0]
 80097f8:	e009      	b.n	800980e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80097fa:	78fa      	ldrb	r2, [r7, #3]
 80097fc:	6879      	ldr	r1, [r7, #4]
 80097fe:	4613      	mov	r3, r2
 8009800:	009b      	lsls	r3, r3, #2
 8009802:	4413      	add	r3, r2
 8009804:	00db      	lsls	r3, r3, #3
 8009806:	440b      	add	r3, r1
 8009808:	3342      	adds	r3, #66	; 0x42
 800980a:	2202      	movs	r2, #2
 800980c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800980e:	787b      	ldrb	r3, [r7, #1]
 8009810:	2b03      	cmp	r3, #3
 8009812:	f200 80d6 	bhi.w	80099c2 <HAL_HCD_HC_SubmitRequest+0x23a>
 8009816:	a201      	add	r2, pc, #4	; (adr r2, 800981c <HAL_HCD_HC_SubmitRequest+0x94>)
 8009818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800981c:	0800982d 	.word	0x0800982d
 8009820:	080099ad 	.word	0x080099ad
 8009824:	08009899 	.word	0x08009899
 8009828:	08009923 	.word	0x08009923
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800982c:	7c3b      	ldrb	r3, [r7, #16]
 800982e:	2b01      	cmp	r3, #1
 8009830:	f040 80c9 	bne.w	80099c6 <HAL_HCD_HC_SubmitRequest+0x23e>
 8009834:	78bb      	ldrb	r3, [r7, #2]
 8009836:	2b00      	cmp	r3, #0
 8009838:	f040 80c5 	bne.w	80099c6 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 800983c:	8b3b      	ldrh	r3, [r7, #24]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d109      	bne.n	8009856 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8009842:	78fa      	ldrb	r2, [r7, #3]
 8009844:	6879      	ldr	r1, [r7, #4]
 8009846:	4613      	mov	r3, r2
 8009848:	009b      	lsls	r3, r3, #2
 800984a:	4413      	add	r3, r2
 800984c:	00db      	lsls	r3, r3, #3
 800984e:	440b      	add	r3, r1
 8009850:	3351      	adds	r3, #81	; 0x51
 8009852:	2201      	movs	r2, #1
 8009854:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8009856:	78fa      	ldrb	r2, [r7, #3]
 8009858:	6879      	ldr	r1, [r7, #4]
 800985a:	4613      	mov	r3, r2
 800985c:	009b      	lsls	r3, r3, #2
 800985e:	4413      	add	r3, r2
 8009860:	00db      	lsls	r3, r3, #3
 8009862:	440b      	add	r3, r1
 8009864:	3351      	adds	r3, #81	; 0x51
 8009866:	781b      	ldrb	r3, [r3, #0]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d10a      	bne.n	8009882 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800986c:	78fa      	ldrb	r2, [r7, #3]
 800986e:	6879      	ldr	r1, [r7, #4]
 8009870:	4613      	mov	r3, r2
 8009872:	009b      	lsls	r3, r3, #2
 8009874:	4413      	add	r3, r2
 8009876:	00db      	lsls	r3, r3, #3
 8009878:	440b      	add	r3, r1
 800987a:	3342      	adds	r3, #66	; 0x42
 800987c:	2200      	movs	r2, #0
 800987e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8009880:	e0a1      	b.n	80099c6 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009882:	78fa      	ldrb	r2, [r7, #3]
 8009884:	6879      	ldr	r1, [r7, #4]
 8009886:	4613      	mov	r3, r2
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	4413      	add	r3, r2
 800988c:	00db      	lsls	r3, r3, #3
 800988e:	440b      	add	r3, r1
 8009890:	3342      	adds	r3, #66	; 0x42
 8009892:	2202      	movs	r2, #2
 8009894:	701a      	strb	r2, [r3, #0]
      break;
 8009896:	e096      	b.n	80099c6 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8009898:	78bb      	ldrb	r3, [r7, #2]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d120      	bne.n	80098e0 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800989e:	78fa      	ldrb	r2, [r7, #3]
 80098a0:	6879      	ldr	r1, [r7, #4]
 80098a2:	4613      	mov	r3, r2
 80098a4:	009b      	lsls	r3, r3, #2
 80098a6:	4413      	add	r3, r2
 80098a8:	00db      	lsls	r3, r3, #3
 80098aa:	440b      	add	r3, r1
 80098ac:	3351      	adds	r3, #81	; 0x51
 80098ae:	781b      	ldrb	r3, [r3, #0]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d10a      	bne.n	80098ca <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80098b4:	78fa      	ldrb	r2, [r7, #3]
 80098b6:	6879      	ldr	r1, [r7, #4]
 80098b8:	4613      	mov	r3, r2
 80098ba:	009b      	lsls	r3, r3, #2
 80098bc:	4413      	add	r3, r2
 80098be:	00db      	lsls	r3, r3, #3
 80098c0:	440b      	add	r3, r1
 80098c2:	3342      	adds	r3, #66	; 0x42
 80098c4:	2200      	movs	r2, #0
 80098c6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80098c8:	e07e      	b.n	80099c8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80098ca:	78fa      	ldrb	r2, [r7, #3]
 80098cc:	6879      	ldr	r1, [r7, #4]
 80098ce:	4613      	mov	r3, r2
 80098d0:	009b      	lsls	r3, r3, #2
 80098d2:	4413      	add	r3, r2
 80098d4:	00db      	lsls	r3, r3, #3
 80098d6:	440b      	add	r3, r1
 80098d8:	3342      	adds	r3, #66	; 0x42
 80098da:	2202      	movs	r2, #2
 80098dc:	701a      	strb	r2, [r3, #0]
      break;
 80098de:	e073      	b.n	80099c8 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80098e0:	78fa      	ldrb	r2, [r7, #3]
 80098e2:	6879      	ldr	r1, [r7, #4]
 80098e4:	4613      	mov	r3, r2
 80098e6:	009b      	lsls	r3, r3, #2
 80098e8:	4413      	add	r3, r2
 80098ea:	00db      	lsls	r3, r3, #3
 80098ec:	440b      	add	r3, r1
 80098ee:	3350      	adds	r3, #80	; 0x50
 80098f0:	781b      	ldrb	r3, [r3, #0]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d10a      	bne.n	800990c <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80098f6:	78fa      	ldrb	r2, [r7, #3]
 80098f8:	6879      	ldr	r1, [r7, #4]
 80098fa:	4613      	mov	r3, r2
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	4413      	add	r3, r2
 8009900:	00db      	lsls	r3, r3, #3
 8009902:	440b      	add	r3, r1
 8009904:	3342      	adds	r3, #66	; 0x42
 8009906:	2200      	movs	r2, #0
 8009908:	701a      	strb	r2, [r3, #0]
      break;
 800990a:	e05d      	b.n	80099c8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800990c:	78fa      	ldrb	r2, [r7, #3]
 800990e:	6879      	ldr	r1, [r7, #4]
 8009910:	4613      	mov	r3, r2
 8009912:	009b      	lsls	r3, r3, #2
 8009914:	4413      	add	r3, r2
 8009916:	00db      	lsls	r3, r3, #3
 8009918:	440b      	add	r3, r1
 800991a:	3342      	adds	r3, #66	; 0x42
 800991c:	2202      	movs	r2, #2
 800991e:	701a      	strb	r2, [r3, #0]
      break;
 8009920:	e052      	b.n	80099c8 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8009922:	78bb      	ldrb	r3, [r7, #2]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d120      	bne.n	800996a <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8009928:	78fa      	ldrb	r2, [r7, #3]
 800992a:	6879      	ldr	r1, [r7, #4]
 800992c:	4613      	mov	r3, r2
 800992e:	009b      	lsls	r3, r3, #2
 8009930:	4413      	add	r3, r2
 8009932:	00db      	lsls	r3, r3, #3
 8009934:	440b      	add	r3, r1
 8009936:	3351      	adds	r3, #81	; 0x51
 8009938:	781b      	ldrb	r3, [r3, #0]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d10a      	bne.n	8009954 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800993e:	78fa      	ldrb	r2, [r7, #3]
 8009940:	6879      	ldr	r1, [r7, #4]
 8009942:	4613      	mov	r3, r2
 8009944:	009b      	lsls	r3, r3, #2
 8009946:	4413      	add	r3, r2
 8009948:	00db      	lsls	r3, r3, #3
 800994a:	440b      	add	r3, r1
 800994c:	3342      	adds	r3, #66	; 0x42
 800994e:	2200      	movs	r2, #0
 8009950:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8009952:	e039      	b.n	80099c8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009954:	78fa      	ldrb	r2, [r7, #3]
 8009956:	6879      	ldr	r1, [r7, #4]
 8009958:	4613      	mov	r3, r2
 800995a:	009b      	lsls	r3, r3, #2
 800995c:	4413      	add	r3, r2
 800995e:	00db      	lsls	r3, r3, #3
 8009960:	440b      	add	r3, r1
 8009962:	3342      	adds	r3, #66	; 0x42
 8009964:	2202      	movs	r2, #2
 8009966:	701a      	strb	r2, [r3, #0]
      break;
 8009968:	e02e      	b.n	80099c8 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800996a:	78fa      	ldrb	r2, [r7, #3]
 800996c:	6879      	ldr	r1, [r7, #4]
 800996e:	4613      	mov	r3, r2
 8009970:	009b      	lsls	r3, r3, #2
 8009972:	4413      	add	r3, r2
 8009974:	00db      	lsls	r3, r3, #3
 8009976:	440b      	add	r3, r1
 8009978:	3350      	adds	r3, #80	; 0x50
 800997a:	781b      	ldrb	r3, [r3, #0]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d10a      	bne.n	8009996 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009980:	78fa      	ldrb	r2, [r7, #3]
 8009982:	6879      	ldr	r1, [r7, #4]
 8009984:	4613      	mov	r3, r2
 8009986:	009b      	lsls	r3, r3, #2
 8009988:	4413      	add	r3, r2
 800998a:	00db      	lsls	r3, r3, #3
 800998c:	440b      	add	r3, r1
 800998e:	3342      	adds	r3, #66	; 0x42
 8009990:	2200      	movs	r2, #0
 8009992:	701a      	strb	r2, [r3, #0]
      break;
 8009994:	e018      	b.n	80099c8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009996:	78fa      	ldrb	r2, [r7, #3]
 8009998:	6879      	ldr	r1, [r7, #4]
 800999a:	4613      	mov	r3, r2
 800999c:	009b      	lsls	r3, r3, #2
 800999e:	4413      	add	r3, r2
 80099a0:	00db      	lsls	r3, r3, #3
 80099a2:	440b      	add	r3, r1
 80099a4:	3342      	adds	r3, #66	; 0x42
 80099a6:	2202      	movs	r2, #2
 80099a8:	701a      	strb	r2, [r3, #0]
      break;
 80099aa:	e00d      	b.n	80099c8 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80099ac:	78fa      	ldrb	r2, [r7, #3]
 80099ae:	6879      	ldr	r1, [r7, #4]
 80099b0:	4613      	mov	r3, r2
 80099b2:	009b      	lsls	r3, r3, #2
 80099b4:	4413      	add	r3, r2
 80099b6:	00db      	lsls	r3, r3, #3
 80099b8:	440b      	add	r3, r1
 80099ba:	3342      	adds	r3, #66	; 0x42
 80099bc:	2200      	movs	r2, #0
 80099be:	701a      	strb	r2, [r3, #0]
      break;
 80099c0:	e002      	b.n	80099c8 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 80099c2:	bf00      	nop
 80099c4:	e000      	b.n	80099c8 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 80099c6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80099c8:	78fa      	ldrb	r2, [r7, #3]
 80099ca:	6879      	ldr	r1, [r7, #4]
 80099cc:	4613      	mov	r3, r2
 80099ce:	009b      	lsls	r3, r3, #2
 80099d0:	4413      	add	r3, r2
 80099d2:	00db      	lsls	r3, r3, #3
 80099d4:	440b      	add	r3, r1
 80099d6:	3344      	adds	r3, #68	; 0x44
 80099d8:	697a      	ldr	r2, [r7, #20]
 80099da:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80099dc:	78fa      	ldrb	r2, [r7, #3]
 80099de:	8b39      	ldrh	r1, [r7, #24]
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	4613      	mov	r3, r2
 80099e4:	009b      	lsls	r3, r3, #2
 80099e6:	4413      	add	r3, r2
 80099e8:	00db      	lsls	r3, r3, #3
 80099ea:	4403      	add	r3, r0
 80099ec:	3348      	adds	r3, #72	; 0x48
 80099ee:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80099f0:	78fa      	ldrb	r2, [r7, #3]
 80099f2:	6879      	ldr	r1, [r7, #4]
 80099f4:	4613      	mov	r3, r2
 80099f6:	009b      	lsls	r3, r3, #2
 80099f8:	4413      	add	r3, r2
 80099fa:	00db      	lsls	r3, r3, #3
 80099fc:	440b      	add	r3, r1
 80099fe:	335c      	adds	r3, #92	; 0x5c
 8009a00:	2200      	movs	r2, #0
 8009a02:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8009a04:	78fa      	ldrb	r2, [r7, #3]
 8009a06:	6879      	ldr	r1, [r7, #4]
 8009a08:	4613      	mov	r3, r2
 8009a0a:	009b      	lsls	r3, r3, #2
 8009a0c:	4413      	add	r3, r2
 8009a0e:	00db      	lsls	r3, r3, #3
 8009a10:	440b      	add	r3, r1
 8009a12:	334c      	adds	r3, #76	; 0x4c
 8009a14:	2200      	movs	r2, #0
 8009a16:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8009a18:	78fa      	ldrb	r2, [r7, #3]
 8009a1a:	6879      	ldr	r1, [r7, #4]
 8009a1c:	4613      	mov	r3, r2
 8009a1e:	009b      	lsls	r3, r3, #2
 8009a20:	4413      	add	r3, r2
 8009a22:	00db      	lsls	r3, r3, #3
 8009a24:	440b      	add	r3, r1
 8009a26:	3339      	adds	r3, #57	; 0x39
 8009a28:	78fa      	ldrb	r2, [r7, #3]
 8009a2a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8009a2c:	78fa      	ldrb	r2, [r7, #3]
 8009a2e:	6879      	ldr	r1, [r7, #4]
 8009a30:	4613      	mov	r3, r2
 8009a32:	009b      	lsls	r3, r3, #2
 8009a34:	4413      	add	r3, r2
 8009a36:	00db      	lsls	r3, r3, #3
 8009a38:	440b      	add	r3, r1
 8009a3a:	335d      	adds	r3, #93	; 0x5d
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6818      	ldr	r0, [r3, #0]
 8009a44:	78fa      	ldrb	r2, [r7, #3]
 8009a46:	4613      	mov	r3, r2
 8009a48:	009b      	lsls	r3, r3, #2
 8009a4a:	4413      	add	r3, r2
 8009a4c:	00db      	lsls	r3, r3, #3
 8009a4e:	3338      	adds	r3, #56	; 0x38
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	18d1      	adds	r1, r2, r3
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	691b      	ldr	r3, [r3, #16]
 8009a58:	b2db      	uxtb	r3, r3
 8009a5a:	461a      	mov	r2, r3
 8009a5c:	f003 fde6 	bl	800d62c <USB_HC_StartXfer>
 8009a60:	4603      	mov	r3, r0
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3708      	adds	r7, #8
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
 8009a6a:	bf00      	nop

08009a6c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b086      	sub	sp, #24
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4618      	mov	r0, r3
 8009a84:	f003 fb45 	bl	800d112 <USB_GetMode>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	2b01      	cmp	r3, #1
 8009a8c:	f040 80ef 	bne.w	8009c6e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	4618      	mov	r0, r3
 8009a96:	f003 fb29 	bl	800d0ec <USB_ReadInterrupts>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	f000 80e5 	beq.w	8009c6c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f003 fb20 	bl	800d0ec <USB_ReadInterrupts>
 8009aac:	4603      	mov	r3, r0
 8009aae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009ab2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009ab6:	d104      	bne.n	8009ac2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009ac0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f003 fb10 	bl	800d0ec <USB_ReadInterrupts>
 8009acc:	4603      	mov	r3, r0
 8009ace:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009ad2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ad6:	d104      	bne.n	8009ae2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009ae0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f003 fb00 	bl	800d0ec <USB_ReadInterrupts>
 8009aec:	4603      	mov	r3, r0
 8009aee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009af2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009af6:	d104      	bne.n	8009b02 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8009b00:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	4618      	mov	r0, r3
 8009b08:	f003 faf0 	bl	800d0ec <USB_ReadInterrupts>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	f003 0302 	and.w	r3, r3, #2
 8009b12:	2b02      	cmp	r3, #2
 8009b14:	d103      	bne.n	8009b1e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	2202      	movs	r2, #2
 8009b1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4618      	mov	r0, r3
 8009b24:	f003 fae2 	bl	800d0ec <USB_ReadInterrupts>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b32:	d115      	bne.n	8009b60 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8009b3c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f003 0301 	and.w	r3, r3, #1
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d108      	bne.n	8009b60 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f005 f9b8 	bl	800eec4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	2101      	movs	r1, #1
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f003 fbd8 	bl	800d310 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4618      	mov	r0, r3
 8009b66:	f003 fac1 	bl	800d0ec <USB_ReadInterrupts>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009b70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009b74:	d102      	bne.n	8009b7c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f001 f94a 	bl	800ae10 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4618      	mov	r0, r3
 8009b82:	f003 fab3 	bl	800d0ec <USB_ReadInterrupts>
 8009b86:	4603      	mov	r3, r0
 8009b88:	f003 0308 	and.w	r3, r3, #8
 8009b8c:	2b08      	cmp	r3, #8
 8009b8e:	d106      	bne.n	8009b9e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f005 f97b 	bl	800ee8c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	2208      	movs	r2, #8
 8009b9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f003 faa2 	bl	800d0ec <USB_ReadInterrupts>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009bae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009bb2:	d138      	bne.n	8009c26 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f003 fe7d 	bl	800d8b8 <USB_HC_ReadInterrupt>
 8009bbe:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	617b      	str	r3, [r7, #20]
 8009bc4:	e025      	b.n	8009c12 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	f003 030f 	and.w	r3, r3, #15
 8009bcc:	68ba      	ldr	r2, [r7, #8]
 8009bce:	fa22 f303 	lsr.w	r3, r2, r3
 8009bd2:	f003 0301 	and.w	r3, r3, #1
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d018      	beq.n	8009c0c <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	015a      	lsls	r2, r3, #5
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	4413      	add	r3, r2
 8009be2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009bec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bf0:	d106      	bne.n	8009c00 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	b2db      	uxtb	r3, r3
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f000 f8b3 	bl	8009d64 <HCD_HC_IN_IRQHandler>
 8009bfe:	e005      	b.n	8009c0c <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	b2db      	uxtb	r3, r3
 8009c04:	4619      	mov	r1, r3
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f000 fce1 	bl	800a5ce <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	3301      	adds	r3, #1
 8009c10:	617b      	str	r3, [r7, #20]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	689b      	ldr	r3, [r3, #8]
 8009c16:	697a      	ldr	r2, [r7, #20]
 8009c18:	429a      	cmp	r2, r3
 8009c1a:	d3d4      	bcc.n	8009bc6 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009c24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f003 fa5e 	bl	800d0ec <USB_ReadInterrupts>
 8009c30:	4603      	mov	r3, r0
 8009c32:	f003 0310 	and.w	r3, r3, #16
 8009c36:	2b10      	cmp	r3, #16
 8009c38:	d101      	bne.n	8009c3e <HAL_HCD_IRQHandler+0x1d2>
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	e000      	b.n	8009c40 <HAL_HCD_IRQHandler+0x1d4>
 8009c3e:	2300      	movs	r3, #0
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d014      	beq.n	8009c6e <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	699a      	ldr	r2, [r3, #24]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f022 0210 	bic.w	r2, r2, #16
 8009c52:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f001 f82f 	bl	800acb8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	699a      	ldr	r2, [r3, #24]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f042 0210 	orr.w	r2, r2, #16
 8009c68:	619a      	str	r2, [r3, #24]
 8009c6a:	e000      	b.n	8009c6e <HAL_HCD_IRQHandler+0x202>
      return;
 8009c6c:	bf00      	nop
    }
  }
}
 8009c6e:	3718      	adds	r7, #24
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}

08009c74 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b082      	sub	sp, #8
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8009c82:	2b01      	cmp	r3, #1
 8009c84:	d101      	bne.n	8009c8a <HAL_HCD_Start+0x16>
 8009c86:	2302      	movs	r3, #2
 8009c88:	e013      	b.n	8009cb2 <HAL_HCD_Start+0x3e>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	4618      	mov	r0, r3
 8009c98:	f003 f935 	bl	800cf06 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	2101      	movs	r1, #1
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f003 fb6e 	bl	800d384 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2200      	movs	r2, #0
 8009cac:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8009cb0:	2300      	movs	r3, #0
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3708      	adds	r7, #8
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}

08009cba <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8009cba:	b580      	push	{r7, lr}
 8009cbc:	b082      	sub	sp, #8
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8009cc8:	2b01      	cmp	r3, #1
 8009cca:	d101      	bne.n	8009cd0 <HAL_HCD_Stop+0x16>
 8009ccc:	2302      	movs	r3, #2
 8009cce:	e00d      	b.n	8009cec <HAL_HCD_Stop+0x32>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f003 ff37 	bl	800db50 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8009cea:	2300      	movs	r3, #0
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3708      	adds	r7, #8
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}

08009cf4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b083      	sub	sp, #12
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	460b      	mov	r3, r1
 8009cfe:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8009d00:	78fa      	ldrb	r2, [r7, #3]
 8009d02:	6879      	ldr	r1, [r7, #4]
 8009d04:	4613      	mov	r3, r2
 8009d06:	009b      	lsls	r3, r3, #2
 8009d08:	4413      	add	r3, r2
 8009d0a:	00db      	lsls	r3, r3, #3
 8009d0c:	440b      	add	r3, r1
 8009d0e:	335c      	adds	r3, #92	; 0x5c
 8009d10:	781b      	ldrb	r3, [r3, #0]
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	370c      	adds	r7, #12
 8009d16:	46bd      	mov	sp, r7
 8009d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1c:	4770      	bx	lr

08009d1e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009d1e:	b480      	push	{r7}
 8009d20:	b083      	sub	sp, #12
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	6078      	str	r0, [r7, #4]
 8009d26:	460b      	mov	r3, r1
 8009d28:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8009d2a:	78fa      	ldrb	r2, [r7, #3]
 8009d2c:	6879      	ldr	r1, [r7, #4]
 8009d2e:	4613      	mov	r3, r2
 8009d30:	009b      	lsls	r3, r3, #2
 8009d32:	4413      	add	r3, r2
 8009d34:	00db      	lsls	r3, r3, #3
 8009d36:	440b      	add	r3, r1
 8009d38:	334c      	adds	r3, #76	; 0x4c
 8009d3a:	681b      	ldr	r3, [r3, #0]
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	370c      	adds	r7, #12
 8009d40:	46bd      	mov	sp, r7
 8009d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d46:	4770      	bx	lr

08009d48 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b082      	sub	sp, #8
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4618      	mov	r0, r3
 8009d56:	f003 fb4e 	bl	800d3f6 <USB_GetCurrentFrame>
 8009d5a:	4603      	mov	r3, r0
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3708      	adds	r7, #8
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b086      	sub	sp, #24
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	460b      	mov	r3, r1
 8009d6e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8009d7a:	78fb      	ldrb	r3, [r7, #3]
 8009d7c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	015a      	lsls	r2, r3, #5
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	4413      	add	r3, r2
 8009d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d8a:	689b      	ldr	r3, [r3, #8]
 8009d8c:	f003 0304 	and.w	r3, r3, #4
 8009d90:	2b04      	cmp	r3, #4
 8009d92:	d119      	bne.n	8009dc8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	015a      	lsls	r2, r3, #5
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	4413      	add	r3, r2
 8009d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009da0:	461a      	mov	r2, r3
 8009da2:	2304      	movs	r3, #4
 8009da4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	015a      	lsls	r2, r3, #5
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	4413      	add	r3, r2
 8009dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009db2:	68db      	ldr	r3, [r3, #12]
 8009db4:	68fa      	ldr	r2, [r7, #12]
 8009db6:	0151      	lsls	r1, r2, #5
 8009db8:	693a      	ldr	r2, [r7, #16]
 8009dba:	440a      	add	r2, r1
 8009dbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009dc0:	f043 0302 	orr.w	r3, r3, #2
 8009dc4:	60d3      	str	r3, [r2, #12]
 8009dc6:	e0ce      	b.n	8009f66 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	015a      	lsls	r2, r3, #5
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	4413      	add	r3, r2
 8009dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dd4:	689b      	ldr	r3, [r3, #8]
 8009dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009dde:	d12c      	bne.n	8009e3a <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	015a      	lsls	r2, r3, #5
 8009de4:	693b      	ldr	r3, [r7, #16]
 8009de6:	4413      	add	r3, r2
 8009de8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dec:	461a      	mov	r2, r3
 8009dee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009df2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8009df4:	6879      	ldr	r1, [r7, #4]
 8009df6:	68fa      	ldr	r2, [r7, #12]
 8009df8:	4613      	mov	r3, r2
 8009dfa:	009b      	lsls	r3, r3, #2
 8009dfc:	4413      	add	r3, r2
 8009dfe:	00db      	lsls	r3, r3, #3
 8009e00:	440b      	add	r3, r1
 8009e02:	335d      	adds	r3, #93	; 0x5d
 8009e04:	2207      	movs	r2, #7
 8009e06:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	015a      	lsls	r2, r3, #5
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	4413      	add	r3, r2
 8009e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e14:	68db      	ldr	r3, [r3, #12]
 8009e16:	68fa      	ldr	r2, [r7, #12]
 8009e18:	0151      	lsls	r1, r2, #5
 8009e1a:	693a      	ldr	r2, [r7, #16]
 8009e1c:	440a      	add	r2, r1
 8009e1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e22:	f043 0302 	orr.w	r3, r3, #2
 8009e26:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	68fa      	ldr	r2, [r7, #12]
 8009e2e:	b2d2      	uxtb	r2, r2
 8009e30:	4611      	mov	r1, r2
 8009e32:	4618      	mov	r0, r3
 8009e34:	f003 fd51 	bl	800d8da <USB_HC_Halt>
 8009e38:	e095      	b.n	8009f66 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	015a      	lsls	r2, r3, #5
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	4413      	add	r3, r2
 8009e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e46:	689b      	ldr	r3, [r3, #8]
 8009e48:	f003 0320 	and.w	r3, r3, #32
 8009e4c:	2b20      	cmp	r3, #32
 8009e4e:	d109      	bne.n	8009e64 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	015a      	lsls	r2, r3, #5
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	4413      	add	r3, r2
 8009e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e5c:	461a      	mov	r2, r3
 8009e5e:	2320      	movs	r3, #32
 8009e60:	6093      	str	r3, [r2, #8]
 8009e62:	e080      	b.n	8009f66 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	015a      	lsls	r2, r3, #5
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	4413      	add	r3, r2
 8009e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e70:	689b      	ldr	r3, [r3, #8]
 8009e72:	f003 0308 	and.w	r3, r3, #8
 8009e76:	2b08      	cmp	r3, #8
 8009e78:	d134      	bne.n	8009ee4 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	015a      	lsls	r2, r3, #5
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	4413      	add	r3, r2
 8009e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e86:	68db      	ldr	r3, [r3, #12]
 8009e88:	68fa      	ldr	r2, [r7, #12]
 8009e8a:	0151      	lsls	r1, r2, #5
 8009e8c:	693a      	ldr	r2, [r7, #16]
 8009e8e:	440a      	add	r2, r1
 8009e90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e94:	f043 0302 	orr.w	r3, r3, #2
 8009e98:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8009e9a:	6879      	ldr	r1, [r7, #4]
 8009e9c:	68fa      	ldr	r2, [r7, #12]
 8009e9e:	4613      	mov	r3, r2
 8009ea0:	009b      	lsls	r3, r3, #2
 8009ea2:	4413      	add	r3, r2
 8009ea4:	00db      	lsls	r3, r3, #3
 8009ea6:	440b      	add	r3, r1
 8009ea8:	335d      	adds	r3, #93	; 0x5d
 8009eaa:	2205      	movs	r2, #5
 8009eac:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	015a      	lsls	r2, r3, #5
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	4413      	add	r3, r2
 8009eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009eba:	461a      	mov	r2, r3
 8009ebc:	2310      	movs	r3, #16
 8009ebe:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	015a      	lsls	r2, r3, #5
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	4413      	add	r3, r2
 8009ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ecc:	461a      	mov	r2, r3
 8009ece:	2308      	movs	r3, #8
 8009ed0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	68fa      	ldr	r2, [r7, #12]
 8009ed8:	b2d2      	uxtb	r2, r2
 8009eda:	4611      	mov	r1, r2
 8009edc:	4618      	mov	r0, r3
 8009ede:	f003 fcfc 	bl	800d8da <USB_HC_Halt>
 8009ee2:	e040      	b.n	8009f66 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	015a      	lsls	r2, r3, #5
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	4413      	add	r3, r2
 8009eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ef0:	689b      	ldr	r3, [r3, #8]
 8009ef2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ef6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009efa:	d134      	bne.n	8009f66 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	015a      	lsls	r2, r3, #5
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	4413      	add	r3, r2
 8009f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f08:	68db      	ldr	r3, [r3, #12]
 8009f0a:	68fa      	ldr	r2, [r7, #12]
 8009f0c:	0151      	lsls	r1, r2, #5
 8009f0e:	693a      	ldr	r2, [r7, #16]
 8009f10:	440a      	add	r2, r1
 8009f12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f16:	f043 0302 	orr.w	r3, r3, #2
 8009f1a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	68fa      	ldr	r2, [r7, #12]
 8009f22:	b2d2      	uxtb	r2, r2
 8009f24:	4611      	mov	r1, r2
 8009f26:	4618      	mov	r0, r3
 8009f28:	f003 fcd7 	bl	800d8da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	015a      	lsls	r2, r3, #5
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	4413      	add	r3, r2
 8009f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f38:	461a      	mov	r2, r3
 8009f3a:	2310      	movs	r3, #16
 8009f3c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8009f3e:	6879      	ldr	r1, [r7, #4]
 8009f40:	68fa      	ldr	r2, [r7, #12]
 8009f42:	4613      	mov	r3, r2
 8009f44:	009b      	lsls	r3, r3, #2
 8009f46:	4413      	add	r3, r2
 8009f48:	00db      	lsls	r3, r3, #3
 8009f4a:	440b      	add	r3, r1
 8009f4c:	335d      	adds	r3, #93	; 0x5d
 8009f4e:	2208      	movs	r2, #8
 8009f50:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	015a      	lsls	r2, r3, #5
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	4413      	add	r3, r2
 8009f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f5e:	461a      	mov	r2, r3
 8009f60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f64:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	015a      	lsls	r2, r3, #5
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	4413      	add	r3, r2
 8009f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f72:	689b      	ldr	r3, [r3, #8]
 8009f74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009f78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f7c:	d122      	bne.n	8009fc4 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	015a      	lsls	r2, r3, #5
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	4413      	add	r3, r2
 8009f86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f8a:	68db      	ldr	r3, [r3, #12]
 8009f8c:	68fa      	ldr	r2, [r7, #12]
 8009f8e:	0151      	lsls	r1, r2, #5
 8009f90:	693a      	ldr	r2, [r7, #16]
 8009f92:	440a      	add	r2, r1
 8009f94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f98:	f043 0302 	orr.w	r3, r3, #2
 8009f9c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	68fa      	ldr	r2, [r7, #12]
 8009fa4:	b2d2      	uxtb	r2, r2
 8009fa6:	4611      	mov	r1, r2
 8009fa8:	4618      	mov	r0, r3
 8009faa:	f003 fc96 	bl	800d8da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	015a      	lsls	r2, r3, #5
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	4413      	add	r3, r2
 8009fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fba:	461a      	mov	r2, r3
 8009fbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009fc0:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8009fc2:	e300      	b.n	800a5c6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	015a      	lsls	r2, r3, #5
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	4413      	add	r3, r2
 8009fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fd0:	689b      	ldr	r3, [r3, #8]
 8009fd2:	f003 0301 	and.w	r3, r3, #1
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	f040 80fd 	bne.w	800a1d6 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	691b      	ldr	r3, [r3, #16]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d01b      	beq.n	800a01c <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8009fe4:	6879      	ldr	r1, [r7, #4]
 8009fe6:	68fa      	ldr	r2, [r7, #12]
 8009fe8:	4613      	mov	r3, r2
 8009fea:	009b      	lsls	r3, r3, #2
 8009fec:	4413      	add	r3, r2
 8009fee:	00db      	lsls	r3, r3, #3
 8009ff0:	440b      	add	r3, r1
 8009ff2:	3348      	adds	r3, #72	; 0x48
 8009ff4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	0159      	lsls	r1, r3, #5
 8009ffa:	693b      	ldr	r3, [r7, #16]
 8009ffc:	440b      	add	r3, r1
 8009ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a002:	691b      	ldr	r3, [r3, #16]
 800a004:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800a008:	1ad1      	subs	r1, r2, r3
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	68fa      	ldr	r2, [r7, #12]
 800a00e:	4613      	mov	r3, r2
 800a010:	009b      	lsls	r3, r3, #2
 800a012:	4413      	add	r3, r2
 800a014:	00db      	lsls	r3, r3, #3
 800a016:	4403      	add	r3, r0
 800a018:	334c      	adds	r3, #76	; 0x4c
 800a01a:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800a01c:	6879      	ldr	r1, [r7, #4]
 800a01e:	68fa      	ldr	r2, [r7, #12]
 800a020:	4613      	mov	r3, r2
 800a022:	009b      	lsls	r3, r3, #2
 800a024:	4413      	add	r3, r2
 800a026:	00db      	lsls	r3, r3, #3
 800a028:	440b      	add	r3, r1
 800a02a:	335d      	adds	r3, #93	; 0x5d
 800a02c:	2201      	movs	r2, #1
 800a02e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800a030:	6879      	ldr	r1, [r7, #4]
 800a032:	68fa      	ldr	r2, [r7, #12]
 800a034:	4613      	mov	r3, r2
 800a036:	009b      	lsls	r3, r3, #2
 800a038:	4413      	add	r3, r2
 800a03a:	00db      	lsls	r3, r3, #3
 800a03c:	440b      	add	r3, r1
 800a03e:	3358      	adds	r3, #88	; 0x58
 800a040:	2200      	movs	r2, #0
 800a042:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	015a      	lsls	r2, r3, #5
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	4413      	add	r3, r2
 800a04c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a050:	461a      	mov	r2, r3
 800a052:	2301      	movs	r3, #1
 800a054:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800a056:	6879      	ldr	r1, [r7, #4]
 800a058:	68fa      	ldr	r2, [r7, #12]
 800a05a:	4613      	mov	r3, r2
 800a05c:	009b      	lsls	r3, r3, #2
 800a05e:	4413      	add	r3, r2
 800a060:	00db      	lsls	r3, r3, #3
 800a062:	440b      	add	r3, r1
 800a064:	333f      	adds	r3, #63	; 0x3f
 800a066:	781b      	ldrb	r3, [r3, #0]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d00a      	beq.n	800a082 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800a06c:	6879      	ldr	r1, [r7, #4]
 800a06e:	68fa      	ldr	r2, [r7, #12]
 800a070:	4613      	mov	r3, r2
 800a072:	009b      	lsls	r3, r3, #2
 800a074:	4413      	add	r3, r2
 800a076:	00db      	lsls	r3, r3, #3
 800a078:	440b      	add	r3, r1
 800a07a:	333f      	adds	r3, #63	; 0x3f
 800a07c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800a07e:	2b02      	cmp	r3, #2
 800a080:	d121      	bne.n	800a0c6 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	015a      	lsls	r2, r3, #5
 800a086:	693b      	ldr	r3, [r7, #16]
 800a088:	4413      	add	r3, r2
 800a08a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a08e:	68db      	ldr	r3, [r3, #12]
 800a090:	68fa      	ldr	r2, [r7, #12]
 800a092:	0151      	lsls	r1, r2, #5
 800a094:	693a      	ldr	r2, [r7, #16]
 800a096:	440a      	add	r2, r1
 800a098:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a09c:	f043 0302 	orr.w	r3, r3, #2
 800a0a0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	68fa      	ldr	r2, [r7, #12]
 800a0a8:	b2d2      	uxtb	r2, r2
 800a0aa:	4611      	mov	r1, r2
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f003 fc14 	bl	800d8da <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	015a      	lsls	r2, r3, #5
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	4413      	add	r3, r2
 800a0ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0be:	461a      	mov	r2, r3
 800a0c0:	2310      	movs	r3, #16
 800a0c2:	6093      	str	r3, [r2, #8]
 800a0c4:	e070      	b.n	800a1a8 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800a0c6:	6879      	ldr	r1, [r7, #4]
 800a0c8:	68fa      	ldr	r2, [r7, #12]
 800a0ca:	4613      	mov	r3, r2
 800a0cc:	009b      	lsls	r3, r3, #2
 800a0ce:	4413      	add	r3, r2
 800a0d0:	00db      	lsls	r3, r3, #3
 800a0d2:	440b      	add	r3, r1
 800a0d4:	333f      	adds	r3, #63	; 0x3f
 800a0d6:	781b      	ldrb	r3, [r3, #0]
 800a0d8:	2b03      	cmp	r3, #3
 800a0da:	d12a      	bne.n	800a132 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	015a      	lsls	r2, r3, #5
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	4413      	add	r3, r2
 800a0e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	68fa      	ldr	r2, [r7, #12]
 800a0ec:	0151      	lsls	r1, r2, #5
 800a0ee:	693a      	ldr	r2, [r7, #16]
 800a0f0:	440a      	add	r2, r1
 800a0f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a0f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a0fa:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800a0fc:	6879      	ldr	r1, [r7, #4]
 800a0fe:	68fa      	ldr	r2, [r7, #12]
 800a100:	4613      	mov	r3, r2
 800a102:	009b      	lsls	r3, r3, #2
 800a104:	4413      	add	r3, r2
 800a106:	00db      	lsls	r3, r3, #3
 800a108:	440b      	add	r3, r1
 800a10a:	335c      	adds	r3, #92	; 0x5c
 800a10c:	2201      	movs	r2, #1
 800a10e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	b2d8      	uxtb	r0, r3
 800a114:	6879      	ldr	r1, [r7, #4]
 800a116:	68fa      	ldr	r2, [r7, #12]
 800a118:	4613      	mov	r3, r2
 800a11a:	009b      	lsls	r3, r3, #2
 800a11c:	4413      	add	r3, r2
 800a11e:	00db      	lsls	r3, r3, #3
 800a120:	440b      	add	r3, r1
 800a122:	335c      	adds	r3, #92	; 0x5c
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	461a      	mov	r2, r3
 800a128:	4601      	mov	r1, r0
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f004 fed8 	bl	800eee0 <HAL_HCD_HC_NotifyURBChange_Callback>
 800a130:	e03a      	b.n	800a1a8 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800a132:	6879      	ldr	r1, [r7, #4]
 800a134:	68fa      	ldr	r2, [r7, #12]
 800a136:	4613      	mov	r3, r2
 800a138:	009b      	lsls	r3, r3, #2
 800a13a:	4413      	add	r3, r2
 800a13c:	00db      	lsls	r3, r3, #3
 800a13e:	440b      	add	r3, r1
 800a140:	333f      	adds	r3, #63	; 0x3f
 800a142:	781b      	ldrb	r3, [r3, #0]
 800a144:	2b01      	cmp	r3, #1
 800a146:	d12f      	bne.n	800a1a8 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800a148:	6879      	ldr	r1, [r7, #4]
 800a14a:	68fa      	ldr	r2, [r7, #12]
 800a14c:	4613      	mov	r3, r2
 800a14e:	009b      	lsls	r3, r3, #2
 800a150:	4413      	add	r3, r2
 800a152:	00db      	lsls	r3, r3, #3
 800a154:	440b      	add	r3, r1
 800a156:	335c      	adds	r3, #92	; 0x5c
 800a158:	2201      	movs	r2, #1
 800a15a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800a15c:	6879      	ldr	r1, [r7, #4]
 800a15e:	68fa      	ldr	r2, [r7, #12]
 800a160:	4613      	mov	r3, r2
 800a162:	009b      	lsls	r3, r3, #2
 800a164:	4413      	add	r3, r2
 800a166:	00db      	lsls	r3, r3, #3
 800a168:	440b      	add	r3, r1
 800a16a:	3350      	adds	r3, #80	; 0x50
 800a16c:	781b      	ldrb	r3, [r3, #0]
 800a16e:	f083 0301 	eor.w	r3, r3, #1
 800a172:	b2d8      	uxtb	r0, r3
 800a174:	6879      	ldr	r1, [r7, #4]
 800a176:	68fa      	ldr	r2, [r7, #12]
 800a178:	4613      	mov	r3, r2
 800a17a:	009b      	lsls	r3, r3, #2
 800a17c:	4413      	add	r3, r2
 800a17e:	00db      	lsls	r3, r3, #3
 800a180:	440b      	add	r3, r1
 800a182:	3350      	adds	r3, #80	; 0x50
 800a184:	4602      	mov	r2, r0
 800a186:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	b2d8      	uxtb	r0, r3
 800a18c:	6879      	ldr	r1, [r7, #4]
 800a18e:	68fa      	ldr	r2, [r7, #12]
 800a190:	4613      	mov	r3, r2
 800a192:	009b      	lsls	r3, r3, #2
 800a194:	4413      	add	r3, r2
 800a196:	00db      	lsls	r3, r3, #3
 800a198:	440b      	add	r3, r1
 800a19a:	335c      	adds	r3, #92	; 0x5c
 800a19c:	781b      	ldrb	r3, [r3, #0]
 800a19e:	461a      	mov	r2, r3
 800a1a0:	4601      	mov	r1, r0
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f004 fe9c 	bl	800eee0 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800a1a8:	6879      	ldr	r1, [r7, #4]
 800a1aa:	68fa      	ldr	r2, [r7, #12]
 800a1ac:	4613      	mov	r3, r2
 800a1ae:	009b      	lsls	r3, r3, #2
 800a1b0:	4413      	add	r3, r2
 800a1b2:	00db      	lsls	r3, r3, #3
 800a1b4:	440b      	add	r3, r1
 800a1b6:	3350      	adds	r3, #80	; 0x50
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	f083 0301 	eor.w	r3, r3, #1
 800a1be:	b2d8      	uxtb	r0, r3
 800a1c0:	6879      	ldr	r1, [r7, #4]
 800a1c2:	68fa      	ldr	r2, [r7, #12]
 800a1c4:	4613      	mov	r3, r2
 800a1c6:	009b      	lsls	r3, r3, #2
 800a1c8:	4413      	add	r3, r2
 800a1ca:	00db      	lsls	r3, r3, #3
 800a1cc:	440b      	add	r3, r1
 800a1ce:	3350      	adds	r3, #80	; 0x50
 800a1d0:	4602      	mov	r2, r0
 800a1d2:	701a      	strb	r2, [r3, #0]
}
 800a1d4:	e1f7      	b.n	800a5c6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	015a      	lsls	r2, r3, #5
 800a1da:	693b      	ldr	r3, [r7, #16]
 800a1dc:	4413      	add	r3, r2
 800a1de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1e2:	689b      	ldr	r3, [r3, #8]
 800a1e4:	f003 0302 	and.w	r3, r3, #2
 800a1e8:	2b02      	cmp	r3, #2
 800a1ea:	f040 811a 	bne.w	800a422 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	015a      	lsls	r2, r3, #5
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	4413      	add	r3, r2
 800a1f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1fa:	68db      	ldr	r3, [r3, #12]
 800a1fc:	68fa      	ldr	r2, [r7, #12]
 800a1fe:	0151      	lsls	r1, r2, #5
 800a200:	693a      	ldr	r2, [r7, #16]
 800a202:	440a      	add	r2, r1
 800a204:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a208:	f023 0302 	bic.w	r3, r3, #2
 800a20c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800a20e:	6879      	ldr	r1, [r7, #4]
 800a210:	68fa      	ldr	r2, [r7, #12]
 800a212:	4613      	mov	r3, r2
 800a214:	009b      	lsls	r3, r3, #2
 800a216:	4413      	add	r3, r2
 800a218:	00db      	lsls	r3, r3, #3
 800a21a:	440b      	add	r3, r1
 800a21c:	335d      	adds	r3, #93	; 0x5d
 800a21e:	781b      	ldrb	r3, [r3, #0]
 800a220:	2b01      	cmp	r3, #1
 800a222:	d10a      	bne.n	800a23a <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800a224:	6879      	ldr	r1, [r7, #4]
 800a226:	68fa      	ldr	r2, [r7, #12]
 800a228:	4613      	mov	r3, r2
 800a22a:	009b      	lsls	r3, r3, #2
 800a22c:	4413      	add	r3, r2
 800a22e:	00db      	lsls	r3, r3, #3
 800a230:	440b      	add	r3, r1
 800a232:	335c      	adds	r3, #92	; 0x5c
 800a234:	2201      	movs	r2, #1
 800a236:	701a      	strb	r2, [r3, #0]
 800a238:	e0d9      	b.n	800a3ee <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800a23a:	6879      	ldr	r1, [r7, #4]
 800a23c:	68fa      	ldr	r2, [r7, #12]
 800a23e:	4613      	mov	r3, r2
 800a240:	009b      	lsls	r3, r3, #2
 800a242:	4413      	add	r3, r2
 800a244:	00db      	lsls	r3, r3, #3
 800a246:	440b      	add	r3, r1
 800a248:	335d      	adds	r3, #93	; 0x5d
 800a24a:	781b      	ldrb	r3, [r3, #0]
 800a24c:	2b05      	cmp	r3, #5
 800a24e:	d10a      	bne.n	800a266 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800a250:	6879      	ldr	r1, [r7, #4]
 800a252:	68fa      	ldr	r2, [r7, #12]
 800a254:	4613      	mov	r3, r2
 800a256:	009b      	lsls	r3, r3, #2
 800a258:	4413      	add	r3, r2
 800a25a:	00db      	lsls	r3, r3, #3
 800a25c:	440b      	add	r3, r1
 800a25e:	335c      	adds	r3, #92	; 0x5c
 800a260:	2205      	movs	r2, #5
 800a262:	701a      	strb	r2, [r3, #0]
 800a264:	e0c3      	b.n	800a3ee <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800a266:	6879      	ldr	r1, [r7, #4]
 800a268:	68fa      	ldr	r2, [r7, #12]
 800a26a:	4613      	mov	r3, r2
 800a26c:	009b      	lsls	r3, r3, #2
 800a26e:	4413      	add	r3, r2
 800a270:	00db      	lsls	r3, r3, #3
 800a272:	440b      	add	r3, r1
 800a274:	335d      	adds	r3, #93	; 0x5d
 800a276:	781b      	ldrb	r3, [r3, #0]
 800a278:	2b06      	cmp	r3, #6
 800a27a:	d00a      	beq.n	800a292 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800a27c:	6879      	ldr	r1, [r7, #4]
 800a27e:	68fa      	ldr	r2, [r7, #12]
 800a280:	4613      	mov	r3, r2
 800a282:	009b      	lsls	r3, r3, #2
 800a284:	4413      	add	r3, r2
 800a286:	00db      	lsls	r3, r3, #3
 800a288:	440b      	add	r3, r1
 800a28a:	335d      	adds	r3, #93	; 0x5d
 800a28c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800a28e:	2b08      	cmp	r3, #8
 800a290:	d156      	bne.n	800a340 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 800a292:	6879      	ldr	r1, [r7, #4]
 800a294:	68fa      	ldr	r2, [r7, #12]
 800a296:	4613      	mov	r3, r2
 800a298:	009b      	lsls	r3, r3, #2
 800a29a:	4413      	add	r3, r2
 800a29c:	00db      	lsls	r3, r3, #3
 800a29e:	440b      	add	r3, r1
 800a2a0:	3358      	adds	r3, #88	; 0x58
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	1c59      	adds	r1, r3, #1
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	68fa      	ldr	r2, [r7, #12]
 800a2aa:	4613      	mov	r3, r2
 800a2ac:	009b      	lsls	r3, r3, #2
 800a2ae:	4413      	add	r3, r2
 800a2b0:	00db      	lsls	r3, r3, #3
 800a2b2:	4403      	add	r3, r0
 800a2b4:	3358      	adds	r3, #88	; 0x58
 800a2b6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800a2b8:	6879      	ldr	r1, [r7, #4]
 800a2ba:	68fa      	ldr	r2, [r7, #12]
 800a2bc:	4613      	mov	r3, r2
 800a2be:	009b      	lsls	r3, r3, #2
 800a2c0:	4413      	add	r3, r2
 800a2c2:	00db      	lsls	r3, r3, #3
 800a2c4:	440b      	add	r3, r1
 800a2c6:	3358      	adds	r3, #88	; 0x58
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	2b03      	cmp	r3, #3
 800a2cc:	d914      	bls.n	800a2f8 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800a2ce:	6879      	ldr	r1, [r7, #4]
 800a2d0:	68fa      	ldr	r2, [r7, #12]
 800a2d2:	4613      	mov	r3, r2
 800a2d4:	009b      	lsls	r3, r3, #2
 800a2d6:	4413      	add	r3, r2
 800a2d8:	00db      	lsls	r3, r3, #3
 800a2da:	440b      	add	r3, r1
 800a2dc:	3358      	adds	r3, #88	; 0x58
 800a2de:	2200      	movs	r2, #0
 800a2e0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800a2e2:	6879      	ldr	r1, [r7, #4]
 800a2e4:	68fa      	ldr	r2, [r7, #12]
 800a2e6:	4613      	mov	r3, r2
 800a2e8:	009b      	lsls	r3, r3, #2
 800a2ea:	4413      	add	r3, r2
 800a2ec:	00db      	lsls	r3, r3, #3
 800a2ee:	440b      	add	r3, r1
 800a2f0:	335c      	adds	r3, #92	; 0x5c
 800a2f2:	2204      	movs	r2, #4
 800a2f4:	701a      	strb	r2, [r3, #0]
 800a2f6:	e009      	b.n	800a30c <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800a2f8:	6879      	ldr	r1, [r7, #4]
 800a2fa:	68fa      	ldr	r2, [r7, #12]
 800a2fc:	4613      	mov	r3, r2
 800a2fe:	009b      	lsls	r3, r3, #2
 800a300:	4413      	add	r3, r2
 800a302:	00db      	lsls	r3, r3, #3
 800a304:	440b      	add	r3, r1
 800a306:	335c      	adds	r3, #92	; 0x5c
 800a308:	2202      	movs	r2, #2
 800a30a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	015a      	lsls	r2, r3, #5
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	4413      	add	r3, r2
 800a314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a322:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a32a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	015a      	lsls	r2, r3, #5
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	4413      	add	r3, r2
 800a334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a338:	461a      	mov	r2, r3
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	6013      	str	r3, [r2, #0]
 800a33e:	e056      	b.n	800a3ee <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800a340:	6879      	ldr	r1, [r7, #4]
 800a342:	68fa      	ldr	r2, [r7, #12]
 800a344:	4613      	mov	r3, r2
 800a346:	009b      	lsls	r3, r3, #2
 800a348:	4413      	add	r3, r2
 800a34a:	00db      	lsls	r3, r3, #3
 800a34c:	440b      	add	r3, r1
 800a34e:	335d      	adds	r3, #93	; 0x5d
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	2b03      	cmp	r3, #3
 800a354:	d123      	bne.n	800a39e <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800a356:	6879      	ldr	r1, [r7, #4]
 800a358:	68fa      	ldr	r2, [r7, #12]
 800a35a:	4613      	mov	r3, r2
 800a35c:	009b      	lsls	r3, r3, #2
 800a35e:	4413      	add	r3, r2
 800a360:	00db      	lsls	r3, r3, #3
 800a362:	440b      	add	r3, r1
 800a364:	335c      	adds	r3, #92	; 0x5c
 800a366:	2202      	movs	r2, #2
 800a368:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	015a      	lsls	r2, r3, #5
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	4413      	add	r3, r2
 800a372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a380:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a388:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	015a      	lsls	r2, r3, #5
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	4413      	add	r3, r2
 800a392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a396:	461a      	mov	r2, r3
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	6013      	str	r3, [r2, #0]
 800a39c:	e027      	b.n	800a3ee <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800a39e:	6879      	ldr	r1, [r7, #4]
 800a3a0:	68fa      	ldr	r2, [r7, #12]
 800a3a2:	4613      	mov	r3, r2
 800a3a4:	009b      	lsls	r3, r3, #2
 800a3a6:	4413      	add	r3, r2
 800a3a8:	00db      	lsls	r3, r3, #3
 800a3aa:	440b      	add	r3, r1
 800a3ac:	335d      	adds	r3, #93	; 0x5d
 800a3ae:	781b      	ldrb	r3, [r3, #0]
 800a3b0:	2b07      	cmp	r3, #7
 800a3b2:	d11c      	bne.n	800a3ee <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 800a3b4:	6879      	ldr	r1, [r7, #4]
 800a3b6:	68fa      	ldr	r2, [r7, #12]
 800a3b8:	4613      	mov	r3, r2
 800a3ba:	009b      	lsls	r3, r3, #2
 800a3bc:	4413      	add	r3, r2
 800a3be:	00db      	lsls	r3, r3, #3
 800a3c0:	440b      	add	r3, r1
 800a3c2:	3358      	adds	r3, #88	; 0x58
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	1c59      	adds	r1, r3, #1
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	68fa      	ldr	r2, [r7, #12]
 800a3cc:	4613      	mov	r3, r2
 800a3ce:	009b      	lsls	r3, r3, #2
 800a3d0:	4413      	add	r3, r2
 800a3d2:	00db      	lsls	r3, r3, #3
 800a3d4:	4403      	add	r3, r0
 800a3d6:	3358      	adds	r3, #88	; 0x58
 800a3d8:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800a3da:	6879      	ldr	r1, [r7, #4]
 800a3dc:	68fa      	ldr	r2, [r7, #12]
 800a3de:	4613      	mov	r3, r2
 800a3e0:	009b      	lsls	r3, r3, #2
 800a3e2:	4413      	add	r3, r2
 800a3e4:	00db      	lsls	r3, r3, #3
 800a3e6:	440b      	add	r3, r1
 800a3e8:	335c      	adds	r3, #92	; 0x5c
 800a3ea:	2204      	movs	r2, #4
 800a3ec:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	015a      	lsls	r2, r3, #5
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	4413      	add	r3, r2
 800a3f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3fa:	461a      	mov	r2, r3
 800a3fc:	2302      	movs	r3, #2
 800a3fe:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	b2d8      	uxtb	r0, r3
 800a404:	6879      	ldr	r1, [r7, #4]
 800a406:	68fa      	ldr	r2, [r7, #12]
 800a408:	4613      	mov	r3, r2
 800a40a:	009b      	lsls	r3, r3, #2
 800a40c:	4413      	add	r3, r2
 800a40e:	00db      	lsls	r3, r3, #3
 800a410:	440b      	add	r3, r1
 800a412:	335c      	adds	r3, #92	; 0x5c
 800a414:	781b      	ldrb	r3, [r3, #0]
 800a416:	461a      	mov	r2, r3
 800a418:	4601      	mov	r1, r0
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f004 fd60 	bl	800eee0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800a420:	e0d1      	b.n	800a5c6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	015a      	lsls	r2, r3, #5
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	4413      	add	r3, r2
 800a42a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a42e:	689b      	ldr	r3, [r3, #8]
 800a430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a434:	2b80      	cmp	r3, #128	; 0x80
 800a436:	d13e      	bne.n	800a4b6 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	015a      	lsls	r2, r3, #5
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	4413      	add	r3, r2
 800a440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a444:	68db      	ldr	r3, [r3, #12]
 800a446:	68fa      	ldr	r2, [r7, #12]
 800a448:	0151      	lsls	r1, r2, #5
 800a44a:	693a      	ldr	r2, [r7, #16]
 800a44c:	440a      	add	r2, r1
 800a44e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a452:	f043 0302 	orr.w	r3, r3, #2
 800a456:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800a458:	6879      	ldr	r1, [r7, #4]
 800a45a:	68fa      	ldr	r2, [r7, #12]
 800a45c:	4613      	mov	r3, r2
 800a45e:	009b      	lsls	r3, r3, #2
 800a460:	4413      	add	r3, r2
 800a462:	00db      	lsls	r3, r3, #3
 800a464:	440b      	add	r3, r1
 800a466:	3358      	adds	r3, #88	; 0x58
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	1c59      	adds	r1, r3, #1
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	68fa      	ldr	r2, [r7, #12]
 800a470:	4613      	mov	r3, r2
 800a472:	009b      	lsls	r3, r3, #2
 800a474:	4413      	add	r3, r2
 800a476:	00db      	lsls	r3, r3, #3
 800a478:	4403      	add	r3, r0
 800a47a:	3358      	adds	r3, #88	; 0x58
 800a47c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800a47e:	6879      	ldr	r1, [r7, #4]
 800a480:	68fa      	ldr	r2, [r7, #12]
 800a482:	4613      	mov	r3, r2
 800a484:	009b      	lsls	r3, r3, #2
 800a486:	4413      	add	r3, r2
 800a488:	00db      	lsls	r3, r3, #3
 800a48a:	440b      	add	r3, r1
 800a48c:	335d      	adds	r3, #93	; 0x5d
 800a48e:	2206      	movs	r2, #6
 800a490:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	68fa      	ldr	r2, [r7, #12]
 800a498:	b2d2      	uxtb	r2, r2
 800a49a:	4611      	mov	r1, r2
 800a49c:	4618      	mov	r0, r3
 800a49e:	f003 fa1c 	bl	800d8da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	015a      	lsls	r2, r3, #5
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	4413      	add	r3, r2
 800a4aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	2380      	movs	r3, #128	; 0x80
 800a4b2:	6093      	str	r3, [r2, #8]
}
 800a4b4:	e087      	b.n	800a5c6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	015a      	lsls	r2, r3, #5
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	4413      	add	r3, r2
 800a4be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4c2:	689b      	ldr	r3, [r3, #8]
 800a4c4:	f003 0310 	and.w	r3, r3, #16
 800a4c8:	2b10      	cmp	r3, #16
 800a4ca:	d17c      	bne.n	800a5c6 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800a4cc:	6879      	ldr	r1, [r7, #4]
 800a4ce:	68fa      	ldr	r2, [r7, #12]
 800a4d0:	4613      	mov	r3, r2
 800a4d2:	009b      	lsls	r3, r3, #2
 800a4d4:	4413      	add	r3, r2
 800a4d6:	00db      	lsls	r3, r3, #3
 800a4d8:	440b      	add	r3, r1
 800a4da:	333f      	adds	r3, #63	; 0x3f
 800a4dc:	781b      	ldrb	r3, [r3, #0]
 800a4de:	2b03      	cmp	r3, #3
 800a4e0:	d122      	bne.n	800a528 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800a4e2:	6879      	ldr	r1, [r7, #4]
 800a4e4:	68fa      	ldr	r2, [r7, #12]
 800a4e6:	4613      	mov	r3, r2
 800a4e8:	009b      	lsls	r3, r3, #2
 800a4ea:	4413      	add	r3, r2
 800a4ec:	00db      	lsls	r3, r3, #3
 800a4ee:	440b      	add	r3, r1
 800a4f0:	3358      	adds	r3, #88	; 0x58
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	015a      	lsls	r2, r3, #5
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	4413      	add	r3, r2
 800a4fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a502:	68db      	ldr	r3, [r3, #12]
 800a504:	68fa      	ldr	r2, [r7, #12]
 800a506:	0151      	lsls	r1, r2, #5
 800a508:	693a      	ldr	r2, [r7, #16]
 800a50a:	440a      	add	r2, r1
 800a50c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a510:	f043 0302 	orr.w	r3, r3, #2
 800a514:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	68fa      	ldr	r2, [r7, #12]
 800a51c:	b2d2      	uxtb	r2, r2
 800a51e:	4611      	mov	r1, r2
 800a520:	4618      	mov	r0, r3
 800a522:	f003 f9da 	bl	800d8da <USB_HC_Halt>
 800a526:	e045      	b.n	800a5b4 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800a528:	6879      	ldr	r1, [r7, #4]
 800a52a:	68fa      	ldr	r2, [r7, #12]
 800a52c:	4613      	mov	r3, r2
 800a52e:	009b      	lsls	r3, r3, #2
 800a530:	4413      	add	r3, r2
 800a532:	00db      	lsls	r3, r3, #3
 800a534:	440b      	add	r3, r1
 800a536:	333f      	adds	r3, #63	; 0x3f
 800a538:	781b      	ldrb	r3, [r3, #0]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d00a      	beq.n	800a554 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800a53e:	6879      	ldr	r1, [r7, #4]
 800a540:	68fa      	ldr	r2, [r7, #12]
 800a542:	4613      	mov	r3, r2
 800a544:	009b      	lsls	r3, r3, #2
 800a546:	4413      	add	r3, r2
 800a548:	00db      	lsls	r3, r3, #3
 800a54a:	440b      	add	r3, r1
 800a54c:	333f      	adds	r3, #63	; 0x3f
 800a54e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800a550:	2b02      	cmp	r3, #2
 800a552:	d12f      	bne.n	800a5b4 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800a554:	6879      	ldr	r1, [r7, #4]
 800a556:	68fa      	ldr	r2, [r7, #12]
 800a558:	4613      	mov	r3, r2
 800a55a:	009b      	lsls	r3, r3, #2
 800a55c:	4413      	add	r3, r2
 800a55e:	00db      	lsls	r3, r3, #3
 800a560:	440b      	add	r3, r1
 800a562:	3358      	adds	r3, #88	; 0x58
 800a564:	2200      	movs	r2, #0
 800a566:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	691b      	ldr	r3, [r3, #16]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d121      	bne.n	800a5b4 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 800a570:	6879      	ldr	r1, [r7, #4]
 800a572:	68fa      	ldr	r2, [r7, #12]
 800a574:	4613      	mov	r3, r2
 800a576:	009b      	lsls	r3, r3, #2
 800a578:	4413      	add	r3, r2
 800a57a:	00db      	lsls	r3, r3, #3
 800a57c:	440b      	add	r3, r1
 800a57e:	335d      	adds	r3, #93	; 0x5d
 800a580:	2203      	movs	r2, #3
 800a582:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	015a      	lsls	r2, r3, #5
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	4413      	add	r3, r2
 800a58c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a590:	68db      	ldr	r3, [r3, #12]
 800a592:	68fa      	ldr	r2, [r7, #12]
 800a594:	0151      	lsls	r1, r2, #5
 800a596:	693a      	ldr	r2, [r7, #16]
 800a598:	440a      	add	r2, r1
 800a59a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a59e:	f043 0302 	orr.w	r3, r3, #2
 800a5a2:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	68fa      	ldr	r2, [r7, #12]
 800a5aa:	b2d2      	uxtb	r2, r2
 800a5ac:	4611      	mov	r1, r2
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f003 f993 	bl	800d8da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	015a      	lsls	r2, r3, #5
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	4413      	add	r3, r2
 800a5bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5c0:	461a      	mov	r2, r3
 800a5c2:	2310      	movs	r3, #16
 800a5c4:	6093      	str	r3, [r2, #8]
}
 800a5c6:	bf00      	nop
 800a5c8:	3718      	adds	r7, #24
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}

0800a5ce <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800a5ce:	b580      	push	{r7, lr}
 800a5d0:	b086      	sub	sp, #24
 800a5d2:	af00      	add	r7, sp, #0
 800a5d4:	6078      	str	r0, [r7, #4]
 800a5d6:	460b      	mov	r3, r1
 800a5d8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800a5e4:	78fb      	ldrb	r3, [r7, #3]
 800a5e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	015a      	lsls	r2, r3, #5
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	4413      	add	r3, r2
 800a5f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5f4:	689b      	ldr	r3, [r3, #8]
 800a5f6:	f003 0304 	and.w	r3, r3, #4
 800a5fa:	2b04      	cmp	r3, #4
 800a5fc:	d119      	bne.n	800a632 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	015a      	lsls	r2, r3, #5
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	4413      	add	r3, r2
 800a606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a60a:	461a      	mov	r2, r3
 800a60c:	2304      	movs	r3, #4
 800a60e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	015a      	lsls	r2, r3, #5
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	4413      	add	r3, r2
 800a618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a61c:	68db      	ldr	r3, [r3, #12]
 800a61e:	68fa      	ldr	r2, [r7, #12]
 800a620:	0151      	lsls	r1, r2, #5
 800a622:	693a      	ldr	r2, [r7, #16]
 800a624:	440a      	add	r2, r1
 800a626:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a62a:	f043 0302 	orr.w	r3, r3, #2
 800a62e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800a630:	e33e      	b.n	800acb0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	015a      	lsls	r2, r3, #5
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	4413      	add	r3, r2
 800a63a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a63e:	689b      	ldr	r3, [r3, #8]
 800a640:	f003 0320 	and.w	r3, r3, #32
 800a644:	2b20      	cmp	r3, #32
 800a646:	d141      	bne.n	800a6cc <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	015a      	lsls	r2, r3, #5
 800a64c:	693b      	ldr	r3, [r7, #16]
 800a64e:	4413      	add	r3, r2
 800a650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a654:	461a      	mov	r2, r3
 800a656:	2320      	movs	r3, #32
 800a658:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800a65a:	6879      	ldr	r1, [r7, #4]
 800a65c:	68fa      	ldr	r2, [r7, #12]
 800a65e:	4613      	mov	r3, r2
 800a660:	009b      	lsls	r3, r3, #2
 800a662:	4413      	add	r3, r2
 800a664:	00db      	lsls	r3, r3, #3
 800a666:	440b      	add	r3, r1
 800a668:	333d      	adds	r3, #61	; 0x3d
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	2b01      	cmp	r3, #1
 800a66e:	f040 831f 	bne.w	800acb0 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800a672:	6879      	ldr	r1, [r7, #4]
 800a674:	68fa      	ldr	r2, [r7, #12]
 800a676:	4613      	mov	r3, r2
 800a678:	009b      	lsls	r3, r3, #2
 800a67a:	4413      	add	r3, r2
 800a67c:	00db      	lsls	r3, r3, #3
 800a67e:	440b      	add	r3, r1
 800a680:	333d      	adds	r3, #61	; 0x3d
 800a682:	2200      	movs	r2, #0
 800a684:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800a686:	6879      	ldr	r1, [r7, #4]
 800a688:	68fa      	ldr	r2, [r7, #12]
 800a68a:	4613      	mov	r3, r2
 800a68c:	009b      	lsls	r3, r3, #2
 800a68e:	4413      	add	r3, r2
 800a690:	00db      	lsls	r3, r3, #3
 800a692:	440b      	add	r3, r1
 800a694:	335c      	adds	r3, #92	; 0x5c
 800a696:	2202      	movs	r2, #2
 800a698:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	015a      	lsls	r2, r3, #5
 800a69e:	693b      	ldr	r3, [r7, #16]
 800a6a0:	4413      	add	r3, r2
 800a6a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6a6:	68db      	ldr	r3, [r3, #12]
 800a6a8:	68fa      	ldr	r2, [r7, #12]
 800a6aa:	0151      	lsls	r1, r2, #5
 800a6ac:	693a      	ldr	r2, [r7, #16]
 800a6ae:	440a      	add	r2, r1
 800a6b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a6b4:	f043 0302 	orr.w	r3, r3, #2
 800a6b8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	68fa      	ldr	r2, [r7, #12]
 800a6c0:	b2d2      	uxtb	r2, r2
 800a6c2:	4611      	mov	r1, r2
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f003 f908 	bl	800d8da <USB_HC_Halt>
}
 800a6ca:	e2f1      	b.n	800acb0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	015a      	lsls	r2, r3, #5
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	4413      	add	r3, r2
 800a6d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6d8:	689b      	ldr	r3, [r3, #8]
 800a6da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6de:	2b40      	cmp	r3, #64	; 0x40
 800a6e0:	d13f      	bne.n	800a762 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800a6e2:	6879      	ldr	r1, [r7, #4]
 800a6e4:	68fa      	ldr	r2, [r7, #12]
 800a6e6:	4613      	mov	r3, r2
 800a6e8:	009b      	lsls	r3, r3, #2
 800a6ea:	4413      	add	r3, r2
 800a6ec:	00db      	lsls	r3, r3, #3
 800a6ee:	440b      	add	r3, r1
 800a6f0:	335d      	adds	r3, #93	; 0x5d
 800a6f2:	2204      	movs	r2, #4
 800a6f4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800a6f6:	6879      	ldr	r1, [r7, #4]
 800a6f8:	68fa      	ldr	r2, [r7, #12]
 800a6fa:	4613      	mov	r3, r2
 800a6fc:	009b      	lsls	r3, r3, #2
 800a6fe:	4413      	add	r3, r2
 800a700:	00db      	lsls	r3, r3, #3
 800a702:	440b      	add	r3, r1
 800a704:	333d      	adds	r3, #61	; 0x3d
 800a706:	2201      	movs	r2, #1
 800a708:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800a70a:	6879      	ldr	r1, [r7, #4]
 800a70c:	68fa      	ldr	r2, [r7, #12]
 800a70e:	4613      	mov	r3, r2
 800a710:	009b      	lsls	r3, r3, #2
 800a712:	4413      	add	r3, r2
 800a714:	00db      	lsls	r3, r3, #3
 800a716:	440b      	add	r3, r1
 800a718:	3358      	adds	r3, #88	; 0x58
 800a71a:	2200      	movs	r2, #0
 800a71c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	015a      	lsls	r2, r3, #5
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	4413      	add	r3, r2
 800a726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a72a:	68db      	ldr	r3, [r3, #12]
 800a72c:	68fa      	ldr	r2, [r7, #12]
 800a72e:	0151      	lsls	r1, r2, #5
 800a730:	693a      	ldr	r2, [r7, #16]
 800a732:	440a      	add	r2, r1
 800a734:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a738:	f043 0302 	orr.w	r3, r3, #2
 800a73c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	68fa      	ldr	r2, [r7, #12]
 800a744:	b2d2      	uxtb	r2, r2
 800a746:	4611      	mov	r1, r2
 800a748:	4618      	mov	r0, r3
 800a74a:	f003 f8c6 	bl	800d8da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	015a      	lsls	r2, r3, #5
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	4413      	add	r3, r2
 800a756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a75a:	461a      	mov	r2, r3
 800a75c:	2340      	movs	r3, #64	; 0x40
 800a75e:	6093      	str	r3, [r2, #8]
}
 800a760:	e2a6      	b.n	800acb0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	015a      	lsls	r2, r3, #5
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	4413      	add	r3, r2
 800a76a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a76e:	689b      	ldr	r3, [r3, #8]
 800a770:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a774:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a778:	d122      	bne.n	800a7c0 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	015a      	lsls	r2, r3, #5
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	4413      	add	r3, r2
 800a782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a786:	68db      	ldr	r3, [r3, #12]
 800a788:	68fa      	ldr	r2, [r7, #12]
 800a78a:	0151      	lsls	r1, r2, #5
 800a78c:	693a      	ldr	r2, [r7, #16]
 800a78e:	440a      	add	r2, r1
 800a790:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a794:	f043 0302 	orr.w	r3, r3, #2
 800a798:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	68fa      	ldr	r2, [r7, #12]
 800a7a0:	b2d2      	uxtb	r2, r2
 800a7a2:	4611      	mov	r1, r2
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f003 f898 	bl	800d8da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	015a      	lsls	r2, r3, #5
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	4413      	add	r3, r2
 800a7b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a7bc:	6093      	str	r3, [r2, #8]
}
 800a7be:	e277      	b.n	800acb0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	015a      	lsls	r2, r3, #5
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	4413      	add	r3, r2
 800a7c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7cc:	689b      	ldr	r3, [r3, #8]
 800a7ce:	f003 0301 	and.w	r3, r3, #1
 800a7d2:	2b01      	cmp	r3, #1
 800a7d4:	d135      	bne.n	800a842 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800a7d6:	6879      	ldr	r1, [r7, #4]
 800a7d8:	68fa      	ldr	r2, [r7, #12]
 800a7da:	4613      	mov	r3, r2
 800a7dc:	009b      	lsls	r3, r3, #2
 800a7de:	4413      	add	r3, r2
 800a7e0:	00db      	lsls	r3, r3, #3
 800a7e2:	440b      	add	r3, r1
 800a7e4:	3358      	adds	r3, #88	; 0x58
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	015a      	lsls	r2, r3, #5
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	4413      	add	r3, r2
 800a7f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7f6:	68db      	ldr	r3, [r3, #12]
 800a7f8:	68fa      	ldr	r2, [r7, #12]
 800a7fa:	0151      	lsls	r1, r2, #5
 800a7fc:	693a      	ldr	r2, [r7, #16]
 800a7fe:	440a      	add	r2, r1
 800a800:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a804:	f043 0302 	orr.w	r3, r3, #2
 800a808:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	68fa      	ldr	r2, [r7, #12]
 800a810:	b2d2      	uxtb	r2, r2
 800a812:	4611      	mov	r1, r2
 800a814:	4618      	mov	r0, r3
 800a816:	f003 f860 	bl	800d8da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	015a      	lsls	r2, r3, #5
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	4413      	add	r3, r2
 800a822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a826:	461a      	mov	r2, r3
 800a828:	2301      	movs	r3, #1
 800a82a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800a82c:	6879      	ldr	r1, [r7, #4]
 800a82e:	68fa      	ldr	r2, [r7, #12]
 800a830:	4613      	mov	r3, r2
 800a832:	009b      	lsls	r3, r3, #2
 800a834:	4413      	add	r3, r2
 800a836:	00db      	lsls	r3, r3, #3
 800a838:	440b      	add	r3, r1
 800a83a:	335d      	adds	r3, #93	; 0x5d
 800a83c:	2201      	movs	r2, #1
 800a83e:	701a      	strb	r2, [r3, #0]
}
 800a840:	e236      	b.n	800acb0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	015a      	lsls	r2, r3, #5
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	4413      	add	r3, r2
 800a84a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a84e:	689b      	ldr	r3, [r3, #8]
 800a850:	f003 0308 	and.w	r3, r3, #8
 800a854:	2b08      	cmp	r3, #8
 800a856:	d12b      	bne.n	800a8b0 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	015a      	lsls	r2, r3, #5
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	4413      	add	r3, r2
 800a860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a864:	461a      	mov	r2, r3
 800a866:	2308      	movs	r3, #8
 800a868:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	015a      	lsls	r2, r3, #5
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	4413      	add	r3, r2
 800a872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a876:	68db      	ldr	r3, [r3, #12]
 800a878:	68fa      	ldr	r2, [r7, #12]
 800a87a:	0151      	lsls	r1, r2, #5
 800a87c:	693a      	ldr	r2, [r7, #16]
 800a87e:	440a      	add	r2, r1
 800a880:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a884:	f043 0302 	orr.w	r3, r3, #2
 800a888:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	68fa      	ldr	r2, [r7, #12]
 800a890:	b2d2      	uxtb	r2, r2
 800a892:	4611      	mov	r1, r2
 800a894:	4618      	mov	r0, r3
 800a896:	f003 f820 	bl	800d8da <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800a89a:	6879      	ldr	r1, [r7, #4]
 800a89c:	68fa      	ldr	r2, [r7, #12]
 800a89e:	4613      	mov	r3, r2
 800a8a0:	009b      	lsls	r3, r3, #2
 800a8a2:	4413      	add	r3, r2
 800a8a4:	00db      	lsls	r3, r3, #3
 800a8a6:	440b      	add	r3, r1
 800a8a8:	335d      	adds	r3, #93	; 0x5d
 800a8aa:	2205      	movs	r2, #5
 800a8ac:	701a      	strb	r2, [r3, #0]
}
 800a8ae:	e1ff      	b.n	800acb0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	015a      	lsls	r2, r3, #5
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	4413      	add	r3, r2
 800a8b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8bc:	689b      	ldr	r3, [r3, #8]
 800a8be:	f003 0310 	and.w	r3, r3, #16
 800a8c2:	2b10      	cmp	r3, #16
 800a8c4:	d155      	bne.n	800a972 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800a8c6:	6879      	ldr	r1, [r7, #4]
 800a8c8:	68fa      	ldr	r2, [r7, #12]
 800a8ca:	4613      	mov	r3, r2
 800a8cc:	009b      	lsls	r3, r3, #2
 800a8ce:	4413      	add	r3, r2
 800a8d0:	00db      	lsls	r3, r3, #3
 800a8d2:	440b      	add	r3, r1
 800a8d4:	3358      	adds	r3, #88	; 0x58
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800a8da:	6879      	ldr	r1, [r7, #4]
 800a8dc:	68fa      	ldr	r2, [r7, #12]
 800a8de:	4613      	mov	r3, r2
 800a8e0:	009b      	lsls	r3, r3, #2
 800a8e2:	4413      	add	r3, r2
 800a8e4:	00db      	lsls	r3, r3, #3
 800a8e6:	440b      	add	r3, r1
 800a8e8:	335d      	adds	r3, #93	; 0x5d
 800a8ea:	2203      	movs	r2, #3
 800a8ec:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800a8ee:	6879      	ldr	r1, [r7, #4]
 800a8f0:	68fa      	ldr	r2, [r7, #12]
 800a8f2:	4613      	mov	r3, r2
 800a8f4:	009b      	lsls	r3, r3, #2
 800a8f6:	4413      	add	r3, r2
 800a8f8:	00db      	lsls	r3, r3, #3
 800a8fa:	440b      	add	r3, r1
 800a8fc:	333d      	adds	r3, #61	; 0x3d
 800a8fe:	781b      	ldrb	r3, [r3, #0]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d114      	bne.n	800a92e <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 800a904:	6879      	ldr	r1, [r7, #4]
 800a906:	68fa      	ldr	r2, [r7, #12]
 800a908:	4613      	mov	r3, r2
 800a90a:	009b      	lsls	r3, r3, #2
 800a90c:	4413      	add	r3, r2
 800a90e:	00db      	lsls	r3, r3, #3
 800a910:	440b      	add	r3, r1
 800a912:	333c      	adds	r3, #60	; 0x3c
 800a914:	781b      	ldrb	r3, [r3, #0]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d109      	bne.n	800a92e <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800a91a:	6879      	ldr	r1, [r7, #4]
 800a91c:	68fa      	ldr	r2, [r7, #12]
 800a91e:	4613      	mov	r3, r2
 800a920:	009b      	lsls	r3, r3, #2
 800a922:	4413      	add	r3, r2
 800a924:	00db      	lsls	r3, r3, #3
 800a926:	440b      	add	r3, r1
 800a928:	333d      	adds	r3, #61	; 0x3d
 800a92a:	2201      	movs	r2, #1
 800a92c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	015a      	lsls	r2, r3, #5
 800a932:	693b      	ldr	r3, [r7, #16]
 800a934:	4413      	add	r3, r2
 800a936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a93a:	68db      	ldr	r3, [r3, #12]
 800a93c:	68fa      	ldr	r2, [r7, #12]
 800a93e:	0151      	lsls	r1, r2, #5
 800a940:	693a      	ldr	r2, [r7, #16]
 800a942:	440a      	add	r2, r1
 800a944:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a948:	f043 0302 	orr.w	r3, r3, #2
 800a94c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	68fa      	ldr	r2, [r7, #12]
 800a954:	b2d2      	uxtb	r2, r2
 800a956:	4611      	mov	r1, r2
 800a958:	4618      	mov	r0, r3
 800a95a:	f002 ffbe 	bl	800d8da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	015a      	lsls	r2, r3, #5
 800a962:	693b      	ldr	r3, [r7, #16]
 800a964:	4413      	add	r3, r2
 800a966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a96a:	461a      	mov	r2, r3
 800a96c:	2310      	movs	r3, #16
 800a96e:	6093      	str	r3, [r2, #8]
}
 800a970:	e19e      	b.n	800acb0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	015a      	lsls	r2, r3, #5
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	4413      	add	r3, r2
 800a97a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a97e:	689b      	ldr	r3, [r3, #8]
 800a980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a984:	2b80      	cmp	r3, #128	; 0x80
 800a986:	d12b      	bne.n	800a9e0 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	015a      	lsls	r2, r3, #5
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	4413      	add	r3, r2
 800a990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a994:	68db      	ldr	r3, [r3, #12]
 800a996:	68fa      	ldr	r2, [r7, #12]
 800a998:	0151      	lsls	r1, r2, #5
 800a99a:	693a      	ldr	r2, [r7, #16]
 800a99c:	440a      	add	r2, r1
 800a99e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a9a2:	f043 0302 	orr.w	r3, r3, #2
 800a9a6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	68fa      	ldr	r2, [r7, #12]
 800a9ae:	b2d2      	uxtb	r2, r2
 800a9b0:	4611      	mov	r1, r2
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f002 ff91 	bl	800d8da <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800a9b8:	6879      	ldr	r1, [r7, #4]
 800a9ba:	68fa      	ldr	r2, [r7, #12]
 800a9bc:	4613      	mov	r3, r2
 800a9be:	009b      	lsls	r3, r3, #2
 800a9c0:	4413      	add	r3, r2
 800a9c2:	00db      	lsls	r3, r3, #3
 800a9c4:	440b      	add	r3, r1
 800a9c6:	335d      	adds	r3, #93	; 0x5d
 800a9c8:	2206      	movs	r2, #6
 800a9ca:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	015a      	lsls	r2, r3, #5
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	4413      	add	r3, r2
 800a9d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9d8:	461a      	mov	r2, r3
 800a9da:	2380      	movs	r3, #128	; 0x80
 800a9dc:	6093      	str	r3, [r2, #8]
}
 800a9de:	e167      	b.n	800acb0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	015a      	lsls	r2, r3, #5
 800a9e4:	693b      	ldr	r3, [r7, #16]
 800a9e6:	4413      	add	r3, r2
 800a9e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9ec:	689b      	ldr	r3, [r3, #8]
 800a9ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a9f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9f6:	d135      	bne.n	800aa64 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	015a      	lsls	r2, r3, #5
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	4413      	add	r3, r2
 800aa00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa04:	68db      	ldr	r3, [r3, #12]
 800aa06:	68fa      	ldr	r2, [r7, #12]
 800aa08:	0151      	lsls	r1, r2, #5
 800aa0a:	693a      	ldr	r2, [r7, #16]
 800aa0c:	440a      	add	r2, r1
 800aa0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa12:	f043 0302 	orr.w	r3, r3, #2
 800aa16:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	68fa      	ldr	r2, [r7, #12]
 800aa1e:	b2d2      	uxtb	r2, r2
 800aa20:	4611      	mov	r1, r2
 800aa22:	4618      	mov	r0, r3
 800aa24:	f002 ff59 	bl	800d8da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	015a      	lsls	r2, r3, #5
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	4413      	add	r3, r2
 800aa30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa34:	461a      	mov	r2, r3
 800aa36:	2310      	movs	r3, #16
 800aa38:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	015a      	lsls	r2, r3, #5
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	4413      	add	r3, r2
 800aa42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa46:	461a      	mov	r2, r3
 800aa48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa4c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800aa4e:	6879      	ldr	r1, [r7, #4]
 800aa50:	68fa      	ldr	r2, [r7, #12]
 800aa52:	4613      	mov	r3, r2
 800aa54:	009b      	lsls	r3, r3, #2
 800aa56:	4413      	add	r3, r2
 800aa58:	00db      	lsls	r3, r3, #3
 800aa5a:	440b      	add	r3, r1
 800aa5c:	335d      	adds	r3, #93	; 0x5d
 800aa5e:	2208      	movs	r2, #8
 800aa60:	701a      	strb	r2, [r3, #0]
}
 800aa62:	e125      	b.n	800acb0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	015a      	lsls	r2, r3, #5
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	4413      	add	r3, r2
 800aa6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa70:	689b      	ldr	r3, [r3, #8]
 800aa72:	f003 0302 	and.w	r3, r3, #2
 800aa76:	2b02      	cmp	r3, #2
 800aa78:	f040 811a 	bne.w	800acb0 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	015a      	lsls	r2, r3, #5
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	4413      	add	r3, r2
 800aa84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa88:	68db      	ldr	r3, [r3, #12]
 800aa8a:	68fa      	ldr	r2, [r7, #12]
 800aa8c:	0151      	lsls	r1, r2, #5
 800aa8e:	693a      	ldr	r2, [r7, #16]
 800aa90:	440a      	add	r2, r1
 800aa92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa96:	f023 0302 	bic.w	r3, r3, #2
 800aa9a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800aa9c:	6879      	ldr	r1, [r7, #4]
 800aa9e:	68fa      	ldr	r2, [r7, #12]
 800aaa0:	4613      	mov	r3, r2
 800aaa2:	009b      	lsls	r3, r3, #2
 800aaa4:	4413      	add	r3, r2
 800aaa6:	00db      	lsls	r3, r3, #3
 800aaa8:	440b      	add	r3, r1
 800aaaa:	335d      	adds	r3, #93	; 0x5d
 800aaac:	781b      	ldrb	r3, [r3, #0]
 800aaae:	2b01      	cmp	r3, #1
 800aab0:	d137      	bne.n	800ab22 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800aab2:	6879      	ldr	r1, [r7, #4]
 800aab4:	68fa      	ldr	r2, [r7, #12]
 800aab6:	4613      	mov	r3, r2
 800aab8:	009b      	lsls	r3, r3, #2
 800aaba:	4413      	add	r3, r2
 800aabc:	00db      	lsls	r3, r3, #3
 800aabe:	440b      	add	r3, r1
 800aac0:	335c      	adds	r3, #92	; 0x5c
 800aac2:	2201      	movs	r2, #1
 800aac4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800aac6:	6879      	ldr	r1, [r7, #4]
 800aac8:	68fa      	ldr	r2, [r7, #12]
 800aaca:	4613      	mov	r3, r2
 800aacc:	009b      	lsls	r3, r3, #2
 800aace:	4413      	add	r3, r2
 800aad0:	00db      	lsls	r3, r3, #3
 800aad2:	440b      	add	r3, r1
 800aad4:	333f      	adds	r3, #63	; 0x3f
 800aad6:	781b      	ldrb	r3, [r3, #0]
 800aad8:	2b02      	cmp	r3, #2
 800aada:	d00b      	beq.n	800aaf4 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800aadc:	6879      	ldr	r1, [r7, #4]
 800aade:	68fa      	ldr	r2, [r7, #12]
 800aae0:	4613      	mov	r3, r2
 800aae2:	009b      	lsls	r3, r3, #2
 800aae4:	4413      	add	r3, r2
 800aae6:	00db      	lsls	r3, r3, #3
 800aae8:	440b      	add	r3, r1
 800aaea:	333f      	adds	r3, #63	; 0x3f
 800aaec:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800aaee:	2b03      	cmp	r3, #3
 800aaf0:	f040 80c5 	bne.w	800ac7e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800aaf4:	6879      	ldr	r1, [r7, #4]
 800aaf6:	68fa      	ldr	r2, [r7, #12]
 800aaf8:	4613      	mov	r3, r2
 800aafa:	009b      	lsls	r3, r3, #2
 800aafc:	4413      	add	r3, r2
 800aafe:	00db      	lsls	r3, r3, #3
 800ab00:	440b      	add	r3, r1
 800ab02:	3351      	adds	r3, #81	; 0x51
 800ab04:	781b      	ldrb	r3, [r3, #0]
 800ab06:	f083 0301 	eor.w	r3, r3, #1
 800ab0a:	b2d8      	uxtb	r0, r3
 800ab0c:	6879      	ldr	r1, [r7, #4]
 800ab0e:	68fa      	ldr	r2, [r7, #12]
 800ab10:	4613      	mov	r3, r2
 800ab12:	009b      	lsls	r3, r3, #2
 800ab14:	4413      	add	r3, r2
 800ab16:	00db      	lsls	r3, r3, #3
 800ab18:	440b      	add	r3, r1
 800ab1a:	3351      	adds	r3, #81	; 0x51
 800ab1c:	4602      	mov	r2, r0
 800ab1e:	701a      	strb	r2, [r3, #0]
 800ab20:	e0ad      	b.n	800ac7e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800ab22:	6879      	ldr	r1, [r7, #4]
 800ab24:	68fa      	ldr	r2, [r7, #12]
 800ab26:	4613      	mov	r3, r2
 800ab28:	009b      	lsls	r3, r3, #2
 800ab2a:	4413      	add	r3, r2
 800ab2c:	00db      	lsls	r3, r3, #3
 800ab2e:	440b      	add	r3, r1
 800ab30:	335d      	adds	r3, #93	; 0x5d
 800ab32:	781b      	ldrb	r3, [r3, #0]
 800ab34:	2b03      	cmp	r3, #3
 800ab36:	d10a      	bne.n	800ab4e <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800ab38:	6879      	ldr	r1, [r7, #4]
 800ab3a:	68fa      	ldr	r2, [r7, #12]
 800ab3c:	4613      	mov	r3, r2
 800ab3e:	009b      	lsls	r3, r3, #2
 800ab40:	4413      	add	r3, r2
 800ab42:	00db      	lsls	r3, r3, #3
 800ab44:	440b      	add	r3, r1
 800ab46:	335c      	adds	r3, #92	; 0x5c
 800ab48:	2202      	movs	r2, #2
 800ab4a:	701a      	strb	r2, [r3, #0]
 800ab4c:	e097      	b.n	800ac7e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800ab4e:	6879      	ldr	r1, [r7, #4]
 800ab50:	68fa      	ldr	r2, [r7, #12]
 800ab52:	4613      	mov	r3, r2
 800ab54:	009b      	lsls	r3, r3, #2
 800ab56:	4413      	add	r3, r2
 800ab58:	00db      	lsls	r3, r3, #3
 800ab5a:	440b      	add	r3, r1
 800ab5c:	335d      	adds	r3, #93	; 0x5d
 800ab5e:	781b      	ldrb	r3, [r3, #0]
 800ab60:	2b04      	cmp	r3, #4
 800ab62:	d10a      	bne.n	800ab7a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800ab64:	6879      	ldr	r1, [r7, #4]
 800ab66:	68fa      	ldr	r2, [r7, #12]
 800ab68:	4613      	mov	r3, r2
 800ab6a:	009b      	lsls	r3, r3, #2
 800ab6c:	4413      	add	r3, r2
 800ab6e:	00db      	lsls	r3, r3, #3
 800ab70:	440b      	add	r3, r1
 800ab72:	335c      	adds	r3, #92	; 0x5c
 800ab74:	2202      	movs	r2, #2
 800ab76:	701a      	strb	r2, [r3, #0]
 800ab78:	e081      	b.n	800ac7e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800ab7a:	6879      	ldr	r1, [r7, #4]
 800ab7c:	68fa      	ldr	r2, [r7, #12]
 800ab7e:	4613      	mov	r3, r2
 800ab80:	009b      	lsls	r3, r3, #2
 800ab82:	4413      	add	r3, r2
 800ab84:	00db      	lsls	r3, r3, #3
 800ab86:	440b      	add	r3, r1
 800ab88:	335d      	adds	r3, #93	; 0x5d
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	2b05      	cmp	r3, #5
 800ab8e:	d10a      	bne.n	800aba6 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800ab90:	6879      	ldr	r1, [r7, #4]
 800ab92:	68fa      	ldr	r2, [r7, #12]
 800ab94:	4613      	mov	r3, r2
 800ab96:	009b      	lsls	r3, r3, #2
 800ab98:	4413      	add	r3, r2
 800ab9a:	00db      	lsls	r3, r3, #3
 800ab9c:	440b      	add	r3, r1
 800ab9e:	335c      	adds	r3, #92	; 0x5c
 800aba0:	2205      	movs	r2, #5
 800aba2:	701a      	strb	r2, [r3, #0]
 800aba4:	e06b      	b.n	800ac7e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800aba6:	6879      	ldr	r1, [r7, #4]
 800aba8:	68fa      	ldr	r2, [r7, #12]
 800abaa:	4613      	mov	r3, r2
 800abac:	009b      	lsls	r3, r3, #2
 800abae:	4413      	add	r3, r2
 800abb0:	00db      	lsls	r3, r3, #3
 800abb2:	440b      	add	r3, r1
 800abb4:	335d      	adds	r3, #93	; 0x5d
 800abb6:	781b      	ldrb	r3, [r3, #0]
 800abb8:	2b06      	cmp	r3, #6
 800abba:	d00a      	beq.n	800abd2 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800abbc:	6879      	ldr	r1, [r7, #4]
 800abbe:	68fa      	ldr	r2, [r7, #12]
 800abc0:	4613      	mov	r3, r2
 800abc2:	009b      	lsls	r3, r3, #2
 800abc4:	4413      	add	r3, r2
 800abc6:	00db      	lsls	r3, r3, #3
 800abc8:	440b      	add	r3, r1
 800abca:	335d      	adds	r3, #93	; 0x5d
 800abcc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800abce:	2b08      	cmp	r3, #8
 800abd0:	d155      	bne.n	800ac7e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800abd2:	6879      	ldr	r1, [r7, #4]
 800abd4:	68fa      	ldr	r2, [r7, #12]
 800abd6:	4613      	mov	r3, r2
 800abd8:	009b      	lsls	r3, r3, #2
 800abda:	4413      	add	r3, r2
 800abdc:	00db      	lsls	r3, r3, #3
 800abde:	440b      	add	r3, r1
 800abe0:	3358      	adds	r3, #88	; 0x58
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	1c59      	adds	r1, r3, #1
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	68fa      	ldr	r2, [r7, #12]
 800abea:	4613      	mov	r3, r2
 800abec:	009b      	lsls	r3, r3, #2
 800abee:	4413      	add	r3, r2
 800abf0:	00db      	lsls	r3, r3, #3
 800abf2:	4403      	add	r3, r0
 800abf4:	3358      	adds	r3, #88	; 0x58
 800abf6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800abf8:	6879      	ldr	r1, [r7, #4]
 800abfa:	68fa      	ldr	r2, [r7, #12]
 800abfc:	4613      	mov	r3, r2
 800abfe:	009b      	lsls	r3, r3, #2
 800ac00:	4413      	add	r3, r2
 800ac02:	00db      	lsls	r3, r3, #3
 800ac04:	440b      	add	r3, r1
 800ac06:	3358      	adds	r3, #88	; 0x58
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	2b03      	cmp	r3, #3
 800ac0c:	d914      	bls.n	800ac38 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800ac0e:	6879      	ldr	r1, [r7, #4]
 800ac10:	68fa      	ldr	r2, [r7, #12]
 800ac12:	4613      	mov	r3, r2
 800ac14:	009b      	lsls	r3, r3, #2
 800ac16:	4413      	add	r3, r2
 800ac18:	00db      	lsls	r3, r3, #3
 800ac1a:	440b      	add	r3, r1
 800ac1c:	3358      	adds	r3, #88	; 0x58
 800ac1e:	2200      	movs	r2, #0
 800ac20:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800ac22:	6879      	ldr	r1, [r7, #4]
 800ac24:	68fa      	ldr	r2, [r7, #12]
 800ac26:	4613      	mov	r3, r2
 800ac28:	009b      	lsls	r3, r3, #2
 800ac2a:	4413      	add	r3, r2
 800ac2c:	00db      	lsls	r3, r3, #3
 800ac2e:	440b      	add	r3, r1
 800ac30:	335c      	adds	r3, #92	; 0x5c
 800ac32:	2204      	movs	r2, #4
 800ac34:	701a      	strb	r2, [r3, #0]
 800ac36:	e009      	b.n	800ac4c <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800ac38:	6879      	ldr	r1, [r7, #4]
 800ac3a:	68fa      	ldr	r2, [r7, #12]
 800ac3c:	4613      	mov	r3, r2
 800ac3e:	009b      	lsls	r3, r3, #2
 800ac40:	4413      	add	r3, r2
 800ac42:	00db      	lsls	r3, r3, #3
 800ac44:	440b      	add	r3, r1
 800ac46:	335c      	adds	r3, #92	; 0x5c
 800ac48:	2202      	movs	r2, #2
 800ac4a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	015a      	lsls	r2, r3, #5
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	4413      	add	r3, r2
 800ac54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ac62:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ac6a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	015a      	lsls	r2, r3, #5
 800ac70:	693b      	ldr	r3, [r7, #16]
 800ac72:	4413      	add	r3, r2
 800ac74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac78:	461a      	mov	r2, r3
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	015a      	lsls	r2, r3, #5
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	4413      	add	r3, r2
 800ac86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac8a:	461a      	mov	r2, r3
 800ac8c:	2302      	movs	r3, #2
 800ac8e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	b2d8      	uxtb	r0, r3
 800ac94:	6879      	ldr	r1, [r7, #4]
 800ac96:	68fa      	ldr	r2, [r7, #12]
 800ac98:	4613      	mov	r3, r2
 800ac9a:	009b      	lsls	r3, r3, #2
 800ac9c:	4413      	add	r3, r2
 800ac9e:	00db      	lsls	r3, r3, #3
 800aca0:	440b      	add	r3, r1
 800aca2:	335c      	adds	r3, #92	; 0x5c
 800aca4:	781b      	ldrb	r3, [r3, #0]
 800aca6:	461a      	mov	r2, r3
 800aca8:	4601      	mov	r1, r0
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f004 f918 	bl	800eee0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800acb0:	bf00      	nop
 800acb2:	3718      	adds	r7, #24
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}

0800acb8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b08a      	sub	sp, #40	; 0x28
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acc8:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	6a1b      	ldr	r3, [r3, #32]
 800acd0:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800acd2:	69fb      	ldr	r3, [r7, #28]
 800acd4:	f003 030f 	and.w	r3, r3, #15
 800acd8:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800acda:	69fb      	ldr	r3, [r7, #28]
 800acdc:	0c5b      	lsrs	r3, r3, #17
 800acde:	f003 030f 	and.w	r3, r3, #15
 800ace2:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800ace4:	69fb      	ldr	r3, [r7, #28]
 800ace6:	091b      	lsrs	r3, r3, #4
 800ace8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800acec:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	2b02      	cmp	r3, #2
 800acf2:	d003      	beq.n	800acfc <HCD_RXQLVL_IRQHandler+0x44>
 800acf4:	2b05      	cmp	r3, #5
 800acf6:	f000 8082 	beq.w	800adfe <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800acfa:	e083      	b.n	800ae04 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d07f      	beq.n	800ae02 <HCD_RXQLVL_IRQHandler+0x14a>
 800ad02:	6879      	ldr	r1, [r7, #4]
 800ad04:	69ba      	ldr	r2, [r7, #24]
 800ad06:	4613      	mov	r3, r2
 800ad08:	009b      	lsls	r3, r3, #2
 800ad0a:	4413      	add	r3, r2
 800ad0c:	00db      	lsls	r3, r3, #3
 800ad0e:	440b      	add	r3, r1
 800ad10:	3344      	adds	r3, #68	; 0x44
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d074      	beq.n	800ae02 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6818      	ldr	r0, [r3, #0]
 800ad1c:	6879      	ldr	r1, [r7, #4]
 800ad1e:	69ba      	ldr	r2, [r7, #24]
 800ad20:	4613      	mov	r3, r2
 800ad22:	009b      	lsls	r3, r3, #2
 800ad24:	4413      	add	r3, r2
 800ad26:	00db      	lsls	r3, r3, #3
 800ad28:	440b      	add	r3, r1
 800ad2a:	3344      	adds	r3, #68	; 0x44
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	693a      	ldr	r2, [r7, #16]
 800ad30:	b292      	uxth	r2, r2
 800ad32:	4619      	mov	r1, r3
 800ad34:	f002 f9b1 	bl	800d09a <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 800ad38:	6879      	ldr	r1, [r7, #4]
 800ad3a:	69ba      	ldr	r2, [r7, #24]
 800ad3c:	4613      	mov	r3, r2
 800ad3e:	009b      	lsls	r3, r3, #2
 800ad40:	4413      	add	r3, r2
 800ad42:	00db      	lsls	r3, r3, #3
 800ad44:	440b      	add	r3, r1
 800ad46:	3344      	adds	r3, #68	; 0x44
 800ad48:	681a      	ldr	r2, [r3, #0]
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	18d1      	adds	r1, r2, r3
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	69ba      	ldr	r2, [r7, #24]
 800ad52:	4613      	mov	r3, r2
 800ad54:	009b      	lsls	r3, r3, #2
 800ad56:	4413      	add	r3, r2
 800ad58:	00db      	lsls	r3, r3, #3
 800ad5a:	4403      	add	r3, r0
 800ad5c:	3344      	adds	r3, #68	; 0x44
 800ad5e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800ad60:	6879      	ldr	r1, [r7, #4]
 800ad62:	69ba      	ldr	r2, [r7, #24]
 800ad64:	4613      	mov	r3, r2
 800ad66:	009b      	lsls	r3, r3, #2
 800ad68:	4413      	add	r3, r2
 800ad6a:	00db      	lsls	r3, r3, #3
 800ad6c:	440b      	add	r3, r1
 800ad6e:	334c      	adds	r3, #76	; 0x4c
 800ad70:	681a      	ldr	r2, [r3, #0]
 800ad72:	693b      	ldr	r3, [r7, #16]
 800ad74:	18d1      	adds	r1, r2, r3
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	69ba      	ldr	r2, [r7, #24]
 800ad7a:	4613      	mov	r3, r2
 800ad7c:	009b      	lsls	r3, r3, #2
 800ad7e:	4413      	add	r3, r2
 800ad80:	00db      	lsls	r3, r3, #3
 800ad82:	4403      	add	r3, r0
 800ad84:	334c      	adds	r3, #76	; 0x4c
 800ad86:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800ad88:	69bb      	ldr	r3, [r7, #24]
 800ad8a:	015a      	lsls	r2, r3, #5
 800ad8c:	6a3b      	ldr	r3, [r7, #32]
 800ad8e:	4413      	add	r3, r2
 800ad90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad94:	691a      	ldr	r2, [r3, #16]
 800ad96:	4b1d      	ldr	r3, [pc, #116]	; (800ae0c <HCD_RXQLVL_IRQHandler+0x154>)
 800ad98:	4013      	ands	r3, r2
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d031      	beq.n	800ae02 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800ad9e:	69bb      	ldr	r3, [r7, #24]
 800ada0:	015a      	lsls	r2, r3, #5
 800ada2:	6a3b      	ldr	r3, [r7, #32]
 800ada4:	4413      	add	r3, r2
 800ada6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800adb4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800adbc:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800adbe:	69bb      	ldr	r3, [r7, #24]
 800adc0:	015a      	lsls	r2, r3, #5
 800adc2:	6a3b      	ldr	r3, [r7, #32]
 800adc4:	4413      	add	r3, r2
 800adc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adca:	461a      	mov	r2, r3
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 800add0:	6879      	ldr	r1, [r7, #4]
 800add2:	69ba      	ldr	r2, [r7, #24]
 800add4:	4613      	mov	r3, r2
 800add6:	009b      	lsls	r3, r3, #2
 800add8:	4413      	add	r3, r2
 800adda:	00db      	lsls	r3, r3, #3
 800addc:	440b      	add	r3, r1
 800adde:	3350      	adds	r3, #80	; 0x50
 800ade0:	781b      	ldrb	r3, [r3, #0]
 800ade2:	f083 0301 	eor.w	r3, r3, #1
 800ade6:	b2d8      	uxtb	r0, r3
 800ade8:	6879      	ldr	r1, [r7, #4]
 800adea:	69ba      	ldr	r2, [r7, #24]
 800adec:	4613      	mov	r3, r2
 800adee:	009b      	lsls	r3, r3, #2
 800adf0:	4413      	add	r3, r2
 800adf2:	00db      	lsls	r3, r3, #3
 800adf4:	440b      	add	r3, r1
 800adf6:	3350      	adds	r3, #80	; 0x50
 800adf8:	4602      	mov	r2, r0
 800adfa:	701a      	strb	r2, [r3, #0]
      break;
 800adfc:	e001      	b.n	800ae02 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800adfe:	bf00      	nop
 800ae00:	e000      	b.n	800ae04 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800ae02:	bf00      	nop
  }
}
 800ae04:	bf00      	nop
 800ae06:	3728      	adds	r7, #40	; 0x28
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bd80      	pop	{r7, pc}
 800ae0c:	1ff80000 	.word	0x1ff80000

0800ae10 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b086      	sub	sp, #24
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800ae22:	693b      	ldr	r3, [r7, #16]
 800ae24:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800ae2c:	693b      	ldr	r3, [r7, #16]
 800ae2e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800ae3c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	f003 0302 	and.w	r3, r3, #2
 800ae44:	2b02      	cmp	r3, #2
 800ae46:	d10b      	bne.n	800ae60 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	f003 0301 	and.w	r3, r3, #1
 800ae4e:	2b01      	cmp	r3, #1
 800ae50:	d102      	bne.n	800ae58 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f004 f828 	bl	800eea8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	f043 0302 	orr.w	r3, r3, #2
 800ae5e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	f003 0308 	and.w	r3, r3, #8
 800ae66:	2b08      	cmp	r3, #8
 800ae68:	d132      	bne.n	800aed0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	f043 0308 	orr.w	r3, r3, #8
 800ae70:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	f003 0304 	and.w	r3, r3, #4
 800ae78:	2b04      	cmp	r3, #4
 800ae7a:	d126      	bne.n	800aeca <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	699b      	ldr	r3, [r3, #24]
 800ae80:	2b02      	cmp	r3, #2
 800ae82:	d113      	bne.n	800aeac <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800ae8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ae8e:	d106      	bne.n	800ae9e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	2102      	movs	r1, #2
 800ae96:	4618      	mov	r0, r3
 800ae98:	f002 fa3a 	bl	800d310 <USB_InitFSLSPClkSel>
 800ae9c:	e011      	b.n	800aec2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	2101      	movs	r1, #1
 800aea4:	4618      	mov	r0, r3
 800aea6:	f002 fa33 	bl	800d310 <USB_InitFSLSPClkSel>
 800aeaa:	e00a      	b.n	800aec2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	68db      	ldr	r3, [r3, #12]
 800aeb0:	2b01      	cmp	r3, #1
 800aeb2:	d106      	bne.n	800aec2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800aeb4:	693b      	ldr	r3, [r7, #16]
 800aeb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aeba:	461a      	mov	r2, r3
 800aebc:	f64e 2360 	movw	r3, #60000	; 0xea60
 800aec0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f004 f81a 	bl	800eefc <HAL_HCD_PortEnabled_Callback>
 800aec8:	e002      	b.n	800aed0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f004 f824 	bl	800ef18 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f003 0320 	and.w	r3, r3, #32
 800aed6:	2b20      	cmp	r3, #32
 800aed8:	d103      	bne.n	800aee2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	f043 0320 	orr.w	r3, r3, #32
 800aee0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800aee2:	693b      	ldr	r3, [r7, #16]
 800aee4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800aee8:	461a      	mov	r2, r3
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	6013      	str	r3, [r2, #0]
}
 800aeee:	bf00      	nop
 800aef0:	3718      	adds	r7, #24
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}
	...

0800aef8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b084      	sub	sp, #16
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d101      	bne.n	800af0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800af06:	2301      	movs	r3, #1
 800af08:	e11f      	b.n	800b14a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af10:	b2db      	uxtb	r3, r3
 800af12:	2b00      	cmp	r3, #0
 800af14:	d106      	bne.n	800af24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2200      	movs	r2, #0
 800af1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f7fd fd96 	bl	8008a50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2224      	movs	r2, #36	; 0x24
 800af28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	681a      	ldr	r2, [r3, #0]
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f022 0201 	bic.w	r2, r2, #1
 800af3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	681a      	ldr	r2, [r3, #0]
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800af4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	681a      	ldr	r2, [r3, #0]
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800af5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800af5c:	f001 f9de 	bl	800c31c <HAL_RCC_GetPCLK1Freq>
 800af60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	685b      	ldr	r3, [r3, #4]
 800af66:	4a7b      	ldr	r2, [pc, #492]	; (800b154 <HAL_I2C_Init+0x25c>)
 800af68:	4293      	cmp	r3, r2
 800af6a:	d807      	bhi.n	800af7c <HAL_I2C_Init+0x84>
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	4a7a      	ldr	r2, [pc, #488]	; (800b158 <HAL_I2C_Init+0x260>)
 800af70:	4293      	cmp	r3, r2
 800af72:	bf94      	ite	ls
 800af74:	2301      	movls	r3, #1
 800af76:	2300      	movhi	r3, #0
 800af78:	b2db      	uxtb	r3, r3
 800af7a:	e006      	b.n	800af8a <HAL_I2C_Init+0x92>
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	4a77      	ldr	r2, [pc, #476]	; (800b15c <HAL_I2C_Init+0x264>)
 800af80:	4293      	cmp	r3, r2
 800af82:	bf94      	ite	ls
 800af84:	2301      	movls	r3, #1
 800af86:	2300      	movhi	r3, #0
 800af88:	b2db      	uxtb	r3, r3
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d001      	beq.n	800af92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800af8e:	2301      	movs	r3, #1
 800af90:	e0db      	b.n	800b14a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	4a72      	ldr	r2, [pc, #456]	; (800b160 <HAL_I2C_Init+0x268>)
 800af96:	fba2 2303 	umull	r2, r3, r2, r3
 800af9a:	0c9b      	lsrs	r3, r3, #18
 800af9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	685b      	ldr	r3, [r3, #4]
 800afa4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	68ba      	ldr	r2, [r7, #8]
 800afae:	430a      	orrs	r2, r1
 800afb0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	6a1b      	ldr	r3, [r3, #32]
 800afb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	685b      	ldr	r3, [r3, #4]
 800afc0:	4a64      	ldr	r2, [pc, #400]	; (800b154 <HAL_I2C_Init+0x25c>)
 800afc2:	4293      	cmp	r3, r2
 800afc4:	d802      	bhi.n	800afcc <HAL_I2C_Init+0xd4>
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	3301      	adds	r3, #1
 800afca:	e009      	b.n	800afe0 <HAL_I2C_Init+0xe8>
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800afd2:	fb02 f303 	mul.w	r3, r2, r3
 800afd6:	4a63      	ldr	r2, [pc, #396]	; (800b164 <HAL_I2C_Init+0x26c>)
 800afd8:	fba2 2303 	umull	r2, r3, r2, r3
 800afdc:	099b      	lsrs	r3, r3, #6
 800afde:	3301      	adds	r3, #1
 800afe0:	687a      	ldr	r2, [r7, #4]
 800afe2:	6812      	ldr	r2, [r2, #0]
 800afe4:	430b      	orrs	r3, r1
 800afe6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	69db      	ldr	r3, [r3, #28]
 800afee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800aff2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	685b      	ldr	r3, [r3, #4]
 800affa:	4956      	ldr	r1, [pc, #344]	; (800b154 <HAL_I2C_Init+0x25c>)
 800affc:	428b      	cmp	r3, r1
 800affe:	d80d      	bhi.n	800b01c <HAL_I2C_Init+0x124>
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	1e59      	subs	r1, r3, #1
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	685b      	ldr	r3, [r3, #4]
 800b008:	005b      	lsls	r3, r3, #1
 800b00a:	fbb1 f3f3 	udiv	r3, r1, r3
 800b00e:	3301      	adds	r3, #1
 800b010:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b014:	2b04      	cmp	r3, #4
 800b016:	bf38      	it	cc
 800b018:	2304      	movcc	r3, #4
 800b01a:	e04f      	b.n	800b0bc <HAL_I2C_Init+0x1c4>
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	689b      	ldr	r3, [r3, #8]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d111      	bne.n	800b048 <HAL_I2C_Init+0x150>
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	1e58      	subs	r0, r3, #1
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6859      	ldr	r1, [r3, #4]
 800b02c:	460b      	mov	r3, r1
 800b02e:	005b      	lsls	r3, r3, #1
 800b030:	440b      	add	r3, r1
 800b032:	fbb0 f3f3 	udiv	r3, r0, r3
 800b036:	3301      	adds	r3, #1
 800b038:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	bf0c      	ite	eq
 800b040:	2301      	moveq	r3, #1
 800b042:	2300      	movne	r3, #0
 800b044:	b2db      	uxtb	r3, r3
 800b046:	e012      	b.n	800b06e <HAL_I2C_Init+0x176>
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	1e58      	subs	r0, r3, #1
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	6859      	ldr	r1, [r3, #4]
 800b050:	460b      	mov	r3, r1
 800b052:	009b      	lsls	r3, r3, #2
 800b054:	440b      	add	r3, r1
 800b056:	0099      	lsls	r1, r3, #2
 800b058:	440b      	add	r3, r1
 800b05a:	fbb0 f3f3 	udiv	r3, r0, r3
 800b05e:	3301      	adds	r3, #1
 800b060:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b064:	2b00      	cmp	r3, #0
 800b066:	bf0c      	ite	eq
 800b068:	2301      	moveq	r3, #1
 800b06a:	2300      	movne	r3, #0
 800b06c:	b2db      	uxtb	r3, r3
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d001      	beq.n	800b076 <HAL_I2C_Init+0x17e>
 800b072:	2301      	movs	r3, #1
 800b074:	e022      	b.n	800b0bc <HAL_I2C_Init+0x1c4>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	689b      	ldr	r3, [r3, #8]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d10e      	bne.n	800b09c <HAL_I2C_Init+0x1a4>
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	1e58      	subs	r0, r3, #1
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6859      	ldr	r1, [r3, #4]
 800b086:	460b      	mov	r3, r1
 800b088:	005b      	lsls	r3, r3, #1
 800b08a:	440b      	add	r3, r1
 800b08c:	fbb0 f3f3 	udiv	r3, r0, r3
 800b090:	3301      	adds	r3, #1
 800b092:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b096:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b09a:	e00f      	b.n	800b0bc <HAL_I2C_Init+0x1c4>
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	1e58      	subs	r0, r3, #1
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6859      	ldr	r1, [r3, #4]
 800b0a4:	460b      	mov	r3, r1
 800b0a6:	009b      	lsls	r3, r3, #2
 800b0a8:	440b      	add	r3, r1
 800b0aa:	0099      	lsls	r1, r3, #2
 800b0ac:	440b      	add	r3, r1
 800b0ae:	fbb0 f3f3 	udiv	r3, r0, r3
 800b0b2:	3301      	adds	r3, #1
 800b0b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b0b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b0bc:	6879      	ldr	r1, [r7, #4]
 800b0be:	6809      	ldr	r1, [r1, #0]
 800b0c0:	4313      	orrs	r3, r2
 800b0c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	69da      	ldr	r2, [r3, #28]
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6a1b      	ldr	r3, [r3, #32]
 800b0d6:	431a      	orrs	r2, r3
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	430a      	orrs	r2, r1
 800b0de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	689b      	ldr	r3, [r3, #8]
 800b0e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b0ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b0ee:	687a      	ldr	r2, [r7, #4]
 800b0f0:	6911      	ldr	r1, [r2, #16]
 800b0f2:	687a      	ldr	r2, [r7, #4]
 800b0f4:	68d2      	ldr	r2, [r2, #12]
 800b0f6:	4311      	orrs	r1, r2
 800b0f8:	687a      	ldr	r2, [r7, #4]
 800b0fa:	6812      	ldr	r2, [r2, #0]
 800b0fc:	430b      	orrs	r3, r1
 800b0fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	68db      	ldr	r3, [r3, #12]
 800b106:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	695a      	ldr	r2, [r3, #20]
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	699b      	ldr	r3, [r3, #24]
 800b112:	431a      	orrs	r2, r3
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	430a      	orrs	r2, r1
 800b11a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	681a      	ldr	r2, [r3, #0]
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f042 0201 	orr.w	r2, r2, #1
 800b12a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2200      	movs	r2, #0
 800b130:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2220      	movs	r2, #32
 800b136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2200      	movs	r2, #0
 800b13e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2200      	movs	r2, #0
 800b144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b148:	2300      	movs	r3, #0
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	3710      	adds	r7, #16
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}
 800b152:	bf00      	nop
 800b154:	000186a0 	.word	0x000186a0
 800b158:	001e847f 	.word	0x001e847f
 800b15c:	003d08ff 	.word	0x003d08ff
 800b160:	431bde83 	.word	0x431bde83
 800b164:	10624dd3 	.word	0x10624dd3

0800b168 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b088      	sub	sp, #32
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d101      	bne.n	800b17a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800b176:	2301      	movs	r3, #1
 800b178:	e128      	b.n	800b3cc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b180:	b2db      	uxtb	r3, r3
 800b182:	2b00      	cmp	r3, #0
 800b184:	d109      	bne.n	800b19a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2200      	movs	r2, #0
 800b18a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	4a90      	ldr	r2, [pc, #576]	; (800b3d4 <HAL_I2S_Init+0x26c>)
 800b192:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f7fd fca3 	bl	8008ae0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2202      	movs	r2, #2
 800b19e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	69db      	ldr	r3, [r3, #28]
 800b1a8:	687a      	ldr	r2, [r7, #4]
 800b1aa:	6812      	ldr	r2, [r2, #0]
 800b1ac:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800b1b0:	f023 030f 	bic.w	r3, r3, #15
 800b1b4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	2202      	movs	r2, #2
 800b1bc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	695b      	ldr	r3, [r3, #20]
 800b1c2:	2b02      	cmp	r3, #2
 800b1c4:	d060      	beq.n	800b288 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	68db      	ldr	r3, [r3, #12]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d102      	bne.n	800b1d4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800b1ce:	2310      	movs	r3, #16
 800b1d0:	617b      	str	r3, [r7, #20]
 800b1d2:	e001      	b.n	800b1d8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800b1d4:	2320      	movs	r3, #32
 800b1d6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	689b      	ldr	r3, [r3, #8]
 800b1dc:	2b20      	cmp	r3, #32
 800b1de:	d802      	bhi.n	800b1e6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 800b1e0:	697b      	ldr	r3, [r7, #20]
 800b1e2:	005b      	lsls	r3, r3, #1
 800b1e4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800b1e6:	2001      	movs	r0, #1
 800b1e8:	f001 f9a2 	bl	800c530 <HAL_RCCEx_GetPeriphCLKFreq>
 800b1ec:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	691b      	ldr	r3, [r3, #16]
 800b1f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b1f6:	d125      	bne.n	800b244 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	68db      	ldr	r3, [r3, #12]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d010      	beq.n	800b222 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	009b      	lsls	r3, r3, #2
 800b204:	68fa      	ldr	r2, [r7, #12]
 800b206:	fbb2 f2f3 	udiv	r2, r2, r3
 800b20a:	4613      	mov	r3, r2
 800b20c:	009b      	lsls	r3, r3, #2
 800b20e:	4413      	add	r3, r2
 800b210:	005b      	lsls	r3, r3, #1
 800b212:	461a      	mov	r2, r3
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	695b      	ldr	r3, [r3, #20]
 800b218:	fbb2 f3f3 	udiv	r3, r2, r3
 800b21c:	3305      	adds	r3, #5
 800b21e:	613b      	str	r3, [r7, #16]
 800b220:	e01f      	b.n	800b262 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	00db      	lsls	r3, r3, #3
 800b226:	68fa      	ldr	r2, [r7, #12]
 800b228:	fbb2 f2f3 	udiv	r2, r2, r3
 800b22c:	4613      	mov	r3, r2
 800b22e:	009b      	lsls	r3, r3, #2
 800b230:	4413      	add	r3, r2
 800b232:	005b      	lsls	r3, r3, #1
 800b234:	461a      	mov	r2, r3
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	695b      	ldr	r3, [r3, #20]
 800b23a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b23e:	3305      	adds	r3, #5
 800b240:	613b      	str	r3, [r7, #16]
 800b242:	e00e      	b.n	800b262 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800b244:	68fa      	ldr	r2, [r7, #12]
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	fbb2 f2f3 	udiv	r2, r2, r3
 800b24c:	4613      	mov	r3, r2
 800b24e:	009b      	lsls	r3, r3, #2
 800b250:	4413      	add	r3, r2
 800b252:	005b      	lsls	r3, r3, #1
 800b254:	461a      	mov	r2, r3
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	695b      	ldr	r3, [r3, #20]
 800b25a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b25e:	3305      	adds	r3, #5
 800b260:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	4a5c      	ldr	r2, [pc, #368]	; (800b3d8 <HAL_I2S_Init+0x270>)
 800b266:	fba2 2303 	umull	r2, r3, r2, r3
 800b26a:	08db      	lsrs	r3, r3, #3
 800b26c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800b26e:	693b      	ldr	r3, [r7, #16]
 800b270:	f003 0301 	and.w	r3, r3, #1
 800b274:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800b276:	693a      	ldr	r2, [r7, #16]
 800b278:	69bb      	ldr	r3, [r7, #24]
 800b27a:	1ad3      	subs	r3, r2, r3
 800b27c:	085b      	lsrs	r3, r3, #1
 800b27e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800b280:	69bb      	ldr	r3, [r7, #24]
 800b282:	021b      	lsls	r3, r3, #8
 800b284:	61bb      	str	r3, [r7, #24]
 800b286:	e003      	b.n	800b290 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800b288:	2302      	movs	r3, #2
 800b28a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800b28c:	2300      	movs	r3, #0
 800b28e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800b290:	69fb      	ldr	r3, [r7, #28]
 800b292:	2b01      	cmp	r3, #1
 800b294:	d902      	bls.n	800b29c <HAL_I2S_Init+0x134>
 800b296:	69fb      	ldr	r3, [r7, #28]
 800b298:	2bff      	cmp	r3, #255	; 0xff
 800b29a:	d907      	bls.n	800b2ac <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2a0:	f043 0210 	orr.w	r2, r3, #16
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	e08f      	b.n	800b3cc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	691a      	ldr	r2, [r3, #16]
 800b2b0:	69bb      	ldr	r3, [r7, #24]
 800b2b2:	ea42 0103 	orr.w	r1, r2, r3
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	69fa      	ldr	r2, [r7, #28]
 800b2bc:	430a      	orrs	r2, r1
 800b2be:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	69db      	ldr	r3, [r3, #28]
 800b2c6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800b2ca:	f023 030f 	bic.w	r3, r3, #15
 800b2ce:	687a      	ldr	r2, [r7, #4]
 800b2d0:	6851      	ldr	r1, [r2, #4]
 800b2d2:	687a      	ldr	r2, [r7, #4]
 800b2d4:	6892      	ldr	r2, [r2, #8]
 800b2d6:	4311      	orrs	r1, r2
 800b2d8:	687a      	ldr	r2, [r7, #4]
 800b2da:	68d2      	ldr	r2, [r2, #12]
 800b2dc:	4311      	orrs	r1, r2
 800b2de:	687a      	ldr	r2, [r7, #4]
 800b2e0:	6992      	ldr	r2, [r2, #24]
 800b2e2:	430a      	orrs	r2, r1
 800b2e4:	431a      	orrs	r2, r3
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b2ee:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	6a1b      	ldr	r3, [r3, #32]
 800b2f4:	2b01      	cmp	r3, #1
 800b2f6:	d161      	bne.n	800b3bc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	4a38      	ldr	r2, [pc, #224]	; (800b3dc <HAL_I2S_Init+0x274>)
 800b2fc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	4a37      	ldr	r2, [pc, #220]	; (800b3e0 <HAL_I2S_Init+0x278>)
 800b304:	4293      	cmp	r3, r2
 800b306:	d101      	bne.n	800b30c <HAL_I2S_Init+0x1a4>
 800b308:	4b36      	ldr	r3, [pc, #216]	; (800b3e4 <HAL_I2S_Init+0x27c>)
 800b30a:	e001      	b.n	800b310 <HAL_I2S_Init+0x1a8>
 800b30c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b310:	69db      	ldr	r3, [r3, #28]
 800b312:	687a      	ldr	r2, [r7, #4]
 800b314:	6812      	ldr	r2, [r2, #0]
 800b316:	4932      	ldr	r1, [pc, #200]	; (800b3e0 <HAL_I2S_Init+0x278>)
 800b318:	428a      	cmp	r2, r1
 800b31a:	d101      	bne.n	800b320 <HAL_I2S_Init+0x1b8>
 800b31c:	4a31      	ldr	r2, [pc, #196]	; (800b3e4 <HAL_I2S_Init+0x27c>)
 800b31e:	e001      	b.n	800b324 <HAL_I2S_Init+0x1bc>
 800b320:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800b324:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800b328:	f023 030f 	bic.w	r3, r3, #15
 800b32c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	4a2b      	ldr	r2, [pc, #172]	; (800b3e0 <HAL_I2S_Init+0x278>)
 800b334:	4293      	cmp	r3, r2
 800b336:	d101      	bne.n	800b33c <HAL_I2S_Init+0x1d4>
 800b338:	4b2a      	ldr	r3, [pc, #168]	; (800b3e4 <HAL_I2S_Init+0x27c>)
 800b33a:	e001      	b.n	800b340 <HAL_I2S_Init+0x1d8>
 800b33c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b340:	2202      	movs	r2, #2
 800b342:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	4a25      	ldr	r2, [pc, #148]	; (800b3e0 <HAL_I2S_Init+0x278>)
 800b34a:	4293      	cmp	r3, r2
 800b34c:	d101      	bne.n	800b352 <HAL_I2S_Init+0x1ea>
 800b34e:	4b25      	ldr	r3, [pc, #148]	; (800b3e4 <HAL_I2S_Init+0x27c>)
 800b350:	e001      	b.n	800b356 <HAL_I2S_Init+0x1ee>
 800b352:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b356:	69db      	ldr	r3, [r3, #28]
 800b358:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b362:	d003      	beq.n	800b36c <HAL_I2S_Init+0x204>
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	685b      	ldr	r3, [r3, #4]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d103      	bne.n	800b374 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800b36c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b370:	613b      	str	r3, [r7, #16]
 800b372:	e001      	b.n	800b378 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800b374:	2300      	movs	r3, #0
 800b376:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800b378:	693b      	ldr	r3, [r7, #16]
 800b37a:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	689b      	ldr	r3, [r3, #8]
 800b380:	b299      	uxth	r1, r3
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	68db      	ldr	r3, [r3, #12]
 800b386:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	699b      	ldr	r3, [r3, #24]
 800b38c:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800b38e:	4303      	orrs	r3, r0
 800b390:	b29b      	uxth	r3, r3
 800b392:	430b      	orrs	r3, r1
 800b394:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800b396:	4313      	orrs	r3, r2
 800b398:	b29a      	uxth	r2, r3
 800b39a:	897b      	ldrh	r3, [r7, #10]
 800b39c:	4313      	orrs	r3, r2
 800b39e:	b29b      	uxth	r3, r3
 800b3a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b3a4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	4a0d      	ldr	r2, [pc, #52]	; (800b3e0 <HAL_I2S_Init+0x278>)
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	d101      	bne.n	800b3b4 <HAL_I2S_Init+0x24c>
 800b3b0:	4b0c      	ldr	r3, [pc, #48]	; (800b3e4 <HAL_I2S_Init+0x27c>)
 800b3b2:	e001      	b.n	800b3b8 <HAL_I2S_Init+0x250>
 800b3b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b3b8:	897a      	ldrh	r2, [r7, #10]
 800b3ba:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2201      	movs	r2, #1
 800b3c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800b3ca:	2300      	movs	r3, #0
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	3720      	adds	r7, #32
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}
 800b3d4:	0800b4df 	.word	0x0800b4df
 800b3d8:	cccccccd 	.word	0xcccccccd
 800b3dc:	0800b5f5 	.word	0x0800b5f5
 800b3e0:	40003800 	.word	0x40003800
 800b3e4:	40003400 	.word	0x40003400

0800b3e8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	b083      	sub	sp, #12
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800b3f0:	bf00      	nop
 800b3f2:	370c      	adds	r7, #12
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr

0800b3fc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b083      	sub	sp, #12
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800b404:	bf00      	nop
 800b406:	370c      	adds	r7, #12
 800b408:	46bd      	mov	sp, r7
 800b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40e:	4770      	bx	lr

0800b410 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800b410:	b480      	push	{r7}
 800b412:	b083      	sub	sp, #12
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800b418:	bf00      	nop
 800b41a:	370c      	adds	r7, #12
 800b41c:	46bd      	mov	sp, r7
 800b41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b422:	4770      	bx	lr

0800b424 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b082      	sub	sp, #8
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b430:	881a      	ldrh	r2, [r3, #0]
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b43c:	1c9a      	adds	r2, r3, #2
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b446:	b29b      	uxth	r3, r3
 800b448:	3b01      	subs	r3, #1
 800b44a:	b29a      	uxth	r2, r3
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b454:	b29b      	uxth	r3, r3
 800b456:	2b00      	cmp	r3, #0
 800b458:	d10e      	bne.n	800b478 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	685a      	ldr	r2, [r3, #4]
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b468:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2201      	movs	r2, #1
 800b46e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f7ff ffb8 	bl	800b3e8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800b478:	bf00      	nop
 800b47a:	3708      	adds	r7, #8
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}

0800b480 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b082      	sub	sp, #8
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	68da      	ldr	r2, [r3, #12]
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b492:	b292      	uxth	r2, r2
 800b494:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b49a:	1c9a      	adds	r2, r3, #2
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b4a4:	b29b      	uxth	r3, r3
 800b4a6:	3b01      	subs	r3, #1
 800b4a8:	b29a      	uxth	r2, r3
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b4b2:	b29b      	uxth	r3, r3
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d10e      	bne.n	800b4d6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	685a      	ldr	r2, [r3, #4]
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800b4c6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2201      	movs	r2, #1
 800b4cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800b4d0:	6878      	ldr	r0, [r7, #4]
 800b4d2:	f7ff ff93 	bl	800b3fc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800b4d6:	bf00      	nop
 800b4d8:	3708      	adds	r7, #8
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}

0800b4de <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800b4de:	b580      	push	{r7, lr}
 800b4e0:	b086      	sub	sp, #24
 800b4e2:	af00      	add	r7, sp, #0
 800b4e4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	689b      	ldr	r3, [r3, #8]
 800b4ec:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b4f4:	b2db      	uxtb	r3, r3
 800b4f6:	2b04      	cmp	r3, #4
 800b4f8:	d13a      	bne.n	800b570 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800b4fa:	697b      	ldr	r3, [r7, #20]
 800b4fc:	f003 0301 	and.w	r3, r3, #1
 800b500:	2b01      	cmp	r3, #1
 800b502:	d109      	bne.n	800b518 <I2S_IRQHandler+0x3a>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	685b      	ldr	r3, [r3, #4]
 800b50a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b50e:	2b40      	cmp	r3, #64	; 0x40
 800b510:	d102      	bne.n	800b518 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f7ff ffb4 	bl	800b480 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800b518:	697b      	ldr	r3, [r7, #20]
 800b51a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b51e:	2b40      	cmp	r3, #64	; 0x40
 800b520:	d126      	bne.n	800b570 <I2S_IRQHandler+0x92>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	685b      	ldr	r3, [r3, #4]
 800b528:	f003 0320 	and.w	r3, r3, #32
 800b52c:	2b20      	cmp	r3, #32
 800b52e:	d11f      	bne.n	800b570 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	685a      	ldr	r2, [r3, #4]
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800b53e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800b540:	2300      	movs	r3, #0
 800b542:	613b      	str	r3, [r7, #16]
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	68db      	ldr	r3, [r3, #12]
 800b54a:	613b      	str	r3, [r7, #16]
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	689b      	ldr	r3, [r3, #8]
 800b552:	613b      	str	r3, [r7, #16]
 800b554:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2201      	movs	r2, #1
 800b55a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b562:	f043 0202 	orr.w	r2, r3, #2
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f7ff ff50 	bl	800b410 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b576:	b2db      	uxtb	r3, r3
 800b578:	2b03      	cmp	r3, #3
 800b57a:	d136      	bne.n	800b5ea <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800b57c:	697b      	ldr	r3, [r7, #20]
 800b57e:	f003 0302 	and.w	r3, r3, #2
 800b582:	2b02      	cmp	r3, #2
 800b584:	d109      	bne.n	800b59a <I2S_IRQHandler+0xbc>
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	685b      	ldr	r3, [r3, #4]
 800b58c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b590:	2b80      	cmp	r3, #128	; 0x80
 800b592:	d102      	bne.n	800b59a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f7ff ff45 	bl	800b424 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800b59a:	697b      	ldr	r3, [r7, #20]
 800b59c:	f003 0308 	and.w	r3, r3, #8
 800b5a0:	2b08      	cmp	r3, #8
 800b5a2:	d122      	bne.n	800b5ea <I2S_IRQHandler+0x10c>
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	685b      	ldr	r3, [r3, #4]
 800b5aa:	f003 0320 	and.w	r3, r3, #32
 800b5ae:	2b20      	cmp	r3, #32
 800b5b0:	d11b      	bne.n	800b5ea <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	685a      	ldr	r2, [r3, #4]
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b5c0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	60fb      	str	r3, [r7, #12]
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	689b      	ldr	r3, [r3, #8]
 800b5cc:	60fb      	str	r3, [r7, #12]
 800b5ce:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2201      	movs	r2, #1
 800b5d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5dc:	f043 0204 	orr.w	r2, r3, #4
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f7ff ff13 	bl	800b410 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800b5ea:	bf00      	nop
 800b5ec:	3718      	adds	r7, #24
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}
	...

0800b5f4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b088      	sub	sp, #32
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	689b      	ldr	r3, [r3, #8]
 800b602:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	4aa2      	ldr	r2, [pc, #648]	; (800b894 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800b60a:	4293      	cmp	r3, r2
 800b60c:	d101      	bne.n	800b612 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800b60e:	4ba2      	ldr	r3, [pc, #648]	; (800b898 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800b610:	e001      	b.n	800b616 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800b612:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b616:	689b      	ldr	r3, [r3, #8]
 800b618:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	685b      	ldr	r3, [r3, #4]
 800b620:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	4a9b      	ldr	r2, [pc, #620]	; (800b894 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800b628:	4293      	cmp	r3, r2
 800b62a:	d101      	bne.n	800b630 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800b62c:	4b9a      	ldr	r3, [pc, #616]	; (800b898 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800b62e:	e001      	b.n	800b634 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800b630:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b634:	685b      	ldr	r3, [r3, #4]
 800b636:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	685b      	ldr	r3, [r3, #4]
 800b63c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b640:	d004      	beq.n	800b64c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	685b      	ldr	r3, [r3, #4]
 800b646:	2b00      	cmp	r3, #0
 800b648:	f040 8099 	bne.w	800b77e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800b64c:	69fb      	ldr	r3, [r7, #28]
 800b64e:	f003 0302 	and.w	r3, r3, #2
 800b652:	2b02      	cmp	r3, #2
 800b654:	d107      	bne.n	800b666 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d002      	beq.n	800b666 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f000 f925 	bl	800b8b0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800b666:	69bb      	ldr	r3, [r7, #24]
 800b668:	f003 0301 	and.w	r3, r3, #1
 800b66c:	2b01      	cmp	r3, #1
 800b66e:	d107      	bne.n	800b680 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b676:	2b00      	cmp	r3, #0
 800b678:	d002      	beq.n	800b680 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f000 f9c8 	bl	800ba10 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800b680:	69bb      	ldr	r3, [r7, #24]
 800b682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b686:	2b40      	cmp	r3, #64	; 0x40
 800b688:	d13a      	bne.n	800b700 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800b68a:	693b      	ldr	r3, [r7, #16]
 800b68c:	f003 0320 	and.w	r3, r3, #32
 800b690:	2b00      	cmp	r3, #0
 800b692:	d035      	beq.n	800b700 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	4a7e      	ldr	r2, [pc, #504]	; (800b894 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800b69a:	4293      	cmp	r3, r2
 800b69c:	d101      	bne.n	800b6a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800b69e:	4b7e      	ldr	r3, [pc, #504]	; (800b898 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800b6a0:	e001      	b.n	800b6a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800b6a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b6a6:	685a      	ldr	r2, [r3, #4]
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	4979      	ldr	r1, [pc, #484]	; (800b894 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800b6ae:	428b      	cmp	r3, r1
 800b6b0:	d101      	bne.n	800b6b6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800b6b2:	4b79      	ldr	r3, [pc, #484]	; (800b898 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800b6b4:	e001      	b.n	800b6ba <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800b6b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b6ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800b6be:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	685a      	ldr	r2, [r3, #4]
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b6ce:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	60fb      	str	r3, [r7, #12]
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	68db      	ldr	r3, [r3, #12]
 800b6da:	60fb      	str	r3, [r7, #12]
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	689b      	ldr	r3, [r3, #8]
 800b6e2:	60fb      	str	r3, [r7, #12]
 800b6e4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2201      	movs	r2, #1
 800b6ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6f2:	f043 0202 	orr.w	r2, r3, #2
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f7ff fe88 	bl	800b410 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800b700:	69fb      	ldr	r3, [r7, #28]
 800b702:	f003 0308 	and.w	r3, r3, #8
 800b706:	2b08      	cmp	r3, #8
 800b708:	f040 80be 	bne.w	800b888 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800b70c:	697b      	ldr	r3, [r7, #20]
 800b70e:	f003 0320 	and.w	r3, r3, #32
 800b712:	2b00      	cmp	r3, #0
 800b714:	f000 80b8 	beq.w	800b888 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	685a      	ldr	r2, [r3, #4]
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b726:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	4a59      	ldr	r2, [pc, #356]	; (800b894 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800b72e:	4293      	cmp	r3, r2
 800b730:	d101      	bne.n	800b736 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800b732:	4b59      	ldr	r3, [pc, #356]	; (800b898 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800b734:	e001      	b.n	800b73a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800b736:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b73a:	685a      	ldr	r2, [r3, #4]
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	4954      	ldr	r1, [pc, #336]	; (800b894 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800b742:	428b      	cmp	r3, r1
 800b744:	d101      	bne.n	800b74a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800b746:	4b54      	ldr	r3, [pc, #336]	; (800b898 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800b748:	e001      	b.n	800b74e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800b74a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b74e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800b752:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800b754:	2300      	movs	r3, #0
 800b756:	60bb      	str	r3, [r7, #8]
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	689b      	ldr	r3, [r3, #8]
 800b75e:	60bb      	str	r3, [r7, #8]
 800b760:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2201      	movs	r2, #1
 800b766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b76e:	f043 0204 	orr.w	r2, r3, #4
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	f7ff fe4a 	bl	800b410 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800b77c:	e084      	b.n	800b888 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800b77e:	69bb      	ldr	r3, [r7, #24]
 800b780:	f003 0302 	and.w	r3, r3, #2
 800b784:	2b02      	cmp	r3, #2
 800b786:	d107      	bne.n	800b798 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d002      	beq.n	800b798 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f000 f8be 	bl	800b914 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800b798:	69fb      	ldr	r3, [r7, #28]
 800b79a:	f003 0301 	and.w	r3, r3, #1
 800b79e:	2b01      	cmp	r3, #1
 800b7a0:	d107      	bne.n	800b7b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800b7a2:	697b      	ldr	r3, [r7, #20]
 800b7a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d002      	beq.n	800b7b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f000 f8fd 	bl	800b9ac <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800b7b2:	69fb      	ldr	r3, [r7, #28]
 800b7b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7b8:	2b40      	cmp	r3, #64	; 0x40
 800b7ba:	d12f      	bne.n	800b81c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800b7bc:	697b      	ldr	r3, [r7, #20]
 800b7be:	f003 0320 	and.w	r3, r3, #32
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d02a      	beq.n	800b81c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	685a      	ldr	r2, [r3, #4]
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800b7d4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	4a2e      	ldr	r2, [pc, #184]	; (800b894 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800b7dc:	4293      	cmp	r3, r2
 800b7de:	d101      	bne.n	800b7e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800b7e0:	4b2d      	ldr	r3, [pc, #180]	; (800b898 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800b7e2:	e001      	b.n	800b7e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800b7e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b7e8:	685a      	ldr	r2, [r3, #4]
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	4929      	ldr	r1, [pc, #164]	; (800b894 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800b7f0:	428b      	cmp	r3, r1
 800b7f2:	d101      	bne.n	800b7f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800b7f4:	4b28      	ldr	r3, [pc, #160]	; (800b898 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800b7f6:	e001      	b.n	800b7fc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800b7f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b7fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b800:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	2201      	movs	r2, #1
 800b806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b80e:	f043 0202 	orr.w	r2, r3, #2
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f7ff fdfa 	bl	800b410 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800b81c:	69bb      	ldr	r3, [r7, #24]
 800b81e:	f003 0308 	and.w	r3, r3, #8
 800b822:	2b08      	cmp	r3, #8
 800b824:	d131      	bne.n	800b88a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	f003 0320 	and.w	r3, r3, #32
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d02c      	beq.n	800b88a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	4a17      	ldr	r2, [pc, #92]	; (800b894 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800b836:	4293      	cmp	r3, r2
 800b838:	d101      	bne.n	800b83e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800b83a:	4b17      	ldr	r3, [pc, #92]	; (800b898 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800b83c:	e001      	b.n	800b842 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800b83e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b842:	685a      	ldr	r2, [r3, #4]
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	4912      	ldr	r1, [pc, #72]	; (800b894 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800b84a:	428b      	cmp	r3, r1
 800b84c:	d101      	bne.n	800b852 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800b84e:	4b12      	ldr	r3, [pc, #72]	; (800b898 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800b850:	e001      	b.n	800b856 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800b852:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b856:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b85a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	685a      	ldr	r2, [r3, #4]
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800b86a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2201      	movs	r2, #1
 800b870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b878:	f043 0204 	orr.w	r2, r3, #4
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f7ff fdc5 	bl	800b410 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800b886:	e000      	b.n	800b88a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800b888:	bf00      	nop
}
 800b88a:	bf00      	nop
 800b88c:	3720      	adds	r7, #32
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}
 800b892:	bf00      	nop
 800b894:	40003800 	.word	0x40003800
 800b898:	40003400 	.word	0x40003400

0800b89c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800b89c:	b480      	push	{r7}
 800b89e:	b083      	sub	sp, #12
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800b8a4:	bf00      	nop
 800b8a6:	370c      	adds	r7, #12
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ae:	4770      	bx	lr

0800b8b0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b082      	sub	sp, #8
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8bc:	1c99      	adds	r1, r3, #2
 800b8be:	687a      	ldr	r2, [r7, #4]
 800b8c0:	6251      	str	r1, [r2, #36]	; 0x24
 800b8c2:	881a      	ldrh	r2, [r3, #0]
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8ce:	b29b      	uxth	r3, r3
 800b8d0:	3b01      	subs	r3, #1
 800b8d2:	b29a      	uxth	r2, r3
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8dc:	b29b      	uxth	r3, r3
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d113      	bne.n	800b90a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	685a      	ldr	r2, [r3, #4]
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b8f0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b8f6:	b29b      	uxth	r3, r3
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d106      	bne.n	800b90a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2201      	movs	r2, #1
 800b900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f7ff ffc9 	bl	800b89c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800b90a:	bf00      	nop
 800b90c:	3708      	adds	r7, #8
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}
	...

0800b914 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b082      	sub	sp, #8
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b920:	1c99      	adds	r1, r3, #2
 800b922:	687a      	ldr	r2, [r7, #4]
 800b924:	6251      	str	r1, [r2, #36]	; 0x24
 800b926:	8819      	ldrh	r1, [r3, #0]
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	4a1d      	ldr	r2, [pc, #116]	; (800b9a4 <I2SEx_TxISR_I2SExt+0x90>)
 800b92e:	4293      	cmp	r3, r2
 800b930:	d101      	bne.n	800b936 <I2SEx_TxISR_I2SExt+0x22>
 800b932:	4b1d      	ldr	r3, [pc, #116]	; (800b9a8 <I2SEx_TxISR_I2SExt+0x94>)
 800b934:	e001      	b.n	800b93a <I2SEx_TxISR_I2SExt+0x26>
 800b936:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b93a:	460a      	mov	r2, r1
 800b93c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b942:	b29b      	uxth	r3, r3
 800b944:	3b01      	subs	r3, #1
 800b946:	b29a      	uxth	r2, r3
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b950:	b29b      	uxth	r3, r3
 800b952:	2b00      	cmp	r3, #0
 800b954:	d121      	bne.n	800b99a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	4a12      	ldr	r2, [pc, #72]	; (800b9a4 <I2SEx_TxISR_I2SExt+0x90>)
 800b95c:	4293      	cmp	r3, r2
 800b95e:	d101      	bne.n	800b964 <I2SEx_TxISR_I2SExt+0x50>
 800b960:	4b11      	ldr	r3, [pc, #68]	; (800b9a8 <I2SEx_TxISR_I2SExt+0x94>)
 800b962:	e001      	b.n	800b968 <I2SEx_TxISR_I2SExt+0x54>
 800b964:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b968:	685a      	ldr	r2, [r3, #4]
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	490d      	ldr	r1, [pc, #52]	; (800b9a4 <I2SEx_TxISR_I2SExt+0x90>)
 800b970:	428b      	cmp	r3, r1
 800b972:	d101      	bne.n	800b978 <I2SEx_TxISR_I2SExt+0x64>
 800b974:	4b0c      	ldr	r3, [pc, #48]	; (800b9a8 <I2SEx_TxISR_I2SExt+0x94>)
 800b976:	e001      	b.n	800b97c <I2SEx_TxISR_I2SExt+0x68>
 800b978:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b97c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b980:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b986:	b29b      	uxth	r3, r3
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d106      	bne.n	800b99a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2201      	movs	r2, #1
 800b990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	f7ff ff81 	bl	800b89c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800b99a:	bf00      	nop
 800b99c:	3708      	adds	r7, #8
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}
 800b9a2:	bf00      	nop
 800b9a4:	40003800 	.word	0x40003800
 800b9a8:	40003400 	.word	0x40003400

0800b9ac <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b082      	sub	sp, #8
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	68d8      	ldr	r0, [r3, #12]
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9be:	1c99      	adds	r1, r3, #2
 800b9c0:	687a      	ldr	r2, [r7, #4]
 800b9c2:	62d1      	str	r1, [r2, #44]	; 0x2c
 800b9c4:	b282      	uxth	r2, r0
 800b9c6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b9cc:	b29b      	uxth	r3, r3
 800b9ce:	3b01      	subs	r3, #1
 800b9d0:	b29a      	uxth	r2, r3
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b9da:	b29b      	uxth	r3, r3
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d113      	bne.n	800ba08 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	685a      	ldr	r2, [r3, #4]
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800b9ee:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9f4:	b29b      	uxth	r3, r3
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d106      	bne.n	800ba08 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2201      	movs	r2, #1
 800b9fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f7ff ff4a 	bl	800b89c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800ba08:	bf00      	nop
 800ba0a:	3708      	adds	r7, #8
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}

0800ba10 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b082      	sub	sp, #8
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	4a20      	ldr	r2, [pc, #128]	; (800baa0 <I2SEx_RxISR_I2SExt+0x90>)
 800ba1e:	4293      	cmp	r3, r2
 800ba20:	d101      	bne.n	800ba26 <I2SEx_RxISR_I2SExt+0x16>
 800ba22:	4b20      	ldr	r3, [pc, #128]	; (800baa4 <I2SEx_RxISR_I2SExt+0x94>)
 800ba24:	e001      	b.n	800ba2a <I2SEx_RxISR_I2SExt+0x1a>
 800ba26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800ba2a:	68d8      	ldr	r0, [r3, #12]
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba30:	1c99      	adds	r1, r3, #2
 800ba32:	687a      	ldr	r2, [r7, #4]
 800ba34:	62d1      	str	r1, [r2, #44]	; 0x2c
 800ba36:	b282      	uxth	r2, r0
 800ba38:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ba3e:	b29b      	uxth	r3, r3
 800ba40:	3b01      	subs	r3, #1
 800ba42:	b29a      	uxth	r2, r3
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ba4c:	b29b      	uxth	r3, r3
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d121      	bne.n	800ba96 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	4a12      	ldr	r2, [pc, #72]	; (800baa0 <I2SEx_RxISR_I2SExt+0x90>)
 800ba58:	4293      	cmp	r3, r2
 800ba5a:	d101      	bne.n	800ba60 <I2SEx_RxISR_I2SExt+0x50>
 800ba5c:	4b11      	ldr	r3, [pc, #68]	; (800baa4 <I2SEx_RxISR_I2SExt+0x94>)
 800ba5e:	e001      	b.n	800ba64 <I2SEx_RxISR_I2SExt+0x54>
 800ba60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800ba64:	685a      	ldr	r2, [r3, #4]
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	490d      	ldr	r1, [pc, #52]	; (800baa0 <I2SEx_RxISR_I2SExt+0x90>)
 800ba6c:	428b      	cmp	r3, r1
 800ba6e:	d101      	bne.n	800ba74 <I2SEx_RxISR_I2SExt+0x64>
 800ba70:	4b0c      	ldr	r3, [pc, #48]	; (800baa4 <I2SEx_RxISR_I2SExt+0x94>)
 800ba72:	e001      	b.n	800ba78 <I2SEx_RxISR_I2SExt+0x68>
 800ba74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800ba78:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800ba7c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba82:	b29b      	uxth	r3, r3
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d106      	bne.n	800ba96 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f7ff ff03 	bl	800b89c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800ba96:	bf00      	nop
 800ba98:	3708      	adds	r7, #8
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}
 800ba9e:	bf00      	nop
 800baa0:	40003800 	.word	0x40003800
 800baa4:	40003400 	.word	0x40003400

0800baa8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b086      	sub	sp, #24
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d101      	bne.n	800baba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800bab6:	2301      	movs	r3, #1
 800bab8:	e25b      	b.n	800bf72 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	f003 0301 	and.w	r3, r3, #1
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d075      	beq.n	800bbb2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800bac6:	4ba3      	ldr	r3, [pc, #652]	; (800bd54 <HAL_RCC_OscConfig+0x2ac>)
 800bac8:	689b      	ldr	r3, [r3, #8]
 800baca:	f003 030c 	and.w	r3, r3, #12
 800bace:	2b04      	cmp	r3, #4
 800bad0:	d00c      	beq.n	800baec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bad2:	4ba0      	ldr	r3, [pc, #640]	; (800bd54 <HAL_RCC_OscConfig+0x2ac>)
 800bad4:	689b      	ldr	r3, [r3, #8]
 800bad6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800bada:	2b08      	cmp	r3, #8
 800badc:	d112      	bne.n	800bb04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bade:	4b9d      	ldr	r3, [pc, #628]	; (800bd54 <HAL_RCC_OscConfig+0x2ac>)
 800bae0:	685b      	ldr	r3, [r3, #4]
 800bae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bae6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800baea:	d10b      	bne.n	800bb04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800baec:	4b99      	ldr	r3, [pc, #612]	; (800bd54 <HAL_RCC_OscConfig+0x2ac>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d05b      	beq.n	800bbb0 <HAL_RCC_OscConfig+0x108>
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	685b      	ldr	r3, [r3, #4]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d157      	bne.n	800bbb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800bb00:	2301      	movs	r3, #1
 800bb02:	e236      	b.n	800bf72 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	685b      	ldr	r3, [r3, #4]
 800bb08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb0c:	d106      	bne.n	800bb1c <HAL_RCC_OscConfig+0x74>
 800bb0e:	4b91      	ldr	r3, [pc, #580]	; (800bd54 <HAL_RCC_OscConfig+0x2ac>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	4a90      	ldr	r2, [pc, #576]	; (800bd54 <HAL_RCC_OscConfig+0x2ac>)
 800bb14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bb18:	6013      	str	r3, [r2, #0]
 800bb1a:	e01d      	b.n	800bb58 <HAL_RCC_OscConfig+0xb0>
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	685b      	ldr	r3, [r3, #4]
 800bb20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bb24:	d10c      	bne.n	800bb40 <HAL_RCC_OscConfig+0x98>
 800bb26:	4b8b      	ldr	r3, [pc, #556]	; (800bd54 <HAL_RCC_OscConfig+0x2ac>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	4a8a      	ldr	r2, [pc, #552]	; (800bd54 <HAL_RCC_OscConfig+0x2ac>)
 800bb2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bb30:	6013      	str	r3, [r2, #0]
 800bb32:	4b88      	ldr	r3, [pc, #544]	; (800bd54 <HAL_RCC_OscConfig+0x2ac>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	4a87      	ldr	r2, [pc, #540]	; (800bd54 <HAL_RCC_OscConfig+0x2ac>)
 800bb38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bb3c:	6013      	str	r3, [r2, #0]
 800bb3e:	e00b      	b.n	800bb58 <HAL_RCC_OscConfig+0xb0>
 800bb40:	4b84      	ldr	r3, [pc, #528]	; (800bd54 <HAL_RCC_OscConfig+0x2ac>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	4a83      	ldr	r2, [pc, #524]	; (800bd54 <HAL_RCC_OscConfig+0x2ac>)
 800bb46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bb4a:	6013      	str	r3, [r2, #0]
 800bb4c:	4b81      	ldr	r3, [pc, #516]	; (800bd54 <HAL_RCC_OscConfig+0x2ac>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	4a80      	ldr	r2, [pc, #512]	; (800bd54 <HAL_RCC_OscConfig+0x2ac>)
 800bb52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bb56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	685b      	ldr	r3, [r3, #4]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d013      	beq.n	800bb88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bb60:	f7fd f9ca 	bl	8008ef8 <HAL_GetTick>
 800bb64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bb66:	e008      	b.n	800bb7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bb68:	f7fd f9c6 	bl	8008ef8 <HAL_GetTick>
 800bb6c:	4602      	mov	r2, r0
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	1ad3      	subs	r3, r2, r3
 800bb72:	2b64      	cmp	r3, #100	; 0x64
 800bb74:	d901      	bls.n	800bb7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800bb76:	2303      	movs	r3, #3
 800bb78:	e1fb      	b.n	800bf72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bb7a:	4b76      	ldr	r3, [pc, #472]	; (800bd54 <HAL_RCC_OscConfig+0x2ac>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d0f0      	beq.n	800bb68 <HAL_RCC_OscConfig+0xc0>
 800bb86:	e014      	b.n	800bbb2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bb88:	f7fd f9b6 	bl	8008ef8 <HAL_GetTick>
 800bb8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bb8e:	e008      	b.n	800bba2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bb90:	f7fd f9b2 	bl	8008ef8 <HAL_GetTick>
 800bb94:	4602      	mov	r2, r0
 800bb96:	693b      	ldr	r3, [r7, #16]
 800bb98:	1ad3      	subs	r3, r2, r3
 800bb9a:	2b64      	cmp	r3, #100	; 0x64
 800bb9c:	d901      	bls.n	800bba2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800bb9e:	2303      	movs	r3, #3
 800bba0:	e1e7      	b.n	800bf72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bba2:	4b6c      	ldr	r3, [pc, #432]	; (800bd54 <HAL_RCC_OscConfig+0x2ac>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d1f0      	bne.n	800bb90 <HAL_RCC_OscConfig+0xe8>
 800bbae:	e000      	b.n	800bbb2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bbb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f003 0302 	and.w	r3, r3, #2
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d063      	beq.n	800bc86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800bbbe:	4b65      	ldr	r3, [pc, #404]	; (800bd54 <HAL_RCC_OscConfig+0x2ac>)
 800bbc0:	689b      	ldr	r3, [r3, #8]
 800bbc2:	f003 030c 	and.w	r3, r3, #12
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d00b      	beq.n	800bbe2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bbca:	4b62      	ldr	r3, [pc, #392]	; (800bd54 <HAL_RCC_OscConfig+0x2ac>)
 800bbcc:	689b      	ldr	r3, [r3, #8]
 800bbce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800bbd2:	2b08      	cmp	r3, #8
 800bbd4:	d11c      	bne.n	800bc10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bbd6:	4b5f      	ldr	r3, [pc, #380]	; (800bd54 <HAL_RCC_OscConfig+0x2ac>)
 800bbd8:	685b      	ldr	r3, [r3, #4]
 800bbda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d116      	bne.n	800bc10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bbe2:	4b5c      	ldr	r3, [pc, #368]	; (800bd54 <HAL_RCC_OscConfig+0x2ac>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	f003 0302 	and.w	r3, r3, #2
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d005      	beq.n	800bbfa <HAL_RCC_OscConfig+0x152>
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	68db      	ldr	r3, [r3, #12]
 800bbf2:	2b01      	cmp	r3, #1
 800bbf4:	d001      	beq.n	800bbfa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	e1bb      	b.n	800bf72 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bbfa:	4b56      	ldr	r3, [pc, #344]	; (800bd54 <HAL_RCC_OscConfig+0x2ac>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	691b      	ldr	r3, [r3, #16]
 800bc06:	00db      	lsls	r3, r3, #3
 800bc08:	4952      	ldr	r1, [pc, #328]	; (800bd54 <HAL_RCC_OscConfig+0x2ac>)
 800bc0a:	4313      	orrs	r3, r2
 800bc0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bc0e:	e03a      	b.n	800bc86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	68db      	ldr	r3, [r3, #12]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d020      	beq.n	800bc5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bc18:	4b4f      	ldr	r3, [pc, #316]	; (800bd58 <HAL_RCC_OscConfig+0x2b0>)
 800bc1a:	2201      	movs	r2, #1
 800bc1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc1e:	f7fd f96b 	bl	8008ef8 <HAL_GetTick>
 800bc22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bc24:	e008      	b.n	800bc38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bc26:	f7fd f967 	bl	8008ef8 <HAL_GetTick>
 800bc2a:	4602      	mov	r2, r0
 800bc2c:	693b      	ldr	r3, [r7, #16]
 800bc2e:	1ad3      	subs	r3, r2, r3
 800bc30:	2b02      	cmp	r3, #2
 800bc32:	d901      	bls.n	800bc38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800bc34:	2303      	movs	r3, #3
 800bc36:	e19c      	b.n	800bf72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bc38:	4b46      	ldr	r3, [pc, #280]	; (800bd54 <HAL_RCC_OscConfig+0x2ac>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	f003 0302 	and.w	r3, r3, #2
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d0f0      	beq.n	800bc26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bc44:	4b43      	ldr	r3, [pc, #268]	; (800bd54 <HAL_RCC_OscConfig+0x2ac>)
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	691b      	ldr	r3, [r3, #16]
 800bc50:	00db      	lsls	r3, r3, #3
 800bc52:	4940      	ldr	r1, [pc, #256]	; (800bd54 <HAL_RCC_OscConfig+0x2ac>)
 800bc54:	4313      	orrs	r3, r2
 800bc56:	600b      	str	r3, [r1, #0]
 800bc58:	e015      	b.n	800bc86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bc5a:	4b3f      	ldr	r3, [pc, #252]	; (800bd58 <HAL_RCC_OscConfig+0x2b0>)
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc60:	f7fd f94a 	bl	8008ef8 <HAL_GetTick>
 800bc64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bc66:	e008      	b.n	800bc7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bc68:	f7fd f946 	bl	8008ef8 <HAL_GetTick>
 800bc6c:	4602      	mov	r2, r0
 800bc6e:	693b      	ldr	r3, [r7, #16]
 800bc70:	1ad3      	subs	r3, r2, r3
 800bc72:	2b02      	cmp	r3, #2
 800bc74:	d901      	bls.n	800bc7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800bc76:	2303      	movs	r3, #3
 800bc78:	e17b      	b.n	800bf72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bc7a:	4b36      	ldr	r3, [pc, #216]	; (800bd54 <HAL_RCC_OscConfig+0x2ac>)
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	f003 0302 	and.w	r3, r3, #2
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d1f0      	bne.n	800bc68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	f003 0308 	and.w	r3, r3, #8
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d030      	beq.n	800bcf4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	695b      	ldr	r3, [r3, #20]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d016      	beq.n	800bcc8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bc9a:	4b30      	ldr	r3, [pc, #192]	; (800bd5c <HAL_RCC_OscConfig+0x2b4>)
 800bc9c:	2201      	movs	r2, #1
 800bc9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bca0:	f7fd f92a 	bl	8008ef8 <HAL_GetTick>
 800bca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bca6:	e008      	b.n	800bcba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bca8:	f7fd f926 	bl	8008ef8 <HAL_GetTick>
 800bcac:	4602      	mov	r2, r0
 800bcae:	693b      	ldr	r3, [r7, #16]
 800bcb0:	1ad3      	subs	r3, r2, r3
 800bcb2:	2b02      	cmp	r3, #2
 800bcb4:	d901      	bls.n	800bcba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800bcb6:	2303      	movs	r3, #3
 800bcb8:	e15b      	b.n	800bf72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bcba:	4b26      	ldr	r3, [pc, #152]	; (800bd54 <HAL_RCC_OscConfig+0x2ac>)
 800bcbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bcbe:	f003 0302 	and.w	r3, r3, #2
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d0f0      	beq.n	800bca8 <HAL_RCC_OscConfig+0x200>
 800bcc6:	e015      	b.n	800bcf4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bcc8:	4b24      	ldr	r3, [pc, #144]	; (800bd5c <HAL_RCC_OscConfig+0x2b4>)
 800bcca:	2200      	movs	r2, #0
 800bccc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bcce:	f7fd f913 	bl	8008ef8 <HAL_GetTick>
 800bcd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bcd4:	e008      	b.n	800bce8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bcd6:	f7fd f90f 	bl	8008ef8 <HAL_GetTick>
 800bcda:	4602      	mov	r2, r0
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	1ad3      	subs	r3, r2, r3
 800bce0:	2b02      	cmp	r3, #2
 800bce2:	d901      	bls.n	800bce8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800bce4:	2303      	movs	r3, #3
 800bce6:	e144      	b.n	800bf72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bce8:	4b1a      	ldr	r3, [pc, #104]	; (800bd54 <HAL_RCC_OscConfig+0x2ac>)
 800bcea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bcec:	f003 0302 	and.w	r3, r3, #2
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d1f0      	bne.n	800bcd6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	f003 0304 	and.w	r3, r3, #4
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	f000 80a0 	beq.w	800be42 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bd02:	2300      	movs	r3, #0
 800bd04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bd06:	4b13      	ldr	r3, [pc, #76]	; (800bd54 <HAL_RCC_OscConfig+0x2ac>)
 800bd08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d10f      	bne.n	800bd32 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bd12:	2300      	movs	r3, #0
 800bd14:	60bb      	str	r3, [r7, #8]
 800bd16:	4b0f      	ldr	r3, [pc, #60]	; (800bd54 <HAL_RCC_OscConfig+0x2ac>)
 800bd18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd1a:	4a0e      	ldr	r2, [pc, #56]	; (800bd54 <HAL_RCC_OscConfig+0x2ac>)
 800bd1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bd20:	6413      	str	r3, [r2, #64]	; 0x40
 800bd22:	4b0c      	ldr	r3, [pc, #48]	; (800bd54 <HAL_RCC_OscConfig+0x2ac>)
 800bd24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bd2a:	60bb      	str	r3, [r7, #8]
 800bd2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bd2e:	2301      	movs	r3, #1
 800bd30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bd32:	4b0b      	ldr	r3, [pc, #44]	; (800bd60 <HAL_RCC_OscConfig+0x2b8>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d121      	bne.n	800bd82 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800bd3e:	4b08      	ldr	r3, [pc, #32]	; (800bd60 <HAL_RCC_OscConfig+0x2b8>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	4a07      	ldr	r2, [pc, #28]	; (800bd60 <HAL_RCC_OscConfig+0x2b8>)
 800bd44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bd48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bd4a:	f7fd f8d5 	bl	8008ef8 <HAL_GetTick>
 800bd4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bd50:	e011      	b.n	800bd76 <HAL_RCC_OscConfig+0x2ce>
 800bd52:	bf00      	nop
 800bd54:	40023800 	.word	0x40023800
 800bd58:	42470000 	.word	0x42470000
 800bd5c:	42470e80 	.word	0x42470e80
 800bd60:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bd64:	f7fd f8c8 	bl	8008ef8 <HAL_GetTick>
 800bd68:	4602      	mov	r2, r0
 800bd6a:	693b      	ldr	r3, [r7, #16]
 800bd6c:	1ad3      	subs	r3, r2, r3
 800bd6e:	2b02      	cmp	r3, #2
 800bd70:	d901      	bls.n	800bd76 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800bd72:	2303      	movs	r3, #3
 800bd74:	e0fd      	b.n	800bf72 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bd76:	4b81      	ldr	r3, [pc, #516]	; (800bf7c <HAL_RCC_OscConfig+0x4d4>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d0f0      	beq.n	800bd64 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	689b      	ldr	r3, [r3, #8]
 800bd86:	2b01      	cmp	r3, #1
 800bd88:	d106      	bne.n	800bd98 <HAL_RCC_OscConfig+0x2f0>
 800bd8a:	4b7d      	ldr	r3, [pc, #500]	; (800bf80 <HAL_RCC_OscConfig+0x4d8>)
 800bd8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd8e:	4a7c      	ldr	r2, [pc, #496]	; (800bf80 <HAL_RCC_OscConfig+0x4d8>)
 800bd90:	f043 0301 	orr.w	r3, r3, #1
 800bd94:	6713      	str	r3, [r2, #112]	; 0x70
 800bd96:	e01c      	b.n	800bdd2 <HAL_RCC_OscConfig+0x32a>
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	689b      	ldr	r3, [r3, #8]
 800bd9c:	2b05      	cmp	r3, #5
 800bd9e:	d10c      	bne.n	800bdba <HAL_RCC_OscConfig+0x312>
 800bda0:	4b77      	ldr	r3, [pc, #476]	; (800bf80 <HAL_RCC_OscConfig+0x4d8>)
 800bda2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bda4:	4a76      	ldr	r2, [pc, #472]	; (800bf80 <HAL_RCC_OscConfig+0x4d8>)
 800bda6:	f043 0304 	orr.w	r3, r3, #4
 800bdaa:	6713      	str	r3, [r2, #112]	; 0x70
 800bdac:	4b74      	ldr	r3, [pc, #464]	; (800bf80 <HAL_RCC_OscConfig+0x4d8>)
 800bdae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdb0:	4a73      	ldr	r2, [pc, #460]	; (800bf80 <HAL_RCC_OscConfig+0x4d8>)
 800bdb2:	f043 0301 	orr.w	r3, r3, #1
 800bdb6:	6713      	str	r3, [r2, #112]	; 0x70
 800bdb8:	e00b      	b.n	800bdd2 <HAL_RCC_OscConfig+0x32a>
 800bdba:	4b71      	ldr	r3, [pc, #452]	; (800bf80 <HAL_RCC_OscConfig+0x4d8>)
 800bdbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdbe:	4a70      	ldr	r2, [pc, #448]	; (800bf80 <HAL_RCC_OscConfig+0x4d8>)
 800bdc0:	f023 0301 	bic.w	r3, r3, #1
 800bdc4:	6713      	str	r3, [r2, #112]	; 0x70
 800bdc6:	4b6e      	ldr	r3, [pc, #440]	; (800bf80 <HAL_RCC_OscConfig+0x4d8>)
 800bdc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdca:	4a6d      	ldr	r2, [pc, #436]	; (800bf80 <HAL_RCC_OscConfig+0x4d8>)
 800bdcc:	f023 0304 	bic.w	r3, r3, #4
 800bdd0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	689b      	ldr	r3, [r3, #8]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d015      	beq.n	800be06 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bdda:	f7fd f88d 	bl	8008ef8 <HAL_GetTick>
 800bdde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bde0:	e00a      	b.n	800bdf8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bde2:	f7fd f889 	bl	8008ef8 <HAL_GetTick>
 800bde6:	4602      	mov	r2, r0
 800bde8:	693b      	ldr	r3, [r7, #16]
 800bdea:	1ad3      	subs	r3, r2, r3
 800bdec:	f241 3288 	movw	r2, #5000	; 0x1388
 800bdf0:	4293      	cmp	r3, r2
 800bdf2:	d901      	bls.n	800bdf8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800bdf4:	2303      	movs	r3, #3
 800bdf6:	e0bc      	b.n	800bf72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bdf8:	4b61      	ldr	r3, [pc, #388]	; (800bf80 <HAL_RCC_OscConfig+0x4d8>)
 800bdfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdfc:	f003 0302 	and.w	r3, r3, #2
 800be00:	2b00      	cmp	r3, #0
 800be02:	d0ee      	beq.n	800bde2 <HAL_RCC_OscConfig+0x33a>
 800be04:	e014      	b.n	800be30 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800be06:	f7fd f877 	bl	8008ef8 <HAL_GetTick>
 800be0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800be0c:	e00a      	b.n	800be24 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800be0e:	f7fd f873 	bl	8008ef8 <HAL_GetTick>
 800be12:	4602      	mov	r2, r0
 800be14:	693b      	ldr	r3, [r7, #16]
 800be16:	1ad3      	subs	r3, r2, r3
 800be18:	f241 3288 	movw	r2, #5000	; 0x1388
 800be1c:	4293      	cmp	r3, r2
 800be1e:	d901      	bls.n	800be24 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800be20:	2303      	movs	r3, #3
 800be22:	e0a6      	b.n	800bf72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800be24:	4b56      	ldr	r3, [pc, #344]	; (800bf80 <HAL_RCC_OscConfig+0x4d8>)
 800be26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be28:	f003 0302 	and.w	r3, r3, #2
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d1ee      	bne.n	800be0e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800be30:	7dfb      	ldrb	r3, [r7, #23]
 800be32:	2b01      	cmp	r3, #1
 800be34:	d105      	bne.n	800be42 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800be36:	4b52      	ldr	r3, [pc, #328]	; (800bf80 <HAL_RCC_OscConfig+0x4d8>)
 800be38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be3a:	4a51      	ldr	r2, [pc, #324]	; (800bf80 <HAL_RCC_OscConfig+0x4d8>)
 800be3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800be40:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	699b      	ldr	r3, [r3, #24]
 800be46:	2b00      	cmp	r3, #0
 800be48:	f000 8092 	beq.w	800bf70 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800be4c:	4b4c      	ldr	r3, [pc, #304]	; (800bf80 <HAL_RCC_OscConfig+0x4d8>)
 800be4e:	689b      	ldr	r3, [r3, #8]
 800be50:	f003 030c 	and.w	r3, r3, #12
 800be54:	2b08      	cmp	r3, #8
 800be56:	d05c      	beq.n	800bf12 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	699b      	ldr	r3, [r3, #24]
 800be5c:	2b02      	cmp	r3, #2
 800be5e:	d141      	bne.n	800bee4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800be60:	4b48      	ldr	r3, [pc, #288]	; (800bf84 <HAL_RCC_OscConfig+0x4dc>)
 800be62:	2200      	movs	r2, #0
 800be64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800be66:	f7fd f847 	bl	8008ef8 <HAL_GetTick>
 800be6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800be6c:	e008      	b.n	800be80 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800be6e:	f7fd f843 	bl	8008ef8 <HAL_GetTick>
 800be72:	4602      	mov	r2, r0
 800be74:	693b      	ldr	r3, [r7, #16]
 800be76:	1ad3      	subs	r3, r2, r3
 800be78:	2b02      	cmp	r3, #2
 800be7a:	d901      	bls.n	800be80 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800be7c:	2303      	movs	r3, #3
 800be7e:	e078      	b.n	800bf72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800be80:	4b3f      	ldr	r3, [pc, #252]	; (800bf80 <HAL_RCC_OscConfig+0x4d8>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d1f0      	bne.n	800be6e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	69da      	ldr	r2, [r3, #28]
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6a1b      	ldr	r3, [r3, #32]
 800be94:	431a      	orrs	r2, r3
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be9a:	019b      	lsls	r3, r3, #6
 800be9c:	431a      	orrs	r2, r3
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bea2:	085b      	lsrs	r3, r3, #1
 800bea4:	3b01      	subs	r3, #1
 800bea6:	041b      	lsls	r3, r3, #16
 800bea8:	431a      	orrs	r2, r3
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beae:	061b      	lsls	r3, r3, #24
 800beb0:	4933      	ldr	r1, [pc, #204]	; (800bf80 <HAL_RCC_OscConfig+0x4d8>)
 800beb2:	4313      	orrs	r3, r2
 800beb4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800beb6:	4b33      	ldr	r3, [pc, #204]	; (800bf84 <HAL_RCC_OscConfig+0x4dc>)
 800beb8:	2201      	movs	r2, #1
 800beba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bebc:	f7fd f81c 	bl	8008ef8 <HAL_GetTick>
 800bec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bec2:	e008      	b.n	800bed6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bec4:	f7fd f818 	bl	8008ef8 <HAL_GetTick>
 800bec8:	4602      	mov	r2, r0
 800beca:	693b      	ldr	r3, [r7, #16]
 800becc:	1ad3      	subs	r3, r2, r3
 800bece:	2b02      	cmp	r3, #2
 800bed0:	d901      	bls.n	800bed6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800bed2:	2303      	movs	r3, #3
 800bed4:	e04d      	b.n	800bf72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bed6:	4b2a      	ldr	r3, [pc, #168]	; (800bf80 <HAL_RCC_OscConfig+0x4d8>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d0f0      	beq.n	800bec4 <HAL_RCC_OscConfig+0x41c>
 800bee2:	e045      	b.n	800bf70 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bee4:	4b27      	ldr	r3, [pc, #156]	; (800bf84 <HAL_RCC_OscConfig+0x4dc>)
 800bee6:	2200      	movs	r2, #0
 800bee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800beea:	f7fd f805 	bl	8008ef8 <HAL_GetTick>
 800beee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bef0:	e008      	b.n	800bf04 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bef2:	f7fd f801 	bl	8008ef8 <HAL_GetTick>
 800bef6:	4602      	mov	r2, r0
 800bef8:	693b      	ldr	r3, [r7, #16]
 800befa:	1ad3      	subs	r3, r2, r3
 800befc:	2b02      	cmp	r3, #2
 800befe:	d901      	bls.n	800bf04 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800bf00:	2303      	movs	r3, #3
 800bf02:	e036      	b.n	800bf72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bf04:	4b1e      	ldr	r3, [pc, #120]	; (800bf80 <HAL_RCC_OscConfig+0x4d8>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d1f0      	bne.n	800bef2 <HAL_RCC_OscConfig+0x44a>
 800bf10:	e02e      	b.n	800bf70 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	699b      	ldr	r3, [r3, #24]
 800bf16:	2b01      	cmp	r3, #1
 800bf18:	d101      	bne.n	800bf1e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	e029      	b.n	800bf72 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800bf1e:	4b18      	ldr	r3, [pc, #96]	; (800bf80 <HAL_RCC_OscConfig+0x4d8>)
 800bf20:	685b      	ldr	r3, [r3, #4]
 800bf22:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	69db      	ldr	r3, [r3, #28]
 800bf2e:	429a      	cmp	r2, r3
 800bf30:	d11c      	bne.n	800bf6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bf3c:	429a      	cmp	r2, r3
 800bf3e:	d115      	bne.n	800bf6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800bf40:	68fa      	ldr	r2, [r7, #12]
 800bf42:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800bf46:	4013      	ands	r3, r2
 800bf48:	687a      	ldr	r2, [r7, #4]
 800bf4a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800bf4c:	4293      	cmp	r3, r2
 800bf4e:	d10d      	bne.n	800bf6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800bf5a:	429a      	cmp	r2, r3
 800bf5c:	d106      	bne.n	800bf6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800bf68:	429a      	cmp	r2, r3
 800bf6a:	d001      	beq.n	800bf70 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	e000      	b.n	800bf72 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800bf70:	2300      	movs	r3, #0
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3718      	adds	r7, #24
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}
 800bf7a:	bf00      	nop
 800bf7c:	40007000 	.word	0x40007000
 800bf80:	40023800 	.word	0x40023800
 800bf84:	42470060 	.word	0x42470060

0800bf88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b084      	sub	sp, #16
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
 800bf90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d101      	bne.n	800bf9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bf98:	2301      	movs	r3, #1
 800bf9a:	e0cc      	b.n	800c136 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800bf9c:	4b68      	ldr	r3, [pc, #416]	; (800c140 <HAL_RCC_ClockConfig+0x1b8>)
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	f003 030f 	and.w	r3, r3, #15
 800bfa4:	683a      	ldr	r2, [r7, #0]
 800bfa6:	429a      	cmp	r2, r3
 800bfa8:	d90c      	bls.n	800bfc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bfaa:	4b65      	ldr	r3, [pc, #404]	; (800c140 <HAL_RCC_ClockConfig+0x1b8>)
 800bfac:	683a      	ldr	r2, [r7, #0]
 800bfae:	b2d2      	uxtb	r2, r2
 800bfb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bfb2:	4b63      	ldr	r3, [pc, #396]	; (800c140 <HAL_RCC_ClockConfig+0x1b8>)
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	f003 030f 	and.w	r3, r3, #15
 800bfba:	683a      	ldr	r2, [r7, #0]
 800bfbc:	429a      	cmp	r2, r3
 800bfbe:	d001      	beq.n	800bfc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	e0b8      	b.n	800c136 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	f003 0302 	and.w	r3, r3, #2
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d020      	beq.n	800c012 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	f003 0304 	and.w	r3, r3, #4
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d005      	beq.n	800bfe8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bfdc:	4b59      	ldr	r3, [pc, #356]	; (800c144 <HAL_RCC_ClockConfig+0x1bc>)
 800bfde:	689b      	ldr	r3, [r3, #8]
 800bfe0:	4a58      	ldr	r2, [pc, #352]	; (800c144 <HAL_RCC_ClockConfig+0x1bc>)
 800bfe2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800bfe6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	f003 0308 	and.w	r3, r3, #8
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d005      	beq.n	800c000 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bff4:	4b53      	ldr	r3, [pc, #332]	; (800c144 <HAL_RCC_ClockConfig+0x1bc>)
 800bff6:	689b      	ldr	r3, [r3, #8]
 800bff8:	4a52      	ldr	r2, [pc, #328]	; (800c144 <HAL_RCC_ClockConfig+0x1bc>)
 800bffa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800bffe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c000:	4b50      	ldr	r3, [pc, #320]	; (800c144 <HAL_RCC_ClockConfig+0x1bc>)
 800c002:	689b      	ldr	r3, [r3, #8]
 800c004:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	689b      	ldr	r3, [r3, #8]
 800c00c:	494d      	ldr	r1, [pc, #308]	; (800c144 <HAL_RCC_ClockConfig+0x1bc>)
 800c00e:	4313      	orrs	r3, r2
 800c010:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	f003 0301 	and.w	r3, r3, #1
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d044      	beq.n	800c0a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	685b      	ldr	r3, [r3, #4]
 800c022:	2b01      	cmp	r3, #1
 800c024:	d107      	bne.n	800c036 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c026:	4b47      	ldr	r3, [pc, #284]	; (800c144 <HAL_RCC_ClockConfig+0x1bc>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d119      	bne.n	800c066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c032:	2301      	movs	r3, #1
 800c034:	e07f      	b.n	800c136 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	685b      	ldr	r3, [r3, #4]
 800c03a:	2b02      	cmp	r3, #2
 800c03c:	d003      	beq.n	800c046 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c042:	2b03      	cmp	r3, #3
 800c044:	d107      	bne.n	800c056 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c046:	4b3f      	ldr	r3, [pc, #252]	; (800c144 <HAL_RCC_ClockConfig+0x1bc>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d109      	bne.n	800c066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c052:	2301      	movs	r3, #1
 800c054:	e06f      	b.n	800c136 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c056:	4b3b      	ldr	r3, [pc, #236]	; (800c144 <HAL_RCC_ClockConfig+0x1bc>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f003 0302 	and.w	r3, r3, #2
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d101      	bne.n	800c066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c062:	2301      	movs	r3, #1
 800c064:	e067      	b.n	800c136 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c066:	4b37      	ldr	r3, [pc, #220]	; (800c144 <HAL_RCC_ClockConfig+0x1bc>)
 800c068:	689b      	ldr	r3, [r3, #8]
 800c06a:	f023 0203 	bic.w	r2, r3, #3
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	685b      	ldr	r3, [r3, #4]
 800c072:	4934      	ldr	r1, [pc, #208]	; (800c144 <HAL_RCC_ClockConfig+0x1bc>)
 800c074:	4313      	orrs	r3, r2
 800c076:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c078:	f7fc ff3e 	bl	8008ef8 <HAL_GetTick>
 800c07c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c07e:	e00a      	b.n	800c096 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c080:	f7fc ff3a 	bl	8008ef8 <HAL_GetTick>
 800c084:	4602      	mov	r2, r0
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	1ad3      	subs	r3, r2, r3
 800c08a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c08e:	4293      	cmp	r3, r2
 800c090:	d901      	bls.n	800c096 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c092:	2303      	movs	r3, #3
 800c094:	e04f      	b.n	800c136 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c096:	4b2b      	ldr	r3, [pc, #172]	; (800c144 <HAL_RCC_ClockConfig+0x1bc>)
 800c098:	689b      	ldr	r3, [r3, #8]
 800c09a:	f003 020c 	and.w	r2, r3, #12
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	685b      	ldr	r3, [r3, #4]
 800c0a2:	009b      	lsls	r3, r3, #2
 800c0a4:	429a      	cmp	r2, r3
 800c0a6:	d1eb      	bne.n	800c080 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c0a8:	4b25      	ldr	r3, [pc, #148]	; (800c140 <HAL_RCC_ClockConfig+0x1b8>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	f003 030f 	and.w	r3, r3, #15
 800c0b0:	683a      	ldr	r2, [r7, #0]
 800c0b2:	429a      	cmp	r2, r3
 800c0b4:	d20c      	bcs.n	800c0d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c0b6:	4b22      	ldr	r3, [pc, #136]	; (800c140 <HAL_RCC_ClockConfig+0x1b8>)
 800c0b8:	683a      	ldr	r2, [r7, #0]
 800c0ba:	b2d2      	uxtb	r2, r2
 800c0bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c0be:	4b20      	ldr	r3, [pc, #128]	; (800c140 <HAL_RCC_ClockConfig+0x1b8>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	f003 030f 	and.w	r3, r3, #15
 800c0c6:	683a      	ldr	r2, [r7, #0]
 800c0c8:	429a      	cmp	r2, r3
 800c0ca:	d001      	beq.n	800c0d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c0cc:	2301      	movs	r3, #1
 800c0ce:	e032      	b.n	800c136 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	f003 0304 	and.w	r3, r3, #4
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d008      	beq.n	800c0ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c0dc:	4b19      	ldr	r3, [pc, #100]	; (800c144 <HAL_RCC_ClockConfig+0x1bc>)
 800c0de:	689b      	ldr	r3, [r3, #8]
 800c0e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	68db      	ldr	r3, [r3, #12]
 800c0e8:	4916      	ldr	r1, [pc, #88]	; (800c144 <HAL_RCC_ClockConfig+0x1bc>)
 800c0ea:	4313      	orrs	r3, r2
 800c0ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	f003 0308 	and.w	r3, r3, #8
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d009      	beq.n	800c10e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c0fa:	4b12      	ldr	r3, [pc, #72]	; (800c144 <HAL_RCC_ClockConfig+0x1bc>)
 800c0fc:	689b      	ldr	r3, [r3, #8]
 800c0fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	691b      	ldr	r3, [r3, #16]
 800c106:	00db      	lsls	r3, r3, #3
 800c108:	490e      	ldr	r1, [pc, #56]	; (800c144 <HAL_RCC_ClockConfig+0x1bc>)
 800c10a:	4313      	orrs	r3, r2
 800c10c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c10e:	f000 f821 	bl	800c154 <HAL_RCC_GetSysClockFreq>
 800c112:	4601      	mov	r1, r0
 800c114:	4b0b      	ldr	r3, [pc, #44]	; (800c144 <HAL_RCC_ClockConfig+0x1bc>)
 800c116:	689b      	ldr	r3, [r3, #8]
 800c118:	091b      	lsrs	r3, r3, #4
 800c11a:	f003 030f 	and.w	r3, r3, #15
 800c11e:	4a0a      	ldr	r2, [pc, #40]	; (800c148 <HAL_RCC_ClockConfig+0x1c0>)
 800c120:	5cd3      	ldrb	r3, [r2, r3]
 800c122:	fa21 f303 	lsr.w	r3, r1, r3
 800c126:	4a09      	ldr	r2, [pc, #36]	; (800c14c <HAL_RCC_ClockConfig+0x1c4>)
 800c128:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c12a:	4b09      	ldr	r3, [pc, #36]	; (800c150 <HAL_RCC_ClockConfig+0x1c8>)
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	4618      	mov	r0, r3
 800c130:	f7fc fe9e 	bl	8008e70 <HAL_InitTick>

  return HAL_OK;
 800c134:	2300      	movs	r3, #0
}
 800c136:	4618      	mov	r0, r3
 800c138:	3710      	adds	r7, #16
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}
 800c13e:	bf00      	nop
 800c140:	40023c00 	.word	0x40023c00
 800c144:	40023800 	.word	0x40023800
 800c148:	0800f49c 	.word	0x0800f49c
 800c14c:	20000000 	.word	0x20000000
 800c150:	20000004 	.word	0x20000004

0800c154 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c154:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c156:	b085      	sub	sp, #20
 800c158:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c15a:	2300      	movs	r3, #0
 800c15c:	607b      	str	r3, [r7, #4]
 800c15e:	2300      	movs	r3, #0
 800c160:	60fb      	str	r3, [r7, #12]
 800c162:	2300      	movs	r3, #0
 800c164:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800c166:	2300      	movs	r3, #0
 800c168:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c16a:	4b63      	ldr	r3, [pc, #396]	; (800c2f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c16c:	689b      	ldr	r3, [r3, #8]
 800c16e:	f003 030c 	and.w	r3, r3, #12
 800c172:	2b04      	cmp	r3, #4
 800c174:	d007      	beq.n	800c186 <HAL_RCC_GetSysClockFreq+0x32>
 800c176:	2b08      	cmp	r3, #8
 800c178:	d008      	beq.n	800c18c <HAL_RCC_GetSysClockFreq+0x38>
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	f040 80b4 	bne.w	800c2e8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c180:	4b5e      	ldr	r3, [pc, #376]	; (800c2fc <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c182:	60bb      	str	r3, [r7, #8]
       break;
 800c184:	e0b3      	b.n	800c2ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c186:	4b5e      	ldr	r3, [pc, #376]	; (800c300 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800c188:	60bb      	str	r3, [r7, #8]
      break;
 800c18a:	e0b0      	b.n	800c2ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c18c:	4b5a      	ldr	r3, [pc, #360]	; (800c2f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c18e:	685b      	ldr	r3, [r3, #4]
 800c190:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c194:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c196:	4b58      	ldr	r3, [pc, #352]	; (800c2f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c198:	685b      	ldr	r3, [r3, #4]
 800c19a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d04a      	beq.n	800c238 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c1a2:	4b55      	ldr	r3, [pc, #340]	; (800c2f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c1a4:	685b      	ldr	r3, [r3, #4]
 800c1a6:	099b      	lsrs	r3, r3, #6
 800c1a8:	f04f 0400 	mov.w	r4, #0
 800c1ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c1b0:	f04f 0200 	mov.w	r2, #0
 800c1b4:	ea03 0501 	and.w	r5, r3, r1
 800c1b8:	ea04 0602 	and.w	r6, r4, r2
 800c1bc:	4629      	mov	r1, r5
 800c1be:	4632      	mov	r2, r6
 800c1c0:	f04f 0300 	mov.w	r3, #0
 800c1c4:	f04f 0400 	mov.w	r4, #0
 800c1c8:	0154      	lsls	r4, r2, #5
 800c1ca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c1ce:	014b      	lsls	r3, r1, #5
 800c1d0:	4619      	mov	r1, r3
 800c1d2:	4622      	mov	r2, r4
 800c1d4:	1b49      	subs	r1, r1, r5
 800c1d6:	eb62 0206 	sbc.w	r2, r2, r6
 800c1da:	f04f 0300 	mov.w	r3, #0
 800c1de:	f04f 0400 	mov.w	r4, #0
 800c1e2:	0194      	lsls	r4, r2, #6
 800c1e4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c1e8:	018b      	lsls	r3, r1, #6
 800c1ea:	1a5b      	subs	r3, r3, r1
 800c1ec:	eb64 0402 	sbc.w	r4, r4, r2
 800c1f0:	f04f 0100 	mov.w	r1, #0
 800c1f4:	f04f 0200 	mov.w	r2, #0
 800c1f8:	00e2      	lsls	r2, r4, #3
 800c1fa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c1fe:	00d9      	lsls	r1, r3, #3
 800c200:	460b      	mov	r3, r1
 800c202:	4614      	mov	r4, r2
 800c204:	195b      	adds	r3, r3, r5
 800c206:	eb44 0406 	adc.w	r4, r4, r6
 800c20a:	f04f 0100 	mov.w	r1, #0
 800c20e:	f04f 0200 	mov.w	r2, #0
 800c212:	0262      	lsls	r2, r4, #9
 800c214:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800c218:	0259      	lsls	r1, r3, #9
 800c21a:	460b      	mov	r3, r1
 800c21c:	4614      	mov	r4, r2
 800c21e:	4618      	mov	r0, r3
 800c220:	4621      	mov	r1, r4
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f04f 0400 	mov.w	r4, #0
 800c228:	461a      	mov	r2, r3
 800c22a:	4623      	mov	r3, r4
 800c22c:	f7fb ffcc 	bl	80081c8 <__aeabi_uldivmod>
 800c230:	4603      	mov	r3, r0
 800c232:	460c      	mov	r4, r1
 800c234:	60fb      	str	r3, [r7, #12]
 800c236:	e049      	b.n	800c2cc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c238:	4b2f      	ldr	r3, [pc, #188]	; (800c2f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c23a:	685b      	ldr	r3, [r3, #4]
 800c23c:	099b      	lsrs	r3, r3, #6
 800c23e:	f04f 0400 	mov.w	r4, #0
 800c242:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c246:	f04f 0200 	mov.w	r2, #0
 800c24a:	ea03 0501 	and.w	r5, r3, r1
 800c24e:	ea04 0602 	and.w	r6, r4, r2
 800c252:	4629      	mov	r1, r5
 800c254:	4632      	mov	r2, r6
 800c256:	f04f 0300 	mov.w	r3, #0
 800c25a:	f04f 0400 	mov.w	r4, #0
 800c25e:	0154      	lsls	r4, r2, #5
 800c260:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c264:	014b      	lsls	r3, r1, #5
 800c266:	4619      	mov	r1, r3
 800c268:	4622      	mov	r2, r4
 800c26a:	1b49      	subs	r1, r1, r5
 800c26c:	eb62 0206 	sbc.w	r2, r2, r6
 800c270:	f04f 0300 	mov.w	r3, #0
 800c274:	f04f 0400 	mov.w	r4, #0
 800c278:	0194      	lsls	r4, r2, #6
 800c27a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c27e:	018b      	lsls	r3, r1, #6
 800c280:	1a5b      	subs	r3, r3, r1
 800c282:	eb64 0402 	sbc.w	r4, r4, r2
 800c286:	f04f 0100 	mov.w	r1, #0
 800c28a:	f04f 0200 	mov.w	r2, #0
 800c28e:	00e2      	lsls	r2, r4, #3
 800c290:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c294:	00d9      	lsls	r1, r3, #3
 800c296:	460b      	mov	r3, r1
 800c298:	4614      	mov	r4, r2
 800c29a:	195b      	adds	r3, r3, r5
 800c29c:	eb44 0406 	adc.w	r4, r4, r6
 800c2a0:	f04f 0100 	mov.w	r1, #0
 800c2a4:	f04f 0200 	mov.w	r2, #0
 800c2a8:	02a2      	lsls	r2, r4, #10
 800c2aa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c2ae:	0299      	lsls	r1, r3, #10
 800c2b0:	460b      	mov	r3, r1
 800c2b2:	4614      	mov	r4, r2
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	4621      	mov	r1, r4
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f04f 0400 	mov.w	r4, #0
 800c2be:	461a      	mov	r2, r3
 800c2c0:	4623      	mov	r3, r4
 800c2c2:	f7fb ff81 	bl	80081c8 <__aeabi_uldivmod>
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	460c      	mov	r4, r1
 800c2ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c2cc:	4b0a      	ldr	r3, [pc, #40]	; (800c2f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c2ce:	685b      	ldr	r3, [r3, #4]
 800c2d0:	0c1b      	lsrs	r3, r3, #16
 800c2d2:	f003 0303 	and.w	r3, r3, #3
 800c2d6:	3301      	adds	r3, #1
 800c2d8:	005b      	lsls	r3, r3, #1
 800c2da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800c2dc:	68fa      	ldr	r2, [r7, #12]
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2e4:	60bb      	str	r3, [r7, #8]
      break;
 800c2e6:	e002      	b.n	800c2ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c2e8:	4b04      	ldr	r3, [pc, #16]	; (800c2fc <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c2ea:	60bb      	str	r3, [r7, #8]
      break;
 800c2ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c2ee:	68bb      	ldr	r3, [r7, #8]
}
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	3714      	adds	r7, #20
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2f8:	40023800 	.word	0x40023800
 800c2fc:	00f42400 	.word	0x00f42400
 800c300:	007a1200 	.word	0x007a1200

0800c304 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c304:	b480      	push	{r7}
 800c306:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c308:	4b03      	ldr	r3, [pc, #12]	; (800c318 <HAL_RCC_GetHCLKFreq+0x14>)
 800c30a:	681b      	ldr	r3, [r3, #0]
}
 800c30c:	4618      	mov	r0, r3
 800c30e:	46bd      	mov	sp, r7
 800c310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c314:	4770      	bx	lr
 800c316:	bf00      	nop
 800c318:	20000000 	.word	0x20000000

0800c31c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c320:	f7ff fff0 	bl	800c304 <HAL_RCC_GetHCLKFreq>
 800c324:	4601      	mov	r1, r0
 800c326:	4b05      	ldr	r3, [pc, #20]	; (800c33c <HAL_RCC_GetPCLK1Freq+0x20>)
 800c328:	689b      	ldr	r3, [r3, #8]
 800c32a:	0a9b      	lsrs	r3, r3, #10
 800c32c:	f003 0307 	and.w	r3, r3, #7
 800c330:	4a03      	ldr	r2, [pc, #12]	; (800c340 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c332:	5cd3      	ldrb	r3, [r2, r3]
 800c334:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c338:	4618      	mov	r0, r3
 800c33a:	bd80      	pop	{r7, pc}
 800c33c:	40023800 	.word	0x40023800
 800c340:	0800f4ac 	.word	0x0800f4ac

0800c344 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c344:	b580      	push	{r7, lr}
 800c346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c348:	f7ff ffdc 	bl	800c304 <HAL_RCC_GetHCLKFreq>
 800c34c:	4601      	mov	r1, r0
 800c34e:	4b05      	ldr	r3, [pc, #20]	; (800c364 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c350:	689b      	ldr	r3, [r3, #8]
 800c352:	0b5b      	lsrs	r3, r3, #13
 800c354:	f003 0307 	and.w	r3, r3, #7
 800c358:	4a03      	ldr	r2, [pc, #12]	; (800c368 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c35a:	5cd3      	ldrb	r3, [r2, r3]
 800c35c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c360:	4618      	mov	r0, r3
 800c362:	bd80      	pop	{r7, pc}
 800c364:	40023800 	.word	0x40023800
 800c368:	0800f4ac 	.word	0x0800f4ac

0800c36c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b086      	sub	sp, #24
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c374:	2300      	movs	r3, #0
 800c376:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800c378:	2300      	movs	r3, #0
 800c37a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	f003 0301 	and.w	r3, r3, #1
 800c384:	2b00      	cmp	r3, #0
 800c386:	d105      	bne.n	800c394 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c390:	2b00      	cmp	r3, #0
 800c392:	d035      	beq.n	800c400 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c394:	4b62      	ldr	r3, [pc, #392]	; (800c520 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800c396:	2200      	movs	r2, #0
 800c398:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c39a:	f7fc fdad 	bl	8008ef8 <HAL_GetTick>
 800c39e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c3a0:	e008      	b.n	800c3b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c3a2:	f7fc fda9 	bl	8008ef8 <HAL_GetTick>
 800c3a6:	4602      	mov	r2, r0
 800c3a8:	697b      	ldr	r3, [r7, #20]
 800c3aa:	1ad3      	subs	r3, r2, r3
 800c3ac:	2b02      	cmp	r3, #2
 800c3ae:	d901      	bls.n	800c3b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c3b0:	2303      	movs	r3, #3
 800c3b2:	e0b0      	b.n	800c516 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c3b4:	4b5b      	ldr	r3, [pc, #364]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d1f0      	bne.n	800c3a2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	685b      	ldr	r3, [r3, #4]
 800c3c4:	019a      	lsls	r2, r3, #6
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	689b      	ldr	r3, [r3, #8]
 800c3ca:	071b      	lsls	r3, r3, #28
 800c3cc:	4955      	ldr	r1, [pc, #340]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c3ce:	4313      	orrs	r3, r2
 800c3d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c3d4:	4b52      	ldr	r3, [pc, #328]	; (800c520 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800c3d6:	2201      	movs	r2, #1
 800c3d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c3da:	f7fc fd8d 	bl	8008ef8 <HAL_GetTick>
 800c3de:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c3e0:	e008      	b.n	800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c3e2:	f7fc fd89 	bl	8008ef8 <HAL_GetTick>
 800c3e6:	4602      	mov	r2, r0
 800c3e8:	697b      	ldr	r3, [r7, #20]
 800c3ea:	1ad3      	subs	r3, r2, r3
 800c3ec:	2b02      	cmp	r3, #2
 800c3ee:	d901      	bls.n	800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c3f0:	2303      	movs	r3, #3
 800c3f2:	e090      	b.n	800c516 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c3f4:	4b4b      	ldr	r3, [pc, #300]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d0f0      	beq.n	800c3e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	f003 0302 	and.w	r3, r3, #2
 800c408:	2b00      	cmp	r3, #0
 800c40a:	f000 8083 	beq.w	800c514 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c40e:	2300      	movs	r3, #0
 800c410:	60fb      	str	r3, [r7, #12]
 800c412:	4b44      	ldr	r3, [pc, #272]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c416:	4a43      	ldr	r2, [pc, #268]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c41c:	6413      	str	r3, [r2, #64]	; 0x40
 800c41e:	4b41      	ldr	r3, [pc, #260]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c426:	60fb      	str	r3, [r7, #12]
 800c428:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800c42a:	4b3f      	ldr	r3, [pc, #252]	; (800c528 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	4a3e      	ldr	r2, [pc, #248]	; (800c528 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800c430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c434:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c436:	f7fc fd5f 	bl	8008ef8 <HAL_GetTick>
 800c43a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c43c:	e008      	b.n	800c450 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800c43e:	f7fc fd5b 	bl	8008ef8 <HAL_GetTick>
 800c442:	4602      	mov	r2, r0
 800c444:	697b      	ldr	r3, [r7, #20]
 800c446:	1ad3      	subs	r3, r2, r3
 800c448:	2b02      	cmp	r3, #2
 800c44a:	d901      	bls.n	800c450 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800c44c:	2303      	movs	r3, #3
 800c44e:	e062      	b.n	800c516 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c450:	4b35      	ldr	r3, [pc, #212]	; (800c528 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d0f0      	beq.n	800c43e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c45c:	4b31      	ldr	r3, [pc, #196]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c45e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c460:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c464:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d02f      	beq.n	800c4cc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	68db      	ldr	r3, [r3, #12]
 800c470:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c474:	693a      	ldr	r2, [r7, #16]
 800c476:	429a      	cmp	r2, r3
 800c478:	d028      	beq.n	800c4cc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c47a:	4b2a      	ldr	r3, [pc, #168]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c47c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c47e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c482:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c484:	4b29      	ldr	r3, [pc, #164]	; (800c52c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800c486:	2201      	movs	r2, #1
 800c488:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c48a:	4b28      	ldr	r3, [pc, #160]	; (800c52c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800c48c:	2200      	movs	r2, #0
 800c48e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800c490:	4a24      	ldr	r2, [pc, #144]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c492:	693b      	ldr	r3, [r7, #16]
 800c494:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c496:	4b23      	ldr	r3, [pc, #140]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c49a:	f003 0301 	and.w	r3, r3, #1
 800c49e:	2b01      	cmp	r3, #1
 800c4a0:	d114      	bne.n	800c4cc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800c4a2:	f7fc fd29 	bl	8008ef8 <HAL_GetTick>
 800c4a6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c4a8:	e00a      	b.n	800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c4aa:	f7fc fd25 	bl	8008ef8 <HAL_GetTick>
 800c4ae:	4602      	mov	r2, r0
 800c4b0:	697b      	ldr	r3, [r7, #20]
 800c4b2:	1ad3      	subs	r3, r2, r3
 800c4b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4b8:	4293      	cmp	r3, r2
 800c4ba:	d901      	bls.n	800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800c4bc:	2303      	movs	r3, #3
 800c4be:	e02a      	b.n	800c516 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c4c0:	4b18      	ldr	r3, [pc, #96]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c4c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4c4:	f003 0302 	and.w	r3, r3, #2
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d0ee      	beq.n	800c4aa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	68db      	ldr	r3, [r3, #12]
 800c4d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c4d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c4d8:	d10d      	bne.n	800c4f6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800c4da:	4b12      	ldr	r3, [pc, #72]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c4dc:	689b      	ldr	r3, [r3, #8]
 800c4de:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	68db      	ldr	r3, [r3, #12]
 800c4e6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c4ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c4ee:	490d      	ldr	r1, [pc, #52]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c4f0:	4313      	orrs	r3, r2
 800c4f2:	608b      	str	r3, [r1, #8]
 800c4f4:	e005      	b.n	800c502 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800c4f6:	4b0b      	ldr	r3, [pc, #44]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c4f8:	689b      	ldr	r3, [r3, #8]
 800c4fa:	4a0a      	ldr	r2, [pc, #40]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c4fc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c500:	6093      	str	r3, [r2, #8]
 800c502:	4b08      	ldr	r3, [pc, #32]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c504:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	68db      	ldr	r3, [r3, #12]
 800c50a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c50e:	4905      	ldr	r1, [pc, #20]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c510:	4313      	orrs	r3, r2
 800c512:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800c514:	2300      	movs	r3, #0
}
 800c516:	4618      	mov	r0, r3
 800c518:	3718      	adds	r7, #24
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}
 800c51e:	bf00      	nop
 800c520:	42470068 	.word	0x42470068
 800c524:	40023800 	.word	0x40023800
 800c528:	40007000 	.word	0x40007000
 800c52c:	42470e40 	.word	0x42470e40

0800c530 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800c530:	b480      	push	{r7}
 800c532:	b087      	sub	sp, #28
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800c538:	2300      	movs	r3, #0
 800c53a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800c53c:	2300      	movs	r3, #0
 800c53e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800c540:	2300      	movs	r3, #0
 800c542:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800c544:	2300      	movs	r3, #0
 800c546:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2b01      	cmp	r3, #1
 800c54c:	d13d      	bne.n	800c5ca <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800c54e:	4b22      	ldr	r3, [pc, #136]	; (800c5d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800c550:	689b      	ldr	r3, [r3, #8]
 800c552:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c556:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d004      	beq.n	800c568 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800c55e:	2b01      	cmp	r3, #1
 800c560:	d12f      	bne.n	800c5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800c562:	4b1e      	ldr	r3, [pc, #120]	; (800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800c564:	617b      	str	r3, [r7, #20]
          break;
 800c566:	e02f      	b.n	800c5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800c568:	4b1b      	ldr	r3, [pc, #108]	; (800c5d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800c56a:	685b      	ldr	r3, [r3, #4]
 800c56c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c570:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c574:	d108      	bne.n	800c588 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c576:	4b18      	ldr	r3, [pc, #96]	; (800c5d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800c578:	685b      	ldr	r3, [r3, #4]
 800c57a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c57e:	4a18      	ldr	r2, [pc, #96]	; (800c5e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800c580:	fbb2 f3f3 	udiv	r3, r2, r3
 800c584:	613b      	str	r3, [r7, #16]
 800c586:	e007      	b.n	800c598 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c588:	4b13      	ldr	r3, [pc, #76]	; (800c5d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800c58a:	685b      	ldr	r3, [r3, #4]
 800c58c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c590:	4a14      	ldr	r2, [pc, #80]	; (800c5e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800c592:	fbb2 f3f3 	udiv	r3, r2, r3
 800c596:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800c598:	4b0f      	ldr	r3, [pc, #60]	; (800c5d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800c59a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c59e:	099b      	lsrs	r3, r3, #6
 800c5a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c5a4:	693b      	ldr	r3, [r7, #16]
 800c5a6:	fb02 f303 	mul.w	r3, r2, r3
 800c5aa:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800c5ac:	4b0a      	ldr	r3, [pc, #40]	; (800c5d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800c5ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c5b2:	0f1b      	lsrs	r3, r3, #28
 800c5b4:	f003 0307 	and.w	r3, r3, #7
 800c5b8:	68ba      	ldr	r2, [r7, #8]
 800c5ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5be:	617b      	str	r3, [r7, #20]
          break;
 800c5c0:	e002      	b.n	800c5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	617b      	str	r3, [r7, #20]
          break;
 800c5c6:	bf00      	nop
        }
      }
      break;
 800c5c8:	bf00      	nop
    }
  }
  return frequency;
 800c5ca:	697b      	ldr	r3, [r7, #20]
}
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	371c      	adds	r7, #28
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d6:	4770      	bx	lr
 800c5d8:	40023800 	.word	0x40023800
 800c5dc:	00bb8000 	.word	0x00bb8000
 800c5e0:	007a1200 	.word	0x007a1200
 800c5e4:	00f42400 	.word	0x00f42400

0800c5e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b082      	sub	sp, #8
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d101      	bne.n	800c5fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c5f6:	2301      	movs	r3, #1
 800c5f8:	e056      	b.n	800c6a8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c606:	b2db      	uxtb	r3, r3
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d106      	bne.n	800c61a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2200      	movs	r2, #0
 800c610:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c614:	6878      	ldr	r0, [r7, #4]
 800c616:	f7fc facb 	bl	8008bb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2202      	movs	r2, #2
 800c61e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	681a      	ldr	r2, [r3, #0]
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c630:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	685a      	ldr	r2, [r3, #4]
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	689b      	ldr	r3, [r3, #8]
 800c63a:	431a      	orrs	r2, r3
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	68db      	ldr	r3, [r3, #12]
 800c640:	431a      	orrs	r2, r3
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	691b      	ldr	r3, [r3, #16]
 800c646:	431a      	orrs	r2, r3
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	695b      	ldr	r3, [r3, #20]
 800c64c:	431a      	orrs	r2, r3
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	699b      	ldr	r3, [r3, #24]
 800c652:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c656:	431a      	orrs	r2, r3
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	69db      	ldr	r3, [r3, #28]
 800c65c:	431a      	orrs	r2, r3
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6a1b      	ldr	r3, [r3, #32]
 800c662:	ea42 0103 	orr.w	r1, r2, r3
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	430a      	orrs	r2, r1
 800c670:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	699b      	ldr	r3, [r3, #24]
 800c676:	0c1b      	lsrs	r3, r3, #16
 800c678:	f003 0104 	and.w	r1, r3, #4
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	430a      	orrs	r2, r1
 800c686:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	69da      	ldr	r2, [r3, #28]
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c696:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2200      	movs	r2, #0
 800c69c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	2201      	movs	r2, #1
 800c6a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800c6a6:	2300      	movs	r3, #0
}
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	3708      	adds	r7, #8
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bd80      	pop	{r7, pc}

0800c6b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b082      	sub	sp, #8
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d101      	bne.n	800c6c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c6be:	2301      	movs	r3, #1
 800c6c0:	e03f      	b.n	800c742 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c6c8:	b2db      	uxtb	r3, r3
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d106      	bne.n	800c6dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f7fc fab2 	bl	8008c40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2224      	movs	r2, #36	; 0x24
 800c6e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	68da      	ldr	r2, [r3, #12]
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c6f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c6f4:	6878      	ldr	r0, [r7, #4]
 800c6f6:	f000 f829 	bl	800c74c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	691a      	ldr	r2, [r3, #16]
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c708:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	695a      	ldr	r2, [r3, #20]
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c718:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	68da      	ldr	r2, [r3, #12]
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c728:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2200      	movs	r2, #0
 800c72e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2220      	movs	r2, #32
 800c734:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2220      	movs	r2, #32
 800c73c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800c740:	2300      	movs	r3, #0
}
 800c742:	4618      	mov	r0, r3
 800c744:	3708      	adds	r7, #8
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}
	...

0800c74c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c74c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c750:	b085      	sub	sp, #20
 800c752:	af00      	add	r7, sp, #0
 800c754:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	691b      	ldr	r3, [r3, #16]
 800c75c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	68da      	ldr	r2, [r3, #12]
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	430a      	orrs	r2, r1
 800c76a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	689a      	ldr	r2, [r3, #8]
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	691b      	ldr	r3, [r3, #16]
 800c774:	431a      	orrs	r2, r3
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	695b      	ldr	r3, [r3, #20]
 800c77a:	431a      	orrs	r2, r3
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	69db      	ldr	r3, [r3, #28]
 800c780:	4313      	orrs	r3, r2
 800c782:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	68db      	ldr	r3, [r3, #12]
 800c78a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800c78e:	f023 030c 	bic.w	r3, r3, #12
 800c792:	687a      	ldr	r2, [r7, #4]
 800c794:	6812      	ldr	r2, [r2, #0]
 800c796:	68f9      	ldr	r1, [r7, #12]
 800c798:	430b      	orrs	r3, r1
 800c79a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	695b      	ldr	r3, [r3, #20]
 800c7a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	699a      	ldr	r2, [r3, #24]
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	430a      	orrs	r2, r1
 800c7b0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	69db      	ldr	r3, [r3, #28]
 800c7b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c7ba:	f040 818b 	bne.w	800cad4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	4ac1      	ldr	r2, [pc, #772]	; (800cac8 <UART_SetConfig+0x37c>)
 800c7c4:	4293      	cmp	r3, r2
 800c7c6:	d005      	beq.n	800c7d4 <UART_SetConfig+0x88>
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	4abf      	ldr	r2, [pc, #764]	; (800cacc <UART_SetConfig+0x380>)
 800c7ce:	4293      	cmp	r3, r2
 800c7d0:	f040 80bd 	bne.w	800c94e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c7d4:	f7ff fdb6 	bl	800c344 <HAL_RCC_GetPCLK2Freq>
 800c7d8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c7da:	68bb      	ldr	r3, [r7, #8]
 800c7dc:	461d      	mov	r5, r3
 800c7de:	f04f 0600 	mov.w	r6, #0
 800c7e2:	46a8      	mov	r8, r5
 800c7e4:	46b1      	mov	r9, r6
 800c7e6:	eb18 0308 	adds.w	r3, r8, r8
 800c7ea:	eb49 0409 	adc.w	r4, r9, r9
 800c7ee:	4698      	mov	r8, r3
 800c7f0:	46a1      	mov	r9, r4
 800c7f2:	eb18 0805 	adds.w	r8, r8, r5
 800c7f6:	eb49 0906 	adc.w	r9, r9, r6
 800c7fa:	f04f 0100 	mov.w	r1, #0
 800c7fe:	f04f 0200 	mov.w	r2, #0
 800c802:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800c806:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800c80a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800c80e:	4688      	mov	r8, r1
 800c810:	4691      	mov	r9, r2
 800c812:	eb18 0005 	adds.w	r0, r8, r5
 800c816:	eb49 0106 	adc.w	r1, r9, r6
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	685b      	ldr	r3, [r3, #4]
 800c81e:	461d      	mov	r5, r3
 800c820:	f04f 0600 	mov.w	r6, #0
 800c824:	196b      	adds	r3, r5, r5
 800c826:	eb46 0406 	adc.w	r4, r6, r6
 800c82a:	461a      	mov	r2, r3
 800c82c:	4623      	mov	r3, r4
 800c82e:	f7fb fccb 	bl	80081c8 <__aeabi_uldivmod>
 800c832:	4603      	mov	r3, r0
 800c834:	460c      	mov	r4, r1
 800c836:	461a      	mov	r2, r3
 800c838:	4ba5      	ldr	r3, [pc, #660]	; (800cad0 <UART_SetConfig+0x384>)
 800c83a:	fba3 2302 	umull	r2, r3, r3, r2
 800c83e:	095b      	lsrs	r3, r3, #5
 800c840:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	461d      	mov	r5, r3
 800c848:	f04f 0600 	mov.w	r6, #0
 800c84c:	46a9      	mov	r9, r5
 800c84e:	46b2      	mov	sl, r6
 800c850:	eb19 0309 	adds.w	r3, r9, r9
 800c854:	eb4a 040a 	adc.w	r4, sl, sl
 800c858:	4699      	mov	r9, r3
 800c85a:	46a2      	mov	sl, r4
 800c85c:	eb19 0905 	adds.w	r9, r9, r5
 800c860:	eb4a 0a06 	adc.w	sl, sl, r6
 800c864:	f04f 0100 	mov.w	r1, #0
 800c868:	f04f 0200 	mov.w	r2, #0
 800c86c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c870:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c874:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c878:	4689      	mov	r9, r1
 800c87a:	4692      	mov	sl, r2
 800c87c:	eb19 0005 	adds.w	r0, r9, r5
 800c880:	eb4a 0106 	adc.w	r1, sl, r6
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	685b      	ldr	r3, [r3, #4]
 800c888:	461d      	mov	r5, r3
 800c88a:	f04f 0600 	mov.w	r6, #0
 800c88e:	196b      	adds	r3, r5, r5
 800c890:	eb46 0406 	adc.w	r4, r6, r6
 800c894:	461a      	mov	r2, r3
 800c896:	4623      	mov	r3, r4
 800c898:	f7fb fc96 	bl	80081c8 <__aeabi_uldivmod>
 800c89c:	4603      	mov	r3, r0
 800c89e:	460c      	mov	r4, r1
 800c8a0:	461a      	mov	r2, r3
 800c8a2:	4b8b      	ldr	r3, [pc, #556]	; (800cad0 <UART_SetConfig+0x384>)
 800c8a4:	fba3 1302 	umull	r1, r3, r3, r2
 800c8a8:	095b      	lsrs	r3, r3, #5
 800c8aa:	2164      	movs	r1, #100	; 0x64
 800c8ac:	fb01 f303 	mul.w	r3, r1, r3
 800c8b0:	1ad3      	subs	r3, r2, r3
 800c8b2:	00db      	lsls	r3, r3, #3
 800c8b4:	3332      	adds	r3, #50	; 0x32
 800c8b6:	4a86      	ldr	r2, [pc, #536]	; (800cad0 <UART_SetConfig+0x384>)
 800c8b8:	fba2 2303 	umull	r2, r3, r2, r3
 800c8bc:	095b      	lsrs	r3, r3, #5
 800c8be:	005b      	lsls	r3, r3, #1
 800c8c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c8c4:	4498      	add	r8, r3
 800c8c6:	68bb      	ldr	r3, [r7, #8]
 800c8c8:	461d      	mov	r5, r3
 800c8ca:	f04f 0600 	mov.w	r6, #0
 800c8ce:	46a9      	mov	r9, r5
 800c8d0:	46b2      	mov	sl, r6
 800c8d2:	eb19 0309 	adds.w	r3, r9, r9
 800c8d6:	eb4a 040a 	adc.w	r4, sl, sl
 800c8da:	4699      	mov	r9, r3
 800c8dc:	46a2      	mov	sl, r4
 800c8de:	eb19 0905 	adds.w	r9, r9, r5
 800c8e2:	eb4a 0a06 	adc.w	sl, sl, r6
 800c8e6:	f04f 0100 	mov.w	r1, #0
 800c8ea:	f04f 0200 	mov.w	r2, #0
 800c8ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c8f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c8f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c8fa:	4689      	mov	r9, r1
 800c8fc:	4692      	mov	sl, r2
 800c8fe:	eb19 0005 	adds.w	r0, r9, r5
 800c902:	eb4a 0106 	adc.w	r1, sl, r6
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	685b      	ldr	r3, [r3, #4]
 800c90a:	461d      	mov	r5, r3
 800c90c:	f04f 0600 	mov.w	r6, #0
 800c910:	196b      	adds	r3, r5, r5
 800c912:	eb46 0406 	adc.w	r4, r6, r6
 800c916:	461a      	mov	r2, r3
 800c918:	4623      	mov	r3, r4
 800c91a:	f7fb fc55 	bl	80081c8 <__aeabi_uldivmod>
 800c91e:	4603      	mov	r3, r0
 800c920:	460c      	mov	r4, r1
 800c922:	461a      	mov	r2, r3
 800c924:	4b6a      	ldr	r3, [pc, #424]	; (800cad0 <UART_SetConfig+0x384>)
 800c926:	fba3 1302 	umull	r1, r3, r3, r2
 800c92a:	095b      	lsrs	r3, r3, #5
 800c92c:	2164      	movs	r1, #100	; 0x64
 800c92e:	fb01 f303 	mul.w	r3, r1, r3
 800c932:	1ad3      	subs	r3, r2, r3
 800c934:	00db      	lsls	r3, r3, #3
 800c936:	3332      	adds	r3, #50	; 0x32
 800c938:	4a65      	ldr	r2, [pc, #404]	; (800cad0 <UART_SetConfig+0x384>)
 800c93a:	fba2 2303 	umull	r2, r3, r2, r3
 800c93e:	095b      	lsrs	r3, r3, #5
 800c940:	f003 0207 	and.w	r2, r3, #7
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	4442      	add	r2, r8
 800c94a:	609a      	str	r2, [r3, #8]
 800c94c:	e26f      	b.n	800ce2e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c94e:	f7ff fce5 	bl	800c31c <HAL_RCC_GetPCLK1Freq>
 800c952:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	461d      	mov	r5, r3
 800c958:	f04f 0600 	mov.w	r6, #0
 800c95c:	46a8      	mov	r8, r5
 800c95e:	46b1      	mov	r9, r6
 800c960:	eb18 0308 	adds.w	r3, r8, r8
 800c964:	eb49 0409 	adc.w	r4, r9, r9
 800c968:	4698      	mov	r8, r3
 800c96a:	46a1      	mov	r9, r4
 800c96c:	eb18 0805 	adds.w	r8, r8, r5
 800c970:	eb49 0906 	adc.w	r9, r9, r6
 800c974:	f04f 0100 	mov.w	r1, #0
 800c978:	f04f 0200 	mov.w	r2, #0
 800c97c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800c980:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800c984:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800c988:	4688      	mov	r8, r1
 800c98a:	4691      	mov	r9, r2
 800c98c:	eb18 0005 	adds.w	r0, r8, r5
 800c990:	eb49 0106 	adc.w	r1, r9, r6
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	685b      	ldr	r3, [r3, #4]
 800c998:	461d      	mov	r5, r3
 800c99a:	f04f 0600 	mov.w	r6, #0
 800c99e:	196b      	adds	r3, r5, r5
 800c9a0:	eb46 0406 	adc.w	r4, r6, r6
 800c9a4:	461a      	mov	r2, r3
 800c9a6:	4623      	mov	r3, r4
 800c9a8:	f7fb fc0e 	bl	80081c8 <__aeabi_uldivmod>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	460c      	mov	r4, r1
 800c9b0:	461a      	mov	r2, r3
 800c9b2:	4b47      	ldr	r3, [pc, #284]	; (800cad0 <UART_SetConfig+0x384>)
 800c9b4:	fba3 2302 	umull	r2, r3, r3, r2
 800c9b8:	095b      	lsrs	r3, r3, #5
 800c9ba:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800c9be:	68bb      	ldr	r3, [r7, #8]
 800c9c0:	461d      	mov	r5, r3
 800c9c2:	f04f 0600 	mov.w	r6, #0
 800c9c6:	46a9      	mov	r9, r5
 800c9c8:	46b2      	mov	sl, r6
 800c9ca:	eb19 0309 	adds.w	r3, r9, r9
 800c9ce:	eb4a 040a 	adc.w	r4, sl, sl
 800c9d2:	4699      	mov	r9, r3
 800c9d4:	46a2      	mov	sl, r4
 800c9d6:	eb19 0905 	adds.w	r9, r9, r5
 800c9da:	eb4a 0a06 	adc.w	sl, sl, r6
 800c9de:	f04f 0100 	mov.w	r1, #0
 800c9e2:	f04f 0200 	mov.w	r2, #0
 800c9e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c9ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c9ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c9f2:	4689      	mov	r9, r1
 800c9f4:	4692      	mov	sl, r2
 800c9f6:	eb19 0005 	adds.w	r0, r9, r5
 800c9fa:	eb4a 0106 	adc.w	r1, sl, r6
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	685b      	ldr	r3, [r3, #4]
 800ca02:	461d      	mov	r5, r3
 800ca04:	f04f 0600 	mov.w	r6, #0
 800ca08:	196b      	adds	r3, r5, r5
 800ca0a:	eb46 0406 	adc.w	r4, r6, r6
 800ca0e:	461a      	mov	r2, r3
 800ca10:	4623      	mov	r3, r4
 800ca12:	f7fb fbd9 	bl	80081c8 <__aeabi_uldivmod>
 800ca16:	4603      	mov	r3, r0
 800ca18:	460c      	mov	r4, r1
 800ca1a:	461a      	mov	r2, r3
 800ca1c:	4b2c      	ldr	r3, [pc, #176]	; (800cad0 <UART_SetConfig+0x384>)
 800ca1e:	fba3 1302 	umull	r1, r3, r3, r2
 800ca22:	095b      	lsrs	r3, r3, #5
 800ca24:	2164      	movs	r1, #100	; 0x64
 800ca26:	fb01 f303 	mul.w	r3, r1, r3
 800ca2a:	1ad3      	subs	r3, r2, r3
 800ca2c:	00db      	lsls	r3, r3, #3
 800ca2e:	3332      	adds	r3, #50	; 0x32
 800ca30:	4a27      	ldr	r2, [pc, #156]	; (800cad0 <UART_SetConfig+0x384>)
 800ca32:	fba2 2303 	umull	r2, r3, r2, r3
 800ca36:	095b      	lsrs	r3, r3, #5
 800ca38:	005b      	lsls	r3, r3, #1
 800ca3a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ca3e:	4498      	add	r8, r3
 800ca40:	68bb      	ldr	r3, [r7, #8]
 800ca42:	461d      	mov	r5, r3
 800ca44:	f04f 0600 	mov.w	r6, #0
 800ca48:	46a9      	mov	r9, r5
 800ca4a:	46b2      	mov	sl, r6
 800ca4c:	eb19 0309 	adds.w	r3, r9, r9
 800ca50:	eb4a 040a 	adc.w	r4, sl, sl
 800ca54:	4699      	mov	r9, r3
 800ca56:	46a2      	mov	sl, r4
 800ca58:	eb19 0905 	adds.w	r9, r9, r5
 800ca5c:	eb4a 0a06 	adc.w	sl, sl, r6
 800ca60:	f04f 0100 	mov.w	r1, #0
 800ca64:	f04f 0200 	mov.w	r2, #0
 800ca68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ca6c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ca70:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ca74:	4689      	mov	r9, r1
 800ca76:	4692      	mov	sl, r2
 800ca78:	eb19 0005 	adds.w	r0, r9, r5
 800ca7c:	eb4a 0106 	adc.w	r1, sl, r6
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	685b      	ldr	r3, [r3, #4]
 800ca84:	461d      	mov	r5, r3
 800ca86:	f04f 0600 	mov.w	r6, #0
 800ca8a:	196b      	adds	r3, r5, r5
 800ca8c:	eb46 0406 	adc.w	r4, r6, r6
 800ca90:	461a      	mov	r2, r3
 800ca92:	4623      	mov	r3, r4
 800ca94:	f7fb fb98 	bl	80081c8 <__aeabi_uldivmod>
 800ca98:	4603      	mov	r3, r0
 800ca9a:	460c      	mov	r4, r1
 800ca9c:	461a      	mov	r2, r3
 800ca9e:	4b0c      	ldr	r3, [pc, #48]	; (800cad0 <UART_SetConfig+0x384>)
 800caa0:	fba3 1302 	umull	r1, r3, r3, r2
 800caa4:	095b      	lsrs	r3, r3, #5
 800caa6:	2164      	movs	r1, #100	; 0x64
 800caa8:	fb01 f303 	mul.w	r3, r1, r3
 800caac:	1ad3      	subs	r3, r2, r3
 800caae:	00db      	lsls	r3, r3, #3
 800cab0:	3332      	adds	r3, #50	; 0x32
 800cab2:	4a07      	ldr	r2, [pc, #28]	; (800cad0 <UART_SetConfig+0x384>)
 800cab4:	fba2 2303 	umull	r2, r3, r2, r3
 800cab8:	095b      	lsrs	r3, r3, #5
 800caba:	f003 0207 	and.w	r2, r3, #7
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	4442      	add	r2, r8
 800cac4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800cac6:	e1b2      	b.n	800ce2e <UART_SetConfig+0x6e2>
 800cac8:	40011000 	.word	0x40011000
 800cacc:	40011400 	.word	0x40011400
 800cad0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	4ad7      	ldr	r2, [pc, #860]	; (800ce38 <UART_SetConfig+0x6ec>)
 800cada:	4293      	cmp	r3, r2
 800cadc:	d005      	beq.n	800caea <UART_SetConfig+0x39e>
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	4ad6      	ldr	r2, [pc, #856]	; (800ce3c <UART_SetConfig+0x6f0>)
 800cae4:	4293      	cmp	r3, r2
 800cae6:	f040 80d1 	bne.w	800cc8c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800caea:	f7ff fc2b 	bl	800c344 <HAL_RCC_GetPCLK2Freq>
 800caee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800caf0:	68bb      	ldr	r3, [r7, #8]
 800caf2:	469a      	mov	sl, r3
 800caf4:	f04f 0b00 	mov.w	fp, #0
 800caf8:	46d0      	mov	r8, sl
 800cafa:	46d9      	mov	r9, fp
 800cafc:	eb18 0308 	adds.w	r3, r8, r8
 800cb00:	eb49 0409 	adc.w	r4, r9, r9
 800cb04:	4698      	mov	r8, r3
 800cb06:	46a1      	mov	r9, r4
 800cb08:	eb18 080a 	adds.w	r8, r8, sl
 800cb0c:	eb49 090b 	adc.w	r9, r9, fp
 800cb10:	f04f 0100 	mov.w	r1, #0
 800cb14:	f04f 0200 	mov.w	r2, #0
 800cb18:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800cb1c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800cb20:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800cb24:	4688      	mov	r8, r1
 800cb26:	4691      	mov	r9, r2
 800cb28:	eb1a 0508 	adds.w	r5, sl, r8
 800cb2c:	eb4b 0609 	adc.w	r6, fp, r9
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	685b      	ldr	r3, [r3, #4]
 800cb34:	4619      	mov	r1, r3
 800cb36:	f04f 0200 	mov.w	r2, #0
 800cb3a:	f04f 0300 	mov.w	r3, #0
 800cb3e:	f04f 0400 	mov.w	r4, #0
 800cb42:	0094      	lsls	r4, r2, #2
 800cb44:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800cb48:	008b      	lsls	r3, r1, #2
 800cb4a:	461a      	mov	r2, r3
 800cb4c:	4623      	mov	r3, r4
 800cb4e:	4628      	mov	r0, r5
 800cb50:	4631      	mov	r1, r6
 800cb52:	f7fb fb39 	bl	80081c8 <__aeabi_uldivmod>
 800cb56:	4603      	mov	r3, r0
 800cb58:	460c      	mov	r4, r1
 800cb5a:	461a      	mov	r2, r3
 800cb5c:	4bb8      	ldr	r3, [pc, #736]	; (800ce40 <UART_SetConfig+0x6f4>)
 800cb5e:	fba3 2302 	umull	r2, r3, r3, r2
 800cb62:	095b      	lsrs	r3, r3, #5
 800cb64:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800cb68:	68bb      	ldr	r3, [r7, #8]
 800cb6a:	469b      	mov	fp, r3
 800cb6c:	f04f 0c00 	mov.w	ip, #0
 800cb70:	46d9      	mov	r9, fp
 800cb72:	46e2      	mov	sl, ip
 800cb74:	eb19 0309 	adds.w	r3, r9, r9
 800cb78:	eb4a 040a 	adc.w	r4, sl, sl
 800cb7c:	4699      	mov	r9, r3
 800cb7e:	46a2      	mov	sl, r4
 800cb80:	eb19 090b 	adds.w	r9, r9, fp
 800cb84:	eb4a 0a0c 	adc.w	sl, sl, ip
 800cb88:	f04f 0100 	mov.w	r1, #0
 800cb8c:	f04f 0200 	mov.w	r2, #0
 800cb90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cb94:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800cb98:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800cb9c:	4689      	mov	r9, r1
 800cb9e:	4692      	mov	sl, r2
 800cba0:	eb1b 0509 	adds.w	r5, fp, r9
 800cba4:	eb4c 060a 	adc.w	r6, ip, sl
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	685b      	ldr	r3, [r3, #4]
 800cbac:	4619      	mov	r1, r3
 800cbae:	f04f 0200 	mov.w	r2, #0
 800cbb2:	f04f 0300 	mov.w	r3, #0
 800cbb6:	f04f 0400 	mov.w	r4, #0
 800cbba:	0094      	lsls	r4, r2, #2
 800cbbc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800cbc0:	008b      	lsls	r3, r1, #2
 800cbc2:	461a      	mov	r2, r3
 800cbc4:	4623      	mov	r3, r4
 800cbc6:	4628      	mov	r0, r5
 800cbc8:	4631      	mov	r1, r6
 800cbca:	f7fb fafd 	bl	80081c8 <__aeabi_uldivmod>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	460c      	mov	r4, r1
 800cbd2:	461a      	mov	r2, r3
 800cbd4:	4b9a      	ldr	r3, [pc, #616]	; (800ce40 <UART_SetConfig+0x6f4>)
 800cbd6:	fba3 1302 	umull	r1, r3, r3, r2
 800cbda:	095b      	lsrs	r3, r3, #5
 800cbdc:	2164      	movs	r1, #100	; 0x64
 800cbde:	fb01 f303 	mul.w	r3, r1, r3
 800cbe2:	1ad3      	subs	r3, r2, r3
 800cbe4:	011b      	lsls	r3, r3, #4
 800cbe6:	3332      	adds	r3, #50	; 0x32
 800cbe8:	4a95      	ldr	r2, [pc, #596]	; (800ce40 <UART_SetConfig+0x6f4>)
 800cbea:	fba2 2303 	umull	r2, r3, r2, r3
 800cbee:	095b      	lsrs	r3, r3, #5
 800cbf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cbf4:	4498      	add	r8, r3
 800cbf6:	68bb      	ldr	r3, [r7, #8]
 800cbf8:	469b      	mov	fp, r3
 800cbfa:	f04f 0c00 	mov.w	ip, #0
 800cbfe:	46d9      	mov	r9, fp
 800cc00:	46e2      	mov	sl, ip
 800cc02:	eb19 0309 	adds.w	r3, r9, r9
 800cc06:	eb4a 040a 	adc.w	r4, sl, sl
 800cc0a:	4699      	mov	r9, r3
 800cc0c:	46a2      	mov	sl, r4
 800cc0e:	eb19 090b 	adds.w	r9, r9, fp
 800cc12:	eb4a 0a0c 	adc.w	sl, sl, ip
 800cc16:	f04f 0100 	mov.w	r1, #0
 800cc1a:	f04f 0200 	mov.w	r2, #0
 800cc1e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cc22:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800cc26:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800cc2a:	4689      	mov	r9, r1
 800cc2c:	4692      	mov	sl, r2
 800cc2e:	eb1b 0509 	adds.w	r5, fp, r9
 800cc32:	eb4c 060a 	adc.w	r6, ip, sl
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	685b      	ldr	r3, [r3, #4]
 800cc3a:	4619      	mov	r1, r3
 800cc3c:	f04f 0200 	mov.w	r2, #0
 800cc40:	f04f 0300 	mov.w	r3, #0
 800cc44:	f04f 0400 	mov.w	r4, #0
 800cc48:	0094      	lsls	r4, r2, #2
 800cc4a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800cc4e:	008b      	lsls	r3, r1, #2
 800cc50:	461a      	mov	r2, r3
 800cc52:	4623      	mov	r3, r4
 800cc54:	4628      	mov	r0, r5
 800cc56:	4631      	mov	r1, r6
 800cc58:	f7fb fab6 	bl	80081c8 <__aeabi_uldivmod>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	460c      	mov	r4, r1
 800cc60:	461a      	mov	r2, r3
 800cc62:	4b77      	ldr	r3, [pc, #476]	; (800ce40 <UART_SetConfig+0x6f4>)
 800cc64:	fba3 1302 	umull	r1, r3, r3, r2
 800cc68:	095b      	lsrs	r3, r3, #5
 800cc6a:	2164      	movs	r1, #100	; 0x64
 800cc6c:	fb01 f303 	mul.w	r3, r1, r3
 800cc70:	1ad3      	subs	r3, r2, r3
 800cc72:	011b      	lsls	r3, r3, #4
 800cc74:	3332      	adds	r3, #50	; 0x32
 800cc76:	4a72      	ldr	r2, [pc, #456]	; (800ce40 <UART_SetConfig+0x6f4>)
 800cc78:	fba2 2303 	umull	r2, r3, r2, r3
 800cc7c:	095b      	lsrs	r3, r3, #5
 800cc7e:	f003 020f 	and.w	r2, r3, #15
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	4442      	add	r2, r8
 800cc88:	609a      	str	r2, [r3, #8]
 800cc8a:	e0d0      	b.n	800ce2e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800cc8c:	f7ff fb46 	bl	800c31c <HAL_RCC_GetPCLK1Freq>
 800cc90:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	469a      	mov	sl, r3
 800cc96:	f04f 0b00 	mov.w	fp, #0
 800cc9a:	46d0      	mov	r8, sl
 800cc9c:	46d9      	mov	r9, fp
 800cc9e:	eb18 0308 	adds.w	r3, r8, r8
 800cca2:	eb49 0409 	adc.w	r4, r9, r9
 800cca6:	4698      	mov	r8, r3
 800cca8:	46a1      	mov	r9, r4
 800ccaa:	eb18 080a 	adds.w	r8, r8, sl
 800ccae:	eb49 090b 	adc.w	r9, r9, fp
 800ccb2:	f04f 0100 	mov.w	r1, #0
 800ccb6:	f04f 0200 	mov.w	r2, #0
 800ccba:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ccbe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ccc2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ccc6:	4688      	mov	r8, r1
 800ccc8:	4691      	mov	r9, r2
 800ccca:	eb1a 0508 	adds.w	r5, sl, r8
 800ccce:	eb4b 0609 	adc.w	r6, fp, r9
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	685b      	ldr	r3, [r3, #4]
 800ccd6:	4619      	mov	r1, r3
 800ccd8:	f04f 0200 	mov.w	r2, #0
 800ccdc:	f04f 0300 	mov.w	r3, #0
 800cce0:	f04f 0400 	mov.w	r4, #0
 800cce4:	0094      	lsls	r4, r2, #2
 800cce6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ccea:	008b      	lsls	r3, r1, #2
 800ccec:	461a      	mov	r2, r3
 800ccee:	4623      	mov	r3, r4
 800ccf0:	4628      	mov	r0, r5
 800ccf2:	4631      	mov	r1, r6
 800ccf4:	f7fb fa68 	bl	80081c8 <__aeabi_uldivmod>
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	460c      	mov	r4, r1
 800ccfc:	461a      	mov	r2, r3
 800ccfe:	4b50      	ldr	r3, [pc, #320]	; (800ce40 <UART_SetConfig+0x6f4>)
 800cd00:	fba3 2302 	umull	r2, r3, r3, r2
 800cd04:	095b      	lsrs	r3, r3, #5
 800cd06:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800cd0a:	68bb      	ldr	r3, [r7, #8]
 800cd0c:	469b      	mov	fp, r3
 800cd0e:	f04f 0c00 	mov.w	ip, #0
 800cd12:	46d9      	mov	r9, fp
 800cd14:	46e2      	mov	sl, ip
 800cd16:	eb19 0309 	adds.w	r3, r9, r9
 800cd1a:	eb4a 040a 	adc.w	r4, sl, sl
 800cd1e:	4699      	mov	r9, r3
 800cd20:	46a2      	mov	sl, r4
 800cd22:	eb19 090b 	adds.w	r9, r9, fp
 800cd26:	eb4a 0a0c 	adc.w	sl, sl, ip
 800cd2a:	f04f 0100 	mov.w	r1, #0
 800cd2e:	f04f 0200 	mov.w	r2, #0
 800cd32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cd36:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800cd3a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800cd3e:	4689      	mov	r9, r1
 800cd40:	4692      	mov	sl, r2
 800cd42:	eb1b 0509 	adds.w	r5, fp, r9
 800cd46:	eb4c 060a 	adc.w	r6, ip, sl
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	685b      	ldr	r3, [r3, #4]
 800cd4e:	4619      	mov	r1, r3
 800cd50:	f04f 0200 	mov.w	r2, #0
 800cd54:	f04f 0300 	mov.w	r3, #0
 800cd58:	f04f 0400 	mov.w	r4, #0
 800cd5c:	0094      	lsls	r4, r2, #2
 800cd5e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800cd62:	008b      	lsls	r3, r1, #2
 800cd64:	461a      	mov	r2, r3
 800cd66:	4623      	mov	r3, r4
 800cd68:	4628      	mov	r0, r5
 800cd6a:	4631      	mov	r1, r6
 800cd6c:	f7fb fa2c 	bl	80081c8 <__aeabi_uldivmod>
 800cd70:	4603      	mov	r3, r0
 800cd72:	460c      	mov	r4, r1
 800cd74:	461a      	mov	r2, r3
 800cd76:	4b32      	ldr	r3, [pc, #200]	; (800ce40 <UART_SetConfig+0x6f4>)
 800cd78:	fba3 1302 	umull	r1, r3, r3, r2
 800cd7c:	095b      	lsrs	r3, r3, #5
 800cd7e:	2164      	movs	r1, #100	; 0x64
 800cd80:	fb01 f303 	mul.w	r3, r1, r3
 800cd84:	1ad3      	subs	r3, r2, r3
 800cd86:	011b      	lsls	r3, r3, #4
 800cd88:	3332      	adds	r3, #50	; 0x32
 800cd8a:	4a2d      	ldr	r2, [pc, #180]	; (800ce40 <UART_SetConfig+0x6f4>)
 800cd8c:	fba2 2303 	umull	r2, r3, r2, r3
 800cd90:	095b      	lsrs	r3, r3, #5
 800cd92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cd96:	4498      	add	r8, r3
 800cd98:	68bb      	ldr	r3, [r7, #8]
 800cd9a:	469b      	mov	fp, r3
 800cd9c:	f04f 0c00 	mov.w	ip, #0
 800cda0:	46d9      	mov	r9, fp
 800cda2:	46e2      	mov	sl, ip
 800cda4:	eb19 0309 	adds.w	r3, r9, r9
 800cda8:	eb4a 040a 	adc.w	r4, sl, sl
 800cdac:	4699      	mov	r9, r3
 800cdae:	46a2      	mov	sl, r4
 800cdb0:	eb19 090b 	adds.w	r9, r9, fp
 800cdb4:	eb4a 0a0c 	adc.w	sl, sl, ip
 800cdb8:	f04f 0100 	mov.w	r1, #0
 800cdbc:	f04f 0200 	mov.w	r2, #0
 800cdc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cdc4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800cdc8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800cdcc:	4689      	mov	r9, r1
 800cdce:	4692      	mov	sl, r2
 800cdd0:	eb1b 0509 	adds.w	r5, fp, r9
 800cdd4:	eb4c 060a 	adc.w	r6, ip, sl
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	685b      	ldr	r3, [r3, #4]
 800cddc:	4619      	mov	r1, r3
 800cdde:	f04f 0200 	mov.w	r2, #0
 800cde2:	f04f 0300 	mov.w	r3, #0
 800cde6:	f04f 0400 	mov.w	r4, #0
 800cdea:	0094      	lsls	r4, r2, #2
 800cdec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800cdf0:	008b      	lsls	r3, r1, #2
 800cdf2:	461a      	mov	r2, r3
 800cdf4:	4623      	mov	r3, r4
 800cdf6:	4628      	mov	r0, r5
 800cdf8:	4631      	mov	r1, r6
 800cdfa:	f7fb f9e5 	bl	80081c8 <__aeabi_uldivmod>
 800cdfe:	4603      	mov	r3, r0
 800ce00:	460c      	mov	r4, r1
 800ce02:	461a      	mov	r2, r3
 800ce04:	4b0e      	ldr	r3, [pc, #56]	; (800ce40 <UART_SetConfig+0x6f4>)
 800ce06:	fba3 1302 	umull	r1, r3, r3, r2
 800ce0a:	095b      	lsrs	r3, r3, #5
 800ce0c:	2164      	movs	r1, #100	; 0x64
 800ce0e:	fb01 f303 	mul.w	r3, r1, r3
 800ce12:	1ad3      	subs	r3, r2, r3
 800ce14:	011b      	lsls	r3, r3, #4
 800ce16:	3332      	adds	r3, #50	; 0x32
 800ce18:	4a09      	ldr	r2, [pc, #36]	; (800ce40 <UART_SetConfig+0x6f4>)
 800ce1a:	fba2 2303 	umull	r2, r3, r2, r3
 800ce1e:	095b      	lsrs	r3, r3, #5
 800ce20:	f003 020f 	and.w	r2, r3, #15
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	4442      	add	r2, r8
 800ce2a:	609a      	str	r2, [r3, #8]
}
 800ce2c:	e7ff      	b.n	800ce2e <UART_SetConfig+0x6e2>
 800ce2e:	bf00      	nop
 800ce30:	3714      	adds	r7, #20
 800ce32:	46bd      	mov	sp, r7
 800ce34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce38:	40011000 	.word	0x40011000
 800ce3c:	40011400 	.word	0x40011400
 800ce40:	51eb851f 	.word	0x51eb851f

0800ce44 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ce44:	b084      	sub	sp, #16
 800ce46:	b580      	push	{r7, lr}
 800ce48:	b084      	sub	sp, #16
 800ce4a:	af00      	add	r7, sp, #0
 800ce4c:	6078      	str	r0, [r7, #4]
 800ce4e:	f107 001c 	add.w	r0, r7, #28
 800ce52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ce56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce58:	2b01      	cmp	r3, #1
 800ce5a:	d122      	bne.n	800cea2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	68db      	ldr	r3, [r3, #12]
 800ce6c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800ce70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ce74:	687a      	ldr	r2, [r7, #4]
 800ce76:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	68db      	ldr	r3, [r3, #12]
 800ce7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ce84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce86:	2b01      	cmp	r3, #1
 800ce88:	d105      	bne.n	800ce96 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	68db      	ldr	r3, [r3, #12]
 800ce8e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800ce96:	6878      	ldr	r0, [r7, #4]
 800ce98:	f000 f94a 	bl	800d130 <USB_CoreReset>
 800ce9c:	4603      	mov	r3, r0
 800ce9e:	73fb      	strb	r3, [r7, #15]
 800cea0:	e01a      	b.n	800ced8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	68db      	ldr	r3, [r3, #12]
 800cea6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ceae:	6878      	ldr	r0, [r7, #4]
 800ceb0:	f000 f93e 	bl	800d130 <USB_CoreReset>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ceb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d106      	bne.n	800cecc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cec2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	639a      	str	r2, [r3, #56]	; 0x38
 800ceca:	e005      	b.n	800ced8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ced0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ced8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceda:	2b01      	cmp	r3, #1
 800cedc:	d10b      	bne.n	800cef6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	689b      	ldr	r3, [r3, #8]
 800cee2:	f043 0206 	orr.w	r2, r3, #6
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	689b      	ldr	r3, [r3, #8]
 800ceee:	f043 0220 	orr.w	r2, r3, #32
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800cef6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cef8:	4618      	mov	r0, r3
 800cefa:	3710      	adds	r7, #16
 800cefc:	46bd      	mov	sp, r7
 800cefe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cf02:	b004      	add	sp, #16
 800cf04:	4770      	bx	lr

0800cf06 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cf06:	b480      	push	{r7}
 800cf08:	b083      	sub	sp, #12
 800cf0a:	af00      	add	r7, sp, #0
 800cf0c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	689b      	ldr	r3, [r3, #8]
 800cf12:	f043 0201 	orr.w	r2, r3, #1
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cf1a:	2300      	movs	r3, #0
}
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	370c      	adds	r7, #12
 800cf20:	46bd      	mov	sp, r7
 800cf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf26:	4770      	bx	lr

0800cf28 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cf28:	b480      	push	{r7}
 800cf2a:	b083      	sub	sp, #12
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	689b      	ldr	r3, [r3, #8]
 800cf34:	f023 0201 	bic.w	r2, r3, #1
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cf3c:	2300      	movs	r3, #0
}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	370c      	adds	r7, #12
 800cf42:	46bd      	mov	sp, r7
 800cf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf48:	4770      	bx	lr

0800cf4a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800cf4a:	b580      	push	{r7, lr}
 800cf4c:	b082      	sub	sp, #8
 800cf4e:	af00      	add	r7, sp, #0
 800cf50:	6078      	str	r0, [r7, #4]
 800cf52:	460b      	mov	r3, r1
 800cf54:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	68db      	ldr	r3, [r3, #12]
 800cf5a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800cf62:	78fb      	ldrb	r3, [r7, #3]
 800cf64:	2b01      	cmp	r3, #1
 800cf66:	d106      	bne.n	800cf76 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	68db      	ldr	r3, [r3, #12]
 800cf6c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	60da      	str	r2, [r3, #12]
 800cf74:	e00b      	b.n	800cf8e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800cf76:	78fb      	ldrb	r3, [r7, #3]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d106      	bne.n	800cf8a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	68db      	ldr	r3, [r3, #12]
 800cf80:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	60da      	str	r2, [r3, #12]
 800cf88:	e001      	b.n	800cf8e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	e003      	b.n	800cf96 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800cf8e:	2032      	movs	r0, #50	; 0x32
 800cf90:	f7fb ffbe 	bl	8008f10 <HAL_Delay>

  return HAL_OK;
 800cf94:	2300      	movs	r3, #0
}
 800cf96:	4618      	mov	r0, r3
 800cf98:	3708      	adds	r7, #8
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd80      	pop	{r7, pc}
	...

0800cfa0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cfa0:	b480      	push	{r7}
 800cfa2:	b085      	sub	sp, #20
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
 800cfa8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800cfaa:	2300      	movs	r3, #0
 800cfac:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	019b      	lsls	r3, r3, #6
 800cfb2:	f043 0220 	orr.w	r2, r3, #32
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	3301      	adds	r3, #1
 800cfbe:	60fb      	str	r3, [r7, #12]
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	4a09      	ldr	r2, [pc, #36]	; (800cfe8 <USB_FlushTxFifo+0x48>)
 800cfc4:	4293      	cmp	r3, r2
 800cfc6:	d901      	bls.n	800cfcc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800cfc8:	2303      	movs	r3, #3
 800cfca:	e006      	b.n	800cfda <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	691b      	ldr	r3, [r3, #16]
 800cfd0:	f003 0320 	and.w	r3, r3, #32
 800cfd4:	2b20      	cmp	r3, #32
 800cfd6:	d0f0      	beq.n	800cfba <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800cfd8:	2300      	movs	r3, #0
}
 800cfda:	4618      	mov	r0, r3
 800cfdc:	3714      	adds	r7, #20
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe4:	4770      	bx	lr
 800cfe6:	bf00      	nop
 800cfe8:	00030d40 	.word	0x00030d40

0800cfec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cfec:	b480      	push	{r7}
 800cfee:	b085      	sub	sp, #20
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800cff4:	2300      	movs	r3, #0
 800cff6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2210      	movs	r2, #16
 800cffc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	3301      	adds	r3, #1
 800d002:	60fb      	str	r3, [r7, #12]
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	4a09      	ldr	r2, [pc, #36]	; (800d02c <USB_FlushRxFifo+0x40>)
 800d008:	4293      	cmp	r3, r2
 800d00a:	d901      	bls.n	800d010 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800d00c:	2303      	movs	r3, #3
 800d00e:	e006      	b.n	800d01e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	691b      	ldr	r3, [r3, #16]
 800d014:	f003 0310 	and.w	r3, r3, #16
 800d018:	2b10      	cmp	r3, #16
 800d01a:	d0f0      	beq.n	800cffe <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800d01c:	2300      	movs	r3, #0
}
 800d01e:	4618      	mov	r0, r3
 800d020:	3714      	adds	r7, #20
 800d022:	46bd      	mov	sp, r7
 800d024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d028:	4770      	bx	lr
 800d02a:	bf00      	nop
 800d02c:	00030d40 	.word	0x00030d40

0800d030 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d030:	b480      	push	{r7}
 800d032:	b089      	sub	sp, #36	; 0x24
 800d034:	af00      	add	r7, sp, #0
 800d036:	60f8      	str	r0, [r7, #12]
 800d038:	60b9      	str	r1, [r7, #8]
 800d03a:	4611      	mov	r1, r2
 800d03c:	461a      	mov	r2, r3
 800d03e:	460b      	mov	r3, r1
 800d040:	71fb      	strb	r3, [r7, #7]
 800d042:	4613      	mov	r3, r2
 800d044:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800d04a:	68bb      	ldr	r3, [r7, #8]
 800d04c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800d04e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d052:	2b00      	cmp	r3, #0
 800d054:	d11a      	bne.n	800d08c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d056:	88bb      	ldrh	r3, [r7, #4]
 800d058:	3303      	adds	r3, #3
 800d05a:	089b      	lsrs	r3, r3, #2
 800d05c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d05e:	2300      	movs	r3, #0
 800d060:	61bb      	str	r3, [r7, #24]
 800d062:	e00f      	b.n	800d084 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d064:	79fb      	ldrb	r3, [r7, #7]
 800d066:	031a      	lsls	r2, r3, #12
 800d068:	697b      	ldr	r3, [r7, #20]
 800d06a:	4413      	add	r3, r2
 800d06c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d070:	461a      	mov	r2, r3
 800d072:	69fb      	ldr	r3, [r7, #28]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d078:	69fb      	ldr	r3, [r7, #28]
 800d07a:	3304      	adds	r3, #4
 800d07c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d07e:	69bb      	ldr	r3, [r7, #24]
 800d080:	3301      	adds	r3, #1
 800d082:	61bb      	str	r3, [r7, #24]
 800d084:	69ba      	ldr	r2, [r7, #24]
 800d086:	693b      	ldr	r3, [r7, #16]
 800d088:	429a      	cmp	r2, r3
 800d08a:	d3eb      	bcc.n	800d064 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d08c:	2300      	movs	r3, #0
}
 800d08e:	4618      	mov	r0, r3
 800d090:	3724      	adds	r7, #36	; 0x24
 800d092:	46bd      	mov	sp, r7
 800d094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d098:	4770      	bx	lr

0800d09a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d09a:	b480      	push	{r7}
 800d09c:	b089      	sub	sp, #36	; 0x24
 800d09e:	af00      	add	r7, sp, #0
 800d0a0:	60f8      	str	r0, [r7, #12]
 800d0a2:	60b9      	str	r1, [r7, #8]
 800d0a4:	4613      	mov	r3, r2
 800d0a6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800d0ac:	68bb      	ldr	r3, [r7, #8]
 800d0ae:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800d0b0:	88fb      	ldrh	r3, [r7, #6]
 800d0b2:	3303      	adds	r3, #3
 800d0b4:	089b      	lsrs	r3, r3, #2
 800d0b6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	61bb      	str	r3, [r7, #24]
 800d0bc:	e00b      	b.n	800d0d6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d0be:	697b      	ldr	r3, [r7, #20]
 800d0c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0c4:	681a      	ldr	r2, [r3, #0]
 800d0c6:	69fb      	ldr	r3, [r7, #28]
 800d0c8:	601a      	str	r2, [r3, #0]
    pDest++;
 800d0ca:	69fb      	ldr	r3, [r7, #28]
 800d0cc:	3304      	adds	r3, #4
 800d0ce:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800d0d0:	69bb      	ldr	r3, [r7, #24]
 800d0d2:	3301      	adds	r3, #1
 800d0d4:	61bb      	str	r3, [r7, #24]
 800d0d6:	69ba      	ldr	r2, [r7, #24]
 800d0d8:	693b      	ldr	r3, [r7, #16]
 800d0da:	429a      	cmp	r2, r3
 800d0dc:	d3ef      	bcc.n	800d0be <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800d0de:	69fb      	ldr	r3, [r7, #28]
}
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	3724      	adds	r7, #36	; 0x24
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ea:	4770      	bx	lr

0800d0ec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d0ec:	b480      	push	{r7}
 800d0ee:	b085      	sub	sp, #20
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	695b      	ldr	r3, [r3, #20]
 800d0f8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	699b      	ldr	r3, [r3, #24]
 800d0fe:	68fa      	ldr	r2, [r7, #12]
 800d100:	4013      	ands	r3, r2
 800d102:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d104:	68fb      	ldr	r3, [r7, #12]
}
 800d106:	4618      	mov	r0, r3
 800d108:	3714      	adds	r7, #20
 800d10a:	46bd      	mov	sp, r7
 800d10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d110:	4770      	bx	lr

0800d112 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d112:	b480      	push	{r7}
 800d114:	b083      	sub	sp, #12
 800d116:	af00      	add	r7, sp, #0
 800d118:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	695b      	ldr	r3, [r3, #20]
 800d11e:	f003 0301 	and.w	r3, r3, #1
}
 800d122:	4618      	mov	r0, r3
 800d124:	370c      	adds	r7, #12
 800d126:	46bd      	mov	sp, r7
 800d128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12c:	4770      	bx	lr
	...

0800d130 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d130:	b480      	push	{r7}
 800d132:	b085      	sub	sp, #20
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800d138:	2300      	movs	r3, #0
 800d13a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	3301      	adds	r3, #1
 800d140:	60fb      	str	r3, [r7, #12]
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	4a13      	ldr	r2, [pc, #76]	; (800d194 <USB_CoreReset+0x64>)
 800d146:	4293      	cmp	r3, r2
 800d148:	d901      	bls.n	800d14e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d14a:	2303      	movs	r3, #3
 800d14c:	e01b      	b.n	800d186 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	691b      	ldr	r3, [r3, #16]
 800d152:	2b00      	cmp	r3, #0
 800d154:	daf2      	bge.n	800d13c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d156:	2300      	movs	r3, #0
 800d158:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	691b      	ldr	r3, [r3, #16]
 800d15e:	f043 0201 	orr.w	r2, r3, #1
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	3301      	adds	r3, #1
 800d16a:	60fb      	str	r3, [r7, #12]
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	4a09      	ldr	r2, [pc, #36]	; (800d194 <USB_CoreReset+0x64>)
 800d170:	4293      	cmp	r3, r2
 800d172:	d901      	bls.n	800d178 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d174:	2303      	movs	r3, #3
 800d176:	e006      	b.n	800d186 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	691b      	ldr	r3, [r3, #16]
 800d17c:	f003 0301 	and.w	r3, r3, #1
 800d180:	2b01      	cmp	r3, #1
 800d182:	d0f0      	beq.n	800d166 <USB_CoreReset+0x36>

  return HAL_OK;
 800d184:	2300      	movs	r3, #0
}
 800d186:	4618      	mov	r0, r3
 800d188:	3714      	adds	r7, #20
 800d18a:	46bd      	mov	sp, r7
 800d18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d190:	4770      	bx	lr
 800d192:	bf00      	nop
 800d194:	00030d40 	.word	0x00030d40

0800d198 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d198:	b084      	sub	sp, #16
 800d19a:	b580      	push	{r7, lr}
 800d19c:	b084      	sub	sp, #16
 800d19e:	af00      	add	r7, sp, #0
 800d1a0:	6078      	str	r0, [r7, #4]
 800d1a2:	f107 001c 	add.w	r0, r7, #28
 800d1a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d1ae:	68bb      	ldr	r3, [r7, #8]
 800d1b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d1b4:	461a      	mov	r2, r3
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1ca:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1d6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d018      	beq.n	800d21c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800d1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ec:	2b01      	cmp	r3, #1
 800d1ee:	d10a      	bne.n	800d206 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800d1f0:	68bb      	ldr	r3, [r7, #8]
 800d1f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	68ba      	ldr	r2, [r7, #8]
 800d1fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d1fe:	f043 0304 	orr.w	r3, r3, #4
 800d202:	6013      	str	r3, [r2, #0]
 800d204:	e014      	b.n	800d230 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d206:	68bb      	ldr	r3, [r7, #8]
 800d208:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	68ba      	ldr	r2, [r7, #8]
 800d210:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d214:	f023 0304 	bic.w	r3, r3, #4
 800d218:	6013      	str	r3, [r2, #0]
 800d21a:	e009      	b.n	800d230 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d21c:	68bb      	ldr	r3, [r7, #8]
 800d21e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	68ba      	ldr	r2, [r7, #8]
 800d226:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d22a:	f023 0304 	bic.w	r3, r3, #4
 800d22e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800d230:	2110      	movs	r1, #16
 800d232:	6878      	ldr	r0, [r7, #4]
 800d234:	f7ff feb4 	bl	800cfa0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800d238:	6878      	ldr	r0, [r7, #4]
 800d23a:	f7ff fed7 	bl	800cfec <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800d23e:	2300      	movs	r3, #0
 800d240:	60fb      	str	r3, [r7, #12]
 800d242:	e015      	b.n	800d270 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	015a      	lsls	r2, r3, #5
 800d248:	68bb      	ldr	r3, [r7, #8]
 800d24a:	4413      	add	r3, r2
 800d24c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d250:	461a      	mov	r2, r3
 800d252:	f04f 33ff 	mov.w	r3, #4294967295
 800d256:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	015a      	lsls	r2, r3, #5
 800d25c:	68bb      	ldr	r3, [r7, #8]
 800d25e:	4413      	add	r3, r2
 800d260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d264:	461a      	mov	r2, r3
 800d266:	2300      	movs	r3, #0
 800d268:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	3301      	adds	r3, #1
 800d26e:	60fb      	str	r3, [r7, #12]
 800d270:	6a3b      	ldr	r3, [r7, #32]
 800d272:	68fa      	ldr	r2, [r7, #12]
 800d274:	429a      	cmp	r2, r3
 800d276:	d3e5      	bcc.n	800d244 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800d278:	2101      	movs	r1, #1
 800d27a:	6878      	ldr	r0, [r7, #4]
 800d27c:	f000 f882 	bl	800d384 <USB_DriveVbus>

  HAL_Delay(200U);
 800d280:	20c8      	movs	r0, #200	; 0xc8
 800d282:	f7fb fe45 	bl	8008f10 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	2200      	movs	r2, #0
 800d28a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	f04f 32ff 	mov.w	r2, #4294967295
 800d292:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d00b      	beq.n	800d2b8 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d2a6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	4a14      	ldr	r2, [pc, #80]	; (800d2fc <USB_HostInit+0x164>)
 800d2ac:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	4a13      	ldr	r2, [pc, #76]	; (800d300 <USB_HostInit+0x168>)
 800d2b2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800d2b6:	e009      	b.n	800d2cc <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	2280      	movs	r2, #128	; 0x80
 800d2bc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	4a10      	ldr	r2, [pc, #64]	; (800d304 <USB_HostInit+0x16c>)
 800d2c2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	4a10      	ldr	r2, [pc, #64]	; (800d308 <USB_HostInit+0x170>)
 800d2c8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d105      	bne.n	800d2de <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	699b      	ldr	r3, [r3, #24]
 800d2d6:	f043 0210 	orr.w	r2, r3, #16
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	699a      	ldr	r2, [r3, #24]
 800d2e2:	4b0a      	ldr	r3, [pc, #40]	; (800d30c <USB_HostInit+0x174>)
 800d2e4:	4313      	orrs	r3, r2
 800d2e6:	687a      	ldr	r2, [r7, #4]
 800d2e8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800d2ea:	2300      	movs	r3, #0
}
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	3710      	adds	r7, #16
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d2f6:	b004      	add	sp, #16
 800d2f8:	4770      	bx	lr
 800d2fa:	bf00      	nop
 800d2fc:	01000200 	.word	0x01000200
 800d300:	00e00300 	.word	0x00e00300
 800d304:	00600080 	.word	0x00600080
 800d308:	004000e0 	.word	0x004000e0
 800d30c:	a3200008 	.word	0xa3200008

0800d310 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800d310:	b480      	push	{r7}
 800d312:	b085      	sub	sp, #20
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
 800d318:	460b      	mov	r3, r1
 800d31a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	68fa      	ldr	r2, [r7, #12]
 800d32a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d32e:	f023 0303 	bic.w	r3, r3, #3
 800d332:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d33a:	681a      	ldr	r2, [r3, #0]
 800d33c:	78fb      	ldrb	r3, [r7, #3]
 800d33e:	f003 0303 	and.w	r3, r3, #3
 800d342:	68f9      	ldr	r1, [r7, #12]
 800d344:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d348:	4313      	orrs	r3, r2
 800d34a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800d34c:	78fb      	ldrb	r3, [r7, #3]
 800d34e:	2b01      	cmp	r3, #1
 800d350:	d107      	bne.n	800d362 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d358:	461a      	mov	r2, r3
 800d35a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800d35e:	6053      	str	r3, [r2, #4]
 800d360:	e009      	b.n	800d376 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800d362:	78fb      	ldrb	r3, [r7, #3]
 800d364:	2b02      	cmp	r3, #2
 800d366:	d106      	bne.n	800d376 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d36e:	461a      	mov	r2, r3
 800d370:	f241 7370 	movw	r3, #6000	; 0x1770
 800d374:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800d376:	2300      	movs	r3, #0
}
 800d378:	4618      	mov	r0, r3
 800d37a:	3714      	adds	r7, #20
 800d37c:	46bd      	mov	sp, r7
 800d37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d382:	4770      	bx	lr

0800d384 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800d384:	b480      	push	{r7}
 800d386:	b085      	sub	sp, #20
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
 800d38c:	460b      	mov	r3, r1
 800d38e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800d394:	2300      	movs	r3, #0
 800d396:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d3a2:	68bb      	ldr	r3, [r7, #8]
 800d3a4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800d3a8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800d3aa:	68bb      	ldr	r3, [r7, #8]
 800d3ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d109      	bne.n	800d3c8 <USB_DriveVbus+0x44>
 800d3b4:	78fb      	ldrb	r3, [r7, #3]
 800d3b6:	2b01      	cmp	r3, #1
 800d3b8:	d106      	bne.n	800d3c8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	68fa      	ldr	r2, [r7, #12]
 800d3be:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d3c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d3c6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800d3c8:	68bb      	ldr	r3, [r7, #8]
 800d3ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d3ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d3d2:	d109      	bne.n	800d3e8 <USB_DriveVbus+0x64>
 800d3d4:	78fb      	ldrb	r3, [r7, #3]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d106      	bne.n	800d3e8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800d3da:	68bb      	ldr	r3, [r7, #8]
 800d3dc:	68fa      	ldr	r2, [r7, #12]
 800d3de:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d3e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d3e6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800d3e8:	2300      	movs	r3, #0
}
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	3714      	adds	r7, #20
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f4:	4770      	bx	lr

0800d3f6 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800d3f6:	b480      	push	{r7}
 800d3f8:	b085      	sub	sp, #20
 800d3fa:	af00      	add	r7, sp, #0
 800d3fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d408:	689b      	ldr	r3, [r3, #8]
 800d40a:	b29b      	uxth	r3, r3
}
 800d40c:	4618      	mov	r0, r3
 800d40e:	3714      	adds	r7, #20
 800d410:	46bd      	mov	sp, r7
 800d412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d416:	4770      	bx	lr

0800d418 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800d418:	b480      	push	{r7}
 800d41a:	b087      	sub	sp, #28
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
 800d420:	4608      	mov	r0, r1
 800d422:	4611      	mov	r1, r2
 800d424:	461a      	mov	r2, r3
 800d426:	4603      	mov	r3, r0
 800d428:	70fb      	strb	r3, [r7, #3]
 800d42a:	460b      	mov	r3, r1
 800d42c:	70bb      	strb	r3, [r7, #2]
 800d42e:	4613      	mov	r3, r2
 800d430:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800d432:	2300      	movs	r3, #0
 800d434:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800d43a:	78fb      	ldrb	r3, [r7, #3]
 800d43c:	015a      	lsls	r2, r3, #5
 800d43e:	68bb      	ldr	r3, [r7, #8]
 800d440:	4413      	add	r3, r2
 800d442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d446:	461a      	mov	r2, r3
 800d448:	f04f 33ff 	mov.w	r3, #4294967295
 800d44c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800d44e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d452:	2b03      	cmp	r3, #3
 800d454:	d87e      	bhi.n	800d554 <USB_HC_Init+0x13c>
 800d456:	a201      	add	r2, pc, #4	; (adr r2, 800d45c <USB_HC_Init+0x44>)
 800d458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d45c:	0800d46d 	.word	0x0800d46d
 800d460:	0800d517 	.word	0x0800d517
 800d464:	0800d46d 	.word	0x0800d46d
 800d468:	0800d4d9 	.word	0x0800d4d9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d46c:	78fb      	ldrb	r3, [r7, #3]
 800d46e:	015a      	lsls	r2, r3, #5
 800d470:	68bb      	ldr	r3, [r7, #8]
 800d472:	4413      	add	r3, r2
 800d474:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d478:	461a      	mov	r2, r3
 800d47a:	f240 439d 	movw	r3, #1181	; 0x49d
 800d47e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800d480:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d484:	2b00      	cmp	r3, #0
 800d486:	da10      	bge.n	800d4aa <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d488:	78fb      	ldrb	r3, [r7, #3]
 800d48a:	015a      	lsls	r2, r3, #5
 800d48c:	68bb      	ldr	r3, [r7, #8]
 800d48e:	4413      	add	r3, r2
 800d490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d494:	68db      	ldr	r3, [r3, #12]
 800d496:	78fa      	ldrb	r2, [r7, #3]
 800d498:	0151      	lsls	r1, r2, #5
 800d49a:	68ba      	ldr	r2, [r7, #8]
 800d49c:	440a      	add	r2, r1
 800d49e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d4a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d4a6:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800d4a8:	e057      	b.n	800d55a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d051      	beq.n	800d55a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800d4b6:	78fb      	ldrb	r3, [r7, #3]
 800d4b8:	015a      	lsls	r2, r3, #5
 800d4ba:	68bb      	ldr	r3, [r7, #8]
 800d4bc:	4413      	add	r3, r2
 800d4be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d4c2:	68db      	ldr	r3, [r3, #12]
 800d4c4:	78fa      	ldrb	r2, [r7, #3]
 800d4c6:	0151      	lsls	r1, r2, #5
 800d4c8:	68ba      	ldr	r2, [r7, #8]
 800d4ca:	440a      	add	r2, r1
 800d4cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d4d0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d4d4:	60d3      	str	r3, [r2, #12]
      break;
 800d4d6:	e040      	b.n	800d55a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d4d8:	78fb      	ldrb	r3, [r7, #3]
 800d4da:	015a      	lsls	r2, r3, #5
 800d4dc:	68bb      	ldr	r3, [r7, #8]
 800d4de:	4413      	add	r3, r2
 800d4e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d4e4:	461a      	mov	r2, r3
 800d4e6:	f240 639d 	movw	r3, #1693	; 0x69d
 800d4ea:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d4ec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	da34      	bge.n	800d55e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d4f4:	78fb      	ldrb	r3, [r7, #3]
 800d4f6:	015a      	lsls	r2, r3, #5
 800d4f8:	68bb      	ldr	r3, [r7, #8]
 800d4fa:	4413      	add	r3, r2
 800d4fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d500:	68db      	ldr	r3, [r3, #12]
 800d502:	78fa      	ldrb	r2, [r7, #3]
 800d504:	0151      	lsls	r1, r2, #5
 800d506:	68ba      	ldr	r2, [r7, #8]
 800d508:	440a      	add	r2, r1
 800d50a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d50e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d512:	60d3      	str	r3, [r2, #12]
      }

      break;
 800d514:	e023      	b.n	800d55e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d516:	78fb      	ldrb	r3, [r7, #3]
 800d518:	015a      	lsls	r2, r3, #5
 800d51a:	68bb      	ldr	r3, [r7, #8]
 800d51c:	4413      	add	r3, r2
 800d51e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d522:	461a      	mov	r2, r3
 800d524:	f240 2325 	movw	r3, #549	; 0x225
 800d528:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d52a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	da17      	bge.n	800d562 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800d532:	78fb      	ldrb	r3, [r7, #3]
 800d534:	015a      	lsls	r2, r3, #5
 800d536:	68bb      	ldr	r3, [r7, #8]
 800d538:	4413      	add	r3, r2
 800d53a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d53e:	68db      	ldr	r3, [r3, #12]
 800d540:	78fa      	ldrb	r2, [r7, #3]
 800d542:	0151      	lsls	r1, r2, #5
 800d544:	68ba      	ldr	r2, [r7, #8]
 800d546:	440a      	add	r2, r1
 800d548:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d54c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800d550:	60d3      	str	r3, [r2, #12]
      }
      break;
 800d552:	e006      	b.n	800d562 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800d554:	2301      	movs	r3, #1
 800d556:	75fb      	strb	r3, [r7, #23]
      break;
 800d558:	e004      	b.n	800d564 <USB_HC_Init+0x14c>
      break;
 800d55a:	bf00      	nop
 800d55c:	e002      	b.n	800d564 <USB_HC_Init+0x14c>
      break;
 800d55e:	bf00      	nop
 800d560:	e000      	b.n	800d564 <USB_HC_Init+0x14c>
      break;
 800d562:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800d564:	68bb      	ldr	r3, [r7, #8]
 800d566:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d56a:	699a      	ldr	r2, [r3, #24]
 800d56c:	78fb      	ldrb	r3, [r7, #3]
 800d56e:	f003 030f 	and.w	r3, r3, #15
 800d572:	2101      	movs	r1, #1
 800d574:	fa01 f303 	lsl.w	r3, r1, r3
 800d578:	68b9      	ldr	r1, [r7, #8]
 800d57a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d57e:	4313      	orrs	r3, r2
 800d580:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	699b      	ldr	r3, [r3, #24]
 800d586:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800d58e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d592:	2b00      	cmp	r3, #0
 800d594:	da03      	bge.n	800d59e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800d596:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d59a:	613b      	str	r3, [r7, #16]
 800d59c:	e001      	b.n	800d5a2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800d59e:	2300      	movs	r3, #0
 800d5a0:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800d5a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d5a6:	2b02      	cmp	r3, #2
 800d5a8:	d103      	bne.n	800d5b2 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800d5aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d5ae:	60fb      	str	r3, [r7, #12]
 800d5b0:	e001      	b.n	800d5b6 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d5b6:	787b      	ldrb	r3, [r7, #1]
 800d5b8:	059b      	lsls	r3, r3, #22
 800d5ba:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800d5be:	78bb      	ldrb	r3, [r7, #2]
 800d5c0:	02db      	lsls	r3, r3, #11
 800d5c2:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d5c6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d5c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d5cc:	049b      	lsls	r3, r3, #18
 800d5ce:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800d5d2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d5d4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d5d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d5da:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d5dc:	693b      	ldr	r3, [r7, #16]
 800d5de:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d5e0:	78fb      	ldrb	r3, [r7, #3]
 800d5e2:	0159      	lsls	r1, r3, #5
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	440b      	add	r3, r1
 800d5e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d5ec:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d5f2:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800d5f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d5f8:	2b03      	cmp	r3, #3
 800d5fa:	d10f      	bne.n	800d61c <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800d5fc:	78fb      	ldrb	r3, [r7, #3]
 800d5fe:	015a      	lsls	r2, r3, #5
 800d600:	68bb      	ldr	r3, [r7, #8]
 800d602:	4413      	add	r3, r2
 800d604:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	78fa      	ldrb	r2, [r7, #3]
 800d60c:	0151      	lsls	r1, r2, #5
 800d60e:	68ba      	ldr	r2, [r7, #8]
 800d610:	440a      	add	r2, r1
 800d612:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d616:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d61a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800d61c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d61e:	4618      	mov	r0, r3
 800d620:	371c      	adds	r7, #28
 800d622:	46bd      	mov	sp, r7
 800d624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d628:	4770      	bx	lr
 800d62a:	bf00      	nop

0800d62c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b08c      	sub	sp, #48	; 0x30
 800d630:	af02      	add	r7, sp, #8
 800d632:	60f8      	str	r0, [r7, #12]
 800d634:	60b9      	str	r1, [r7, #8]
 800d636:	4613      	mov	r3, r2
 800d638:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800d63e:	68bb      	ldr	r3, [r7, #8]
 800d640:	785b      	ldrb	r3, [r3, #1]
 800d642:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800d644:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d648:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d64e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d652:	2b00      	cmp	r3, #0
 800d654:	d028      	beq.n	800d6a8 <USB_HC_StartXfer+0x7c>
 800d656:	68bb      	ldr	r3, [r7, #8]
 800d658:	791b      	ldrb	r3, [r3, #4]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d124      	bne.n	800d6a8 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800d65e:	79fb      	ldrb	r3, [r7, #7]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d10b      	bne.n	800d67c <USB_HC_StartXfer+0x50>
 800d664:	68bb      	ldr	r3, [r7, #8]
 800d666:	795b      	ldrb	r3, [r3, #5]
 800d668:	2b01      	cmp	r3, #1
 800d66a:	d107      	bne.n	800d67c <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800d66c:	68bb      	ldr	r3, [r7, #8]
 800d66e:	785b      	ldrb	r3, [r3, #1]
 800d670:	4619      	mov	r1, r3
 800d672:	68f8      	ldr	r0, [r7, #12]
 800d674:	f000 fa30 	bl	800dad8 <USB_DoPing>
      return HAL_OK;
 800d678:	2300      	movs	r3, #0
 800d67a:	e114      	b.n	800d8a6 <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 800d67c:	79fb      	ldrb	r3, [r7, #7]
 800d67e:	2b01      	cmp	r3, #1
 800d680:	d112      	bne.n	800d6a8 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800d682:	69fb      	ldr	r3, [r7, #28]
 800d684:	015a      	lsls	r2, r3, #5
 800d686:	6a3b      	ldr	r3, [r7, #32]
 800d688:	4413      	add	r3, r2
 800d68a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d68e:	68db      	ldr	r3, [r3, #12]
 800d690:	69fa      	ldr	r2, [r7, #28]
 800d692:	0151      	lsls	r1, r2, #5
 800d694:	6a3a      	ldr	r2, [r7, #32]
 800d696:	440a      	add	r2, r1
 800d698:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d69c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800d6a0:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800d6a2:	68bb      	ldr	r3, [r7, #8]
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800d6a8:	68bb      	ldr	r3, [r7, #8]
 800d6aa:	691b      	ldr	r3, [r3, #16]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d018      	beq.n	800d6e2 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800d6b0:	68bb      	ldr	r3, [r7, #8]
 800d6b2:	691b      	ldr	r3, [r3, #16]
 800d6b4:	68ba      	ldr	r2, [r7, #8]
 800d6b6:	8912      	ldrh	r2, [r2, #8]
 800d6b8:	4413      	add	r3, r2
 800d6ba:	3b01      	subs	r3, #1
 800d6bc:	68ba      	ldr	r2, [r7, #8]
 800d6be:	8912      	ldrh	r2, [r2, #8]
 800d6c0:	fbb3 f3f2 	udiv	r3, r3, r2
 800d6c4:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800d6c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d6c8:	8b7b      	ldrh	r3, [r7, #26]
 800d6ca:	429a      	cmp	r2, r3
 800d6cc:	d90b      	bls.n	800d6e6 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800d6ce:	8b7b      	ldrh	r3, [r7, #26]
 800d6d0:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800d6d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d6d4:	68ba      	ldr	r2, [r7, #8]
 800d6d6:	8912      	ldrh	r2, [r2, #8]
 800d6d8:	fb02 f203 	mul.w	r2, r2, r3
 800d6dc:	68bb      	ldr	r3, [r7, #8]
 800d6de:	611a      	str	r2, [r3, #16]
 800d6e0:	e001      	b.n	800d6e6 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800d6e2:	2301      	movs	r3, #1
 800d6e4:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800d6e6:	68bb      	ldr	r3, [r7, #8]
 800d6e8:	78db      	ldrb	r3, [r3, #3]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d006      	beq.n	800d6fc <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800d6ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d6f0:	68ba      	ldr	r2, [r7, #8]
 800d6f2:	8912      	ldrh	r2, [r2, #8]
 800d6f4:	fb02 f203 	mul.w	r2, r2, r3
 800d6f8:	68bb      	ldr	r3, [r7, #8]
 800d6fa:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800d6fc:	68bb      	ldr	r3, [r7, #8]
 800d6fe:	691b      	ldr	r3, [r3, #16]
 800d700:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d704:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d706:	04d9      	lsls	r1, r3, #19
 800d708:	4b69      	ldr	r3, [pc, #420]	; (800d8b0 <USB_HC_StartXfer+0x284>)
 800d70a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800d70c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800d70e:	68bb      	ldr	r3, [r7, #8]
 800d710:	7a9b      	ldrb	r3, [r3, #10]
 800d712:	075b      	lsls	r3, r3, #29
 800d714:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800d718:	69f9      	ldr	r1, [r7, #28]
 800d71a:	0148      	lsls	r0, r1, #5
 800d71c:	6a39      	ldr	r1, [r7, #32]
 800d71e:	4401      	add	r1, r0
 800d720:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d724:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800d726:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800d728:	79fb      	ldrb	r3, [r7, #7]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d009      	beq.n	800d742 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800d72e:	68bb      	ldr	r3, [r7, #8]
 800d730:	68d9      	ldr	r1, [r3, #12]
 800d732:	69fb      	ldr	r3, [r7, #28]
 800d734:	015a      	lsls	r2, r3, #5
 800d736:	6a3b      	ldr	r3, [r7, #32]
 800d738:	4413      	add	r3, r2
 800d73a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d73e:	460a      	mov	r2, r1
 800d740:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800d742:	6a3b      	ldr	r3, [r7, #32]
 800d744:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d748:	689b      	ldr	r3, [r3, #8]
 800d74a:	f003 0301 	and.w	r3, r3, #1
 800d74e:	2b00      	cmp	r3, #0
 800d750:	bf0c      	ite	eq
 800d752:	2301      	moveq	r3, #1
 800d754:	2300      	movne	r3, #0
 800d756:	b2db      	uxtb	r3, r3
 800d758:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800d75a:	69fb      	ldr	r3, [r7, #28]
 800d75c:	015a      	lsls	r2, r3, #5
 800d75e:	6a3b      	ldr	r3, [r7, #32]
 800d760:	4413      	add	r3, r2
 800d762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	69fa      	ldr	r2, [r7, #28]
 800d76a:	0151      	lsls	r1, r2, #5
 800d76c:	6a3a      	ldr	r2, [r7, #32]
 800d76e:	440a      	add	r2, r1
 800d770:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d774:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d778:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800d77a:	69fb      	ldr	r3, [r7, #28]
 800d77c:	015a      	lsls	r2, r3, #5
 800d77e:	6a3b      	ldr	r3, [r7, #32]
 800d780:	4413      	add	r3, r2
 800d782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d786:	681a      	ldr	r2, [r3, #0]
 800d788:	7e7b      	ldrb	r3, [r7, #25]
 800d78a:	075b      	lsls	r3, r3, #29
 800d78c:	69f9      	ldr	r1, [r7, #28]
 800d78e:	0148      	lsls	r0, r1, #5
 800d790:	6a39      	ldr	r1, [r7, #32]
 800d792:	4401      	add	r1, r0
 800d794:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800d798:	4313      	orrs	r3, r2
 800d79a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800d79c:	69fb      	ldr	r3, [r7, #28]
 800d79e:	015a      	lsls	r2, r3, #5
 800d7a0:	6a3b      	ldr	r3, [r7, #32]
 800d7a2:	4413      	add	r3, r2
 800d7a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	4a42      	ldr	r2, [pc, #264]	; (800d8b4 <USB_HC_StartXfer+0x288>)
 800d7ac:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d7ae:	4b41      	ldr	r3, [pc, #260]	; (800d8b4 <USB_HC_StartXfer+0x288>)
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d7b6:	4a3f      	ldr	r2, [pc, #252]	; (800d8b4 <USB_HC_StartXfer+0x288>)
 800d7b8:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800d7ba:	68bb      	ldr	r3, [r7, #8]
 800d7bc:	78db      	ldrb	r3, [r3, #3]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d006      	beq.n	800d7d0 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800d7c2:	4b3c      	ldr	r3, [pc, #240]	; (800d8b4 <USB_HC_StartXfer+0x288>)
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d7ca:	4a3a      	ldr	r2, [pc, #232]	; (800d8b4 <USB_HC_StartXfer+0x288>)
 800d7cc:	6013      	str	r3, [r2, #0]
 800d7ce:	e005      	b.n	800d7dc <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800d7d0:	4b38      	ldr	r3, [pc, #224]	; (800d8b4 <USB_HC_StartXfer+0x288>)
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d7d8:	4a36      	ldr	r2, [pc, #216]	; (800d8b4 <USB_HC_StartXfer+0x288>)
 800d7da:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d7dc:	4b35      	ldr	r3, [pc, #212]	; (800d8b4 <USB_HC_StartXfer+0x288>)
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d7e4:	4a33      	ldr	r2, [pc, #204]	; (800d8b4 <USB_HC_StartXfer+0x288>)
 800d7e6:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800d7e8:	69fb      	ldr	r3, [r7, #28]
 800d7ea:	015a      	lsls	r2, r3, #5
 800d7ec:	6a3b      	ldr	r3, [r7, #32]
 800d7ee:	4413      	add	r3, r2
 800d7f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d7f4:	461a      	mov	r2, r3
 800d7f6:	4b2f      	ldr	r3, [pc, #188]	; (800d8b4 <USB_HC_StartXfer+0x288>)
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800d7fc:	79fb      	ldrb	r3, [r7, #7]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d001      	beq.n	800d806 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800d802:	2300      	movs	r3, #0
 800d804:	e04f      	b.n	800d8a6 <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800d806:	68bb      	ldr	r3, [r7, #8]
 800d808:	78db      	ldrb	r3, [r3, #3]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d14a      	bne.n	800d8a4 <USB_HC_StartXfer+0x278>
 800d80e:	68bb      	ldr	r3, [r7, #8]
 800d810:	691b      	ldr	r3, [r3, #16]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d046      	beq.n	800d8a4 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 800d816:	68bb      	ldr	r3, [r7, #8]
 800d818:	79db      	ldrb	r3, [r3, #7]
 800d81a:	2b03      	cmp	r3, #3
 800d81c:	d830      	bhi.n	800d880 <USB_HC_StartXfer+0x254>
 800d81e:	a201      	add	r2, pc, #4	; (adr r2, 800d824 <USB_HC_StartXfer+0x1f8>)
 800d820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d824:	0800d835 	.word	0x0800d835
 800d828:	0800d859 	.word	0x0800d859
 800d82c:	0800d835 	.word	0x0800d835
 800d830:	0800d859 	.word	0x0800d859
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d834:	68bb      	ldr	r3, [r7, #8]
 800d836:	691b      	ldr	r3, [r3, #16]
 800d838:	3303      	adds	r3, #3
 800d83a:	089b      	lsrs	r3, r3, #2
 800d83c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800d83e:	8afa      	ldrh	r2, [r7, #22]
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d844:	b29b      	uxth	r3, r3
 800d846:	429a      	cmp	r2, r3
 800d848:	d91c      	bls.n	800d884 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	699b      	ldr	r3, [r3, #24]
 800d84e:	f043 0220 	orr.w	r2, r3, #32
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	619a      	str	r2, [r3, #24]
        }
        break;
 800d856:	e015      	b.n	800d884 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d858:	68bb      	ldr	r3, [r7, #8]
 800d85a:	691b      	ldr	r3, [r3, #16]
 800d85c:	3303      	adds	r3, #3
 800d85e:	089b      	lsrs	r3, r3, #2
 800d860:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800d862:	8afa      	ldrh	r2, [r7, #22]
 800d864:	6a3b      	ldr	r3, [r7, #32]
 800d866:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d86a:	691b      	ldr	r3, [r3, #16]
 800d86c:	b29b      	uxth	r3, r3
 800d86e:	429a      	cmp	r2, r3
 800d870:	d90a      	bls.n	800d888 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	699b      	ldr	r3, [r3, #24]
 800d876:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	619a      	str	r2, [r3, #24]
        }
        break;
 800d87e:	e003      	b.n	800d888 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800d880:	bf00      	nop
 800d882:	e002      	b.n	800d88a <USB_HC_StartXfer+0x25e>
        break;
 800d884:	bf00      	nop
 800d886:	e000      	b.n	800d88a <USB_HC_StartXfer+0x25e>
        break;
 800d888:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800d88a:	68bb      	ldr	r3, [r7, #8]
 800d88c:	68d9      	ldr	r1, [r3, #12]
 800d88e:	68bb      	ldr	r3, [r7, #8]
 800d890:	785a      	ldrb	r2, [r3, #1]
 800d892:	68bb      	ldr	r3, [r7, #8]
 800d894:	691b      	ldr	r3, [r3, #16]
 800d896:	b298      	uxth	r0, r3
 800d898:	2300      	movs	r3, #0
 800d89a:	9300      	str	r3, [sp, #0]
 800d89c:	4603      	mov	r3, r0
 800d89e:	68f8      	ldr	r0, [r7, #12]
 800d8a0:	f7ff fbc6 	bl	800d030 <USB_WritePacket>
  }

  return HAL_OK;
 800d8a4:	2300      	movs	r3, #0
}
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	3728      	adds	r7, #40	; 0x28
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	bd80      	pop	{r7, pc}
 800d8ae:	bf00      	nop
 800d8b0:	1ff80000 	.word	0x1ff80000
 800d8b4:	200000b0 	.word	0x200000b0

0800d8b8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d8b8:	b480      	push	{r7}
 800d8ba:	b085      	sub	sp, #20
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d8ca:	695b      	ldr	r3, [r3, #20]
 800d8cc:	b29b      	uxth	r3, r3
}
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	3714      	adds	r7, #20
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d8:	4770      	bx	lr

0800d8da <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800d8da:	b480      	push	{r7}
 800d8dc:	b087      	sub	sp, #28
 800d8de:	af00      	add	r7, sp, #0
 800d8e0:	6078      	str	r0, [r7, #4]
 800d8e2:	460b      	mov	r3, r1
 800d8e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800d8ea:	78fb      	ldrb	r3, [r7, #3]
 800d8ec:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	015a      	lsls	r2, r3, #5
 800d8f6:	693b      	ldr	r3, [r7, #16]
 800d8f8:	4413      	add	r3, r2
 800d8fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	0c9b      	lsrs	r3, r3, #18
 800d902:	f003 0303 	and.w	r3, r3, #3
 800d906:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800d908:	68bb      	ldr	r3, [r7, #8]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d002      	beq.n	800d914 <USB_HC_Halt+0x3a>
 800d90e:	68bb      	ldr	r3, [r7, #8]
 800d910:	2b02      	cmp	r3, #2
 800d912:	d16c      	bne.n	800d9ee <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	015a      	lsls	r2, r3, #5
 800d918:	693b      	ldr	r3, [r7, #16]
 800d91a:	4413      	add	r3, r2
 800d91c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	68fa      	ldr	r2, [r7, #12]
 800d924:	0151      	lsls	r1, r2, #5
 800d926:	693a      	ldr	r2, [r7, #16]
 800d928:	440a      	add	r2, r1
 800d92a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d92e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d932:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d938:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d143      	bne.n	800d9c8 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	015a      	lsls	r2, r3, #5
 800d944:	693b      	ldr	r3, [r7, #16]
 800d946:	4413      	add	r3, r2
 800d948:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	68fa      	ldr	r2, [r7, #12]
 800d950:	0151      	lsls	r1, r2, #5
 800d952:	693a      	ldr	r2, [r7, #16]
 800d954:	440a      	add	r2, r1
 800d956:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d95a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d95e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	015a      	lsls	r2, r3, #5
 800d964:	693b      	ldr	r3, [r7, #16]
 800d966:	4413      	add	r3, r2
 800d968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	68fa      	ldr	r2, [r7, #12]
 800d970:	0151      	lsls	r1, r2, #5
 800d972:	693a      	ldr	r2, [r7, #16]
 800d974:	440a      	add	r2, r1
 800d976:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d97a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d97e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	015a      	lsls	r2, r3, #5
 800d984:	693b      	ldr	r3, [r7, #16]
 800d986:	4413      	add	r3, r2
 800d988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	68fa      	ldr	r2, [r7, #12]
 800d990:	0151      	lsls	r1, r2, #5
 800d992:	693a      	ldr	r2, [r7, #16]
 800d994:	440a      	add	r2, r1
 800d996:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d99a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d99e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800d9a0:	697b      	ldr	r3, [r7, #20]
 800d9a2:	3301      	adds	r3, #1
 800d9a4:	617b      	str	r3, [r7, #20]
 800d9a6:	697b      	ldr	r3, [r7, #20]
 800d9a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d9ac:	d81d      	bhi.n	800d9ea <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	015a      	lsls	r2, r3, #5
 800d9b2:	693b      	ldr	r3, [r7, #16]
 800d9b4:	4413      	add	r3, r2
 800d9b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d9c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d9c4:	d0ec      	beq.n	800d9a0 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800d9c6:	e080      	b.n	800daca <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	015a      	lsls	r2, r3, #5
 800d9cc:	693b      	ldr	r3, [r7, #16]
 800d9ce:	4413      	add	r3, r2
 800d9d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	68fa      	ldr	r2, [r7, #12]
 800d9d8:	0151      	lsls	r1, r2, #5
 800d9da:	693a      	ldr	r2, [r7, #16]
 800d9dc:	440a      	add	r2, r1
 800d9de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d9e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d9e6:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800d9e8:	e06f      	b.n	800daca <USB_HC_Halt+0x1f0>
          break;
 800d9ea:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800d9ec:	e06d      	b.n	800daca <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	015a      	lsls	r2, r3, #5
 800d9f2:	693b      	ldr	r3, [r7, #16]
 800d9f4:	4413      	add	r3, r2
 800d9f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	68fa      	ldr	r2, [r7, #12]
 800d9fe:	0151      	lsls	r1, r2, #5
 800da00:	693a      	ldr	r2, [r7, #16]
 800da02:	440a      	add	r2, r1
 800da04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800da08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800da0c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800da0e:	693b      	ldr	r3, [r7, #16]
 800da10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800da14:	691b      	ldr	r3, [r3, #16]
 800da16:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d143      	bne.n	800daa6 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	015a      	lsls	r2, r3, #5
 800da22:	693b      	ldr	r3, [r7, #16]
 800da24:	4413      	add	r3, r2
 800da26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	68fa      	ldr	r2, [r7, #12]
 800da2e:	0151      	lsls	r1, r2, #5
 800da30:	693a      	ldr	r2, [r7, #16]
 800da32:	440a      	add	r2, r1
 800da34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800da38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800da3c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	015a      	lsls	r2, r3, #5
 800da42:	693b      	ldr	r3, [r7, #16]
 800da44:	4413      	add	r3, r2
 800da46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	68fa      	ldr	r2, [r7, #12]
 800da4e:	0151      	lsls	r1, r2, #5
 800da50:	693a      	ldr	r2, [r7, #16]
 800da52:	440a      	add	r2, r1
 800da54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800da58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800da5c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	015a      	lsls	r2, r3, #5
 800da62:	693b      	ldr	r3, [r7, #16]
 800da64:	4413      	add	r3, r2
 800da66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	68fa      	ldr	r2, [r7, #12]
 800da6e:	0151      	lsls	r1, r2, #5
 800da70:	693a      	ldr	r2, [r7, #16]
 800da72:	440a      	add	r2, r1
 800da74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800da78:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800da7c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800da7e:	697b      	ldr	r3, [r7, #20]
 800da80:	3301      	adds	r3, #1
 800da82:	617b      	str	r3, [r7, #20]
 800da84:	697b      	ldr	r3, [r7, #20]
 800da86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800da8a:	d81d      	bhi.n	800dac8 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	015a      	lsls	r2, r3, #5
 800da90:	693b      	ldr	r3, [r7, #16]
 800da92:	4413      	add	r3, r2
 800da94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800da9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800daa2:	d0ec      	beq.n	800da7e <USB_HC_Halt+0x1a4>
 800daa4:	e011      	b.n	800daca <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	015a      	lsls	r2, r3, #5
 800daaa:	693b      	ldr	r3, [r7, #16]
 800daac:	4413      	add	r3, r2
 800daae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	68fa      	ldr	r2, [r7, #12]
 800dab6:	0151      	lsls	r1, r2, #5
 800dab8:	693a      	ldr	r2, [r7, #16]
 800daba:	440a      	add	r2, r1
 800dabc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dac0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dac4:	6013      	str	r3, [r2, #0]
 800dac6:	e000      	b.n	800daca <USB_HC_Halt+0x1f0>
          break;
 800dac8:	bf00      	nop
    }
  }

  return HAL_OK;
 800daca:	2300      	movs	r3, #0
}
 800dacc:	4618      	mov	r0, r3
 800dace:	371c      	adds	r7, #28
 800dad0:	46bd      	mov	sp, r7
 800dad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad6:	4770      	bx	lr

0800dad8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800dad8:	b480      	push	{r7}
 800dada:	b087      	sub	sp, #28
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
 800dae0:	460b      	mov	r3, r1
 800dae2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800dae8:	78fb      	ldrb	r3, [r7, #3]
 800daea:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800daec:	2301      	movs	r3, #1
 800daee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	04da      	lsls	r2, r3, #19
 800daf4:	4b15      	ldr	r3, [pc, #84]	; (800db4c <USB_DoPing+0x74>)
 800daf6:	4013      	ands	r3, r2
 800daf8:	693a      	ldr	r2, [r7, #16]
 800dafa:	0151      	lsls	r1, r2, #5
 800dafc:	697a      	ldr	r2, [r7, #20]
 800dafe:	440a      	add	r2, r1
 800db00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800db04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800db08:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800db0a:	693b      	ldr	r3, [r7, #16]
 800db0c:	015a      	lsls	r2, r3, #5
 800db0e:	697b      	ldr	r3, [r7, #20]
 800db10:	4413      	add	r3, r2
 800db12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800db1a:	68bb      	ldr	r3, [r7, #8]
 800db1c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800db20:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800db22:	68bb      	ldr	r3, [r7, #8]
 800db24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800db28:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800db2a:	693b      	ldr	r3, [r7, #16]
 800db2c:	015a      	lsls	r2, r3, #5
 800db2e:	697b      	ldr	r3, [r7, #20]
 800db30:	4413      	add	r3, r2
 800db32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800db36:	461a      	mov	r2, r3
 800db38:	68bb      	ldr	r3, [r7, #8]
 800db3a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800db3c:	2300      	movs	r3, #0
}
 800db3e:	4618      	mov	r0, r3
 800db40:	371c      	adds	r7, #28
 800db42:	46bd      	mov	sp, r7
 800db44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db48:	4770      	bx	lr
 800db4a:	bf00      	nop
 800db4c:	1ff80000 	.word	0x1ff80000

0800db50 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b086      	sub	sp, #24
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800db5c:	2300      	movs	r3, #0
 800db5e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800db60:	6878      	ldr	r0, [r7, #4]
 800db62:	f7ff f9e1 	bl	800cf28 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800db66:	2110      	movs	r1, #16
 800db68:	6878      	ldr	r0, [r7, #4]
 800db6a:	f7ff fa19 	bl	800cfa0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800db6e:	6878      	ldr	r0, [r7, #4]
 800db70:	f7ff fa3c 	bl	800cfec <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800db74:	2300      	movs	r3, #0
 800db76:	613b      	str	r3, [r7, #16]
 800db78:	e01f      	b.n	800dbba <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800db7a:	693b      	ldr	r3, [r7, #16]
 800db7c:	015a      	lsls	r2, r3, #5
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	4413      	add	r3, r2
 800db82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800db8a:	68bb      	ldr	r3, [r7, #8]
 800db8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800db90:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800db92:	68bb      	ldr	r3, [r7, #8]
 800db94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800db98:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800db9a:	68bb      	ldr	r3, [r7, #8]
 800db9c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800dba0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800dba2:	693b      	ldr	r3, [r7, #16]
 800dba4:	015a      	lsls	r2, r3, #5
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	4413      	add	r3, r2
 800dbaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dbae:	461a      	mov	r2, r3
 800dbb0:	68bb      	ldr	r3, [r7, #8]
 800dbb2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800dbb4:	693b      	ldr	r3, [r7, #16]
 800dbb6:	3301      	adds	r3, #1
 800dbb8:	613b      	str	r3, [r7, #16]
 800dbba:	693b      	ldr	r3, [r7, #16]
 800dbbc:	2b0f      	cmp	r3, #15
 800dbbe:	d9dc      	bls.n	800db7a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	613b      	str	r3, [r7, #16]
 800dbc4:	e034      	b.n	800dc30 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800dbc6:	693b      	ldr	r3, [r7, #16]
 800dbc8:	015a      	lsls	r2, r3, #5
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	4413      	add	r3, r2
 800dbce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800dbd6:	68bb      	ldr	r3, [r7, #8]
 800dbd8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dbdc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800dbde:	68bb      	ldr	r3, [r7, #8]
 800dbe0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dbe4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800dbe6:	68bb      	ldr	r3, [r7, #8]
 800dbe8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800dbec:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800dbee:	693b      	ldr	r3, [r7, #16]
 800dbf0:	015a      	lsls	r2, r3, #5
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	4413      	add	r3, r2
 800dbf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dbfa:	461a      	mov	r2, r3
 800dbfc:	68bb      	ldr	r3, [r7, #8]
 800dbfe:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800dc00:	697b      	ldr	r3, [r7, #20]
 800dc02:	3301      	adds	r3, #1
 800dc04:	617b      	str	r3, [r7, #20]
 800dc06:	697b      	ldr	r3, [r7, #20]
 800dc08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dc0c:	d80c      	bhi.n	800dc28 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800dc0e:	693b      	ldr	r3, [r7, #16]
 800dc10:	015a      	lsls	r2, r3, #5
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	4413      	add	r3, r2
 800dc16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dc20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dc24:	d0ec      	beq.n	800dc00 <USB_StopHost+0xb0>
 800dc26:	e000      	b.n	800dc2a <USB_StopHost+0xda>
        break;
 800dc28:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800dc2a:	693b      	ldr	r3, [r7, #16]
 800dc2c:	3301      	adds	r3, #1
 800dc2e:	613b      	str	r3, [r7, #16]
 800dc30:	693b      	ldr	r3, [r7, #16]
 800dc32:	2b0f      	cmp	r3, #15
 800dc34:	d9c7      	bls.n	800dbc6 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dc3c:	461a      	mov	r2, r3
 800dc3e:	f04f 33ff 	mov.w	r3, #4294967295
 800dc42:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	f04f 32ff 	mov.w	r2, #4294967295
 800dc4a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800dc4c:	6878      	ldr	r0, [r7, #4]
 800dc4e:	f7ff f95a 	bl	800cf06 <USB_EnableGlobalInt>

  return HAL_OK;
 800dc52:	2300      	movs	r3, #0
}
 800dc54:	4618      	mov	r0, r3
 800dc56:	3718      	adds	r7, #24
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	bd80      	pop	{r7, pc}

0800dc5c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800dc5c:	b590      	push	{r4, r7, lr}
 800dc5e:	b089      	sub	sp, #36	; 0x24
 800dc60:	af04      	add	r7, sp, #16
 800dc62:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800dc64:	2301      	movs	r3, #1
 800dc66:	2202      	movs	r2, #2
 800dc68:	2102      	movs	r1, #2
 800dc6a:	6878      	ldr	r0, [r7, #4]
 800dc6c:	f000 fc68 	bl	800e540 <USBH_FindInterface>
 800dc70:	4603      	mov	r3, r0
 800dc72:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800dc74:	7bfb      	ldrb	r3, [r7, #15]
 800dc76:	2bff      	cmp	r3, #255	; 0xff
 800dc78:	d002      	beq.n	800dc80 <USBH_CDC_InterfaceInit+0x24>
 800dc7a:	7bfb      	ldrb	r3, [r7, #15]
 800dc7c:	2b01      	cmp	r3, #1
 800dc7e:	d901      	bls.n	800dc84 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800dc80:	2302      	movs	r3, #2
 800dc82:	e13d      	b.n	800df00 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800dc84:	7bfb      	ldrb	r3, [r7, #15]
 800dc86:	4619      	mov	r1, r3
 800dc88:	6878      	ldr	r0, [r7, #4]
 800dc8a:	f000 fc3d 	bl	800e508 <USBH_SelectInterface>
 800dc8e:	4603      	mov	r3, r0
 800dc90:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800dc92:	7bbb      	ldrb	r3, [r7, #14]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d001      	beq.n	800dc9c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800dc98:	2302      	movs	r3, #2
 800dc9a:	e131      	b.n	800df00 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800dca2:	2050      	movs	r0, #80	; 0x50
 800dca4:	f001 fb1a 	bl	800f2dc <malloc>
 800dca8:	4603      	mov	r3, r0
 800dcaa:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dcb2:	69db      	ldr	r3, [r3, #28]
 800dcb4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800dcb6:	68bb      	ldr	r3, [r7, #8]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d101      	bne.n	800dcc0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800dcbc:	2302      	movs	r3, #2
 800dcbe:	e11f      	b.n	800df00 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800dcc0:	2250      	movs	r2, #80	; 0x50
 800dcc2:	2100      	movs	r1, #0
 800dcc4:	68b8      	ldr	r0, [r7, #8]
 800dcc6:	f001 fb19 	bl	800f2fc <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800dcca:	7bfb      	ldrb	r3, [r7, #15]
 800dccc:	687a      	ldr	r2, [r7, #4]
 800dcce:	211a      	movs	r1, #26
 800dcd0:	fb01 f303 	mul.w	r3, r1, r3
 800dcd4:	4413      	add	r3, r2
 800dcd6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800dcda:	781b      	ldrb	r3, [r3, #0]
 800dcdc:	b25b      	sxtb	r3, r3
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	da15      	bge.n	800dd0e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800dce2:	7bfb      	ldrb	r3, [r7, #15]
 800dce4:	687a      	ldr	r2, [r7, #4]
 800dce6:	211a      	movs	r1, #26
 800dce8:	fb01 f303 	mul.w	r3, r1, r3
 800dcec:	4413      	add	r3, r2
 800dcee:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800dcf2:	781a      	ldrb	r2, [r3, #0]
 800dcf4:	68bb      	ldr	r3, [r7, #8]
 800dcf6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800dcf8:	7bfb      	ldrb	r3, [r7, #15]
 800dcfa:	687a      	ldr	r2, [r7, #4]
 800dcfc:	211a      	movs	r1, #26
 800dcfe:	fb01 f303 	mul.w	r3, r1, r3
 800dd02:	4413      	add	r3, r2
 800dd04:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800dd08:	881a      	ldrh	r2, [r3, #0]
 800dd0a:	68bb      	ldr	r3, [r7, #8]
 800dd0c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800dd0e:	68bb      	ldr	r3, [r7, #8]
 800dd10:	785b      	ldrb	r3, [r3, #1]
 800dd12:	4619      	mov	r1, r3
 800dd14:	6878      	ldr	r0, [r7, #4]
 800dd16:	f000 ffa0 	bl	800ec5a <USBH_AllocPipe>
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	461a      	mov	r2, r3
 800dd1e:	68bb      	ldr	r3, [r7, #8]
 800dd20:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800dd22:	68bb      	ldr	r3, [r7, #8]
 800dd24:	7819      	ldrb	r1, [r3, #0]
 800dd26:	68bb      	ldr	r3, [r7, #8]
 800dd28:	7858      	ldrb	r0, [r3, #1]
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800dd36:	68ba      	ldr	r2, [r7, #8]
 800dd38:	8952      	ldrh	r2, [r2, #10]
 800dd3a:	9202      	str	r2, [sp, #8]
 800dd3c:	2203      	movs	r2, #3
 800dd3e:	9201      	str	r2, [sp, #4]
 800dd40:	9300      	str	r3, [sp, #0]
 800dd42:	4623      	mov	r3, r4
 800dd44:	4602      	mov	r2, r0
 800dd46:	6878      	ldr	r0, [r7, #4]
 800dd48:	f000 ff58 	bl	800ebfc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800dd4c:	68bb      	ldr	r3, [r7, #8]
 800dd4e:	781b      	ldrb	r3, [r3, #0]
 800dd50:	2200      	movs	r2, #0
 800dd52:	4619      	mov	r1, r3
 800dd54:	6878      	ldr	r0, [r7, #4]
 800dd56:	f001 fa1b 	bl	800f190 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	210a      	movs	r1, #10
 800dd60:	6878      	ldr	r0, [r7, #4]
 800dd62:	f000 fbed 	bl	800e540 <USBH_FindInterface>
 800dd66:	4603      	mov	r3, r0
 800dd68:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800dd6a:	7bfb      	ldrb	r3, [r7, #15]
 800dd6c:	2bff      	cmp	r3, #255	; 0xff
 800dd6e:	d002      	beq.n	800dd76 <USBH_CDC_InterfaceInit+0x11a>
 800dd70:	7bfb      	ldrb	r3, [r7, #15]
 800dd72:	2b01      	cmp	r3, #1
 800dd74:	d901      	bls.n	800dd7a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800dd76:	2302      	movs	r3, #2
 800dd78:	e0c2      	b.n	800df00 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800dd7a:	7bfb      	ldrb	r3, [r7, #15]
 800dd7c:	687a      	ldr	r2, [r7, #4]
 800dd7e:	211a      	movs	r1, #26
 800dd80:	fb01 f303 	mul.w	r3, r1, r3
 800dd84:	4413      	add	r3, r2
 800dd86:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800dd8a:	781b      	ldrb	r3, [r3, #0]
 800dd8c:	b25b      	sxtb	r3, r3
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	da16      	bge.n	800ddc0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800dd92:	7bfb      	ldrb	r3, [r7, #15]
 800dd94:	687a      	ldr	r2, [r7, #4]
 800dd96:	211a      	movs	r1, #26
 800dd98:	fb01 f303 	mul.w	r3, r1, r3
 800dd9c:	4413      	add	r3, r2
 800dd9e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800dda2:	781a      	ldrb	r2, [r3, #0]
 800dda4:	68bb      	ldr	r3, [r7, #8]
 800dda6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800dda8:	7bfb      	ldrb	r3, [r7, #15]
 800ddaa:	687a      	ldr	r2, [r7, #4]
 800ddac:	211a      	movs	r1, #26
 800ddae:	fb01 f303 	mul.w	r3, r1, r3
 800ddb2:	4413      	add	r3, r2
 800ddb4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800ddb8:	881a      	ldrh	r2, [r3, #0]
 800ddba:	68bb      	ldr	r3, [r7, #8]
 800ddbc:	835a      	strh	r2, [r3, #26]
 800ddbe:	e015      	b.n	800ddec <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800ddc0:	7bfb      	ldrb	r3, [r7, #15]
 800ddc2:	687a      	ldr	r2, [r7, #4]
 800ddc4:	211a      	movs	r1, #26
 800ddc6:	fb01 f303 	mul.w	r3, r1, r3
 800ddca:	4413      	add	r3, r2
 800ddcc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ddd0:	781a      	ldrb	r2, [r3, #0]
 800ddd2:	68bb      	ldr	r3, [r7, #8]
 800ddd4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ddd6:	7bfb      	ldrb	r3, [r7, #15]
 800ddd8:	687a      	ldr	r2, [r7, #4]
 800ddda:	211a      	movs	r1, #26
 800dddc:	fb01 f303 	mul.w	r3, r1, r3
 800dde0:	4413      	add	r3, r2
 800dde2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800dde6:	881a      	ldrh	r2, [r3, #0]
 800dde8:	68bb      	ldr	r3, [r7, #8]
 800ddea:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800ddec:	7bfb      	ldrb	r3, [r7, #15]
 800ddee:	687a      	ldr	r2, [r7, #4]
 800ddf0:	211a      	movs	r1, #26
 800ddf2:	fb01 f303 	mul.w	r3, r1, r3
 800ddf6:	4413      	add	r3, r2
 800ddf8:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ddfc:	781b      	ldrb	r3, [r3, #0]
 800ddfe:	b25b      	sxtb	r3, r3
 800de00:	2b00      	cmp	r3, #0
 800de02:	da16      	bge.n	800de32 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800de04:	7bfb      	ldrb	r3, [r7, #15]
 800de06:	687a      	ldr	r2, [r7, #4]
 800de08:	211a      	movs	r1, #26
 800de0a:	fb01 f303 	mul.w	r3, r1, r3
 800de0e:	4413      	add	r3, r2
 800de10:	f203 3356 	addw	r3, r3, #854	; 0x356
 800de14:	781a      	ldrb	r2, [r3, #0]
 800de16:	68bb      	ldr	r3, [r7, #8]
 800de18:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800de1a:	7bfb      	ldrb	r3, [r7, #15]
 800de1c:	687a      	ldr	r2, [r7, #4]
 800de1e:	211a      	movs	r1, #26
 800de20:	fb01 f303 	mul.w	r3, r1, r3
 800de24:	4413      	add	r3, r2
 800de26:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800de2a:	881a      	ldrh	r2, [r3, #0]
 800de2c:	68bb      	ldr	r3, [r7, #8]
 800de2e:	835a      	strh	r2, [r3, #26]
 800de30:	e015      	b.n	800de5e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800de32:	7bfb      	ldrb	r3, [r7, #15]
 800de34:	687a      	ldr	r2, [r7, #4]
 800de36:	211a      	movs	r1, #26
 800de38:	fb01 f303 	mul.w	r3, r1, r3
 800de3c:	4413      	add	r3, r2
 800de3e:	f203 3356 	addw	r3, r3, #854	; 0x356
 800de42:	781a      	ldrb	r2, [r3, #0]
 800de44:	68bb      	ldr	r3, [r7, #8]
 800de46:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800de48:	7bfb      	ldrb	r3, [r7, #15]
 800de4a:	687a      	ldr	r2, [r7, #4]
 800de4c:	211a      	movs	r1, #26
 800de4e:	fb01 f303 	mul.w	r3, r1, r3
 800de52:	4413      	add	r3, r2
 800de54:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800de58:	881a      	ldrh	r2, [r3, #0]
 800de5a:	68bb      	ldr	r3, [r7, #8]
 800de5c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800de5e:	68bb      	ldr	r3, [r7, #8]
 800de60:	7b9b      	ldrb	r3, [r3, #14]
 800de62:	4619      	mov	r1, r3
 800de64:	6878      	ldr	r0, [r7, #4]
 800de66:	f000 fef8 	bl	800ec5a <USBH_AllocPipe>
 800de6a:	4603      	mov	r3, r0
 800de6c:	461a      	mov	r2, r3
 800de6e:	68bb      	ldr	r3, [r7, #8]
 800de70:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800de72:	68bb      	ldr	r3, [r7, #8]
 800de74:	7bdb      	ldrb	r3, [r3, #15]
 800de76:	4619      	mov	r1, r3
 800de78:	6878      	ldr	r0, [r7, #4]
 800de7a:	f000 feee 	bl	800ec5a <USBH_AllocPipe>
 800de7e:	4603      	mov	r3, r0
 800de80:	461a      	mov	r2, r3
 800de82:	68bb      	ldr	r3, [r7, #8]
 800de84:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800de86:	68bb      	ldr	r3, [r7, #8]
 800de88:	7b59      	ldrb	r1, [r3, #13]
 800de8a:	68bb      	ldr	r3, [r7, #8]
 800de8c:	7b98      	ldrb	r0, [r3, #14]
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800de9a:	68ba      	ldr	r2, [r7, #8]
 800de9c:	8b12      	ldrh	r2, [r2, #24]
 800de9e:	9202      	str	r2, [sp, #8]
 800dea0:	2202      	movs	r2, #2
 800dea2:	9201      	str	r2, [sp, #4]
 800dea4:	9300      	str	r3, [sp, #0]
 800dea6:	4623      	mov	r3, r4
 800dea8:	4602      	mov	r2, r0
 800deaa:	6878      	ldr	r0, [r7, #4]
 800deac:	f000 fea6 	bl	800ebfc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800deb0:	68bb      	ldr	r3, [r7, #8]
 800deb2:	7b19      	ldrb	r1, [r3, #12]
 800deb4:	68bb      	ldr	r3, [r7, #8]
 800deb6:	7bd8      	ldrb	r0, [r3, #15]
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800dec4:	68ba      	ldr	r2, [r7, #8]
 800dec6:	8b52      	ldrh	r2, [r2, #26]
 800dec8:	9202      	str	r2, [sp, #8]
 800deca:	2202      	movs	r2, #2
 800decc:	9201      	str	r2, [sp, #4]
 800dece:	9300      	str	r3, [sp, #0]
 800ded0:	4623      	mov	r3, r4
 800ded2:	4602      	mov	r2, r0
 800ded4:	6878      	ldr	r0, [r7, #4]
 800ded6:	f000 fe91 	bl	800ebfc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800deda:	68bb      	ldr	r3, [r7, #8]
 800dedc:	2200      	movs	r2, #0
 800dede:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800dee2:	68bb      	ldr	r3, [r7, #8]
 800dee4:	7b5b      	ldrb	r3, [r3, #13]
 800dee6:	2200      	movs	r2, #0
 800dee8:	4619      	mov	r1, r3
 800deea:	6878      	ldr	r0, [r7, #4]
 800deec:	f001 f950 	bl	800f190 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800def0:	68bb      	ldr	r3, [r7, #8]
 800def2:	7b1b      	ldrb	r3, [r3, #12]
 800def4:	2200      	movs	r2, #0
 800def6:	4619      	mov	r1, r3
 800def8:	6878      	ldr	r0, [r7, #4]
 800defa:	f001 f949 	bl	800f190 <USBH_LL_SetToggle>

  return USBH_OK;
 800defe:	2300      	movs	r3, #0
}
 800df00:	4618      	mov	r0, r3
 800df02:	3714      	adds	r7, #20
 800df04:	46bd      	mov	sp, r7
 800df06:	bd90      	pop	{r4, r7, pc}

0800df08 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b084      	sub	sp, #16
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800df16:	69db      	ldr	r3, [r3, #28]
 800df18:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	781b      	ldrb	r3, [r3, #0]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d00e      	beq.n	800df40 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	781b      	ldrb	r3, [r3, #0]
 800df26:	4619      	mov	r1, r3
 800df28:	6878      	ldr	r0, [r7, #4]
 800df2a:	f000 fe86 	bl	800ec3a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	781b      	ldrb	r3, [r3, #0]
 800df32:	4619      	mov	r1, r3
 800df34:	6878      	ldr	r0, [r7, #4]
 800df36:	f000 feb1 	bl	800ec9c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	2200      	movs	r2, #0
 800df3e:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	7b1b      	ldrb	r3, [r3, #12]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d00e      	beq.n	800df66 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	7b1b      	ldrb	r3, [r3, #12]
 800df4c:	4619      	mov	r1, r3
 800df4e:	6878      	ldr	r0, [r7, #4]
 800df50:	f000 fe73 	bl	800ec3a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	7b1b      	ldrb	r3, [r3, #12]
 800df58:	4619      	mov	r1, r3
 800df5a:	6878      	ldr	r0, [r7, #4]
 800df5c:	f000 fe9e 	bl	800ec9c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	2200      	movs	r2, #0
 800df64:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	7b5b      	ldrb	r3, [r3, #13]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d00e      	beq.n	800df8c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	7b5b      	ldrb	r3, [r3, #13]
 800df72:	4619      	mov	r1, r3
 800df74:	6878      	ldr	r0, [r7, #4]
 800df76:	f000 fe60 	bl	800ec3a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	7b5b      	ldrb	r3, [r3, #13]
 800df7e:	4619      	mov	r1, r3
 800df80:	6878      	ldr	r0, [r7, #4]
 800df82:	f000 fe8b 	bl	800ec9c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	2200      	movs	r2, #0
 800df8a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800df92:	69db      	ldr	r3, [r3, #28]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d00b      	beq.n	800dfb0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800df9e:	69db      	ldr	r3, [r3, #28]
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	f001 f9a3 	bl	800f2ec <free>
    phost->pActiveClass->pData = 0U;
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dfac:	2200      	movs	r2, #0
 800dfae:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800dfb0:	2300      	movs	r3, #0
}
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	3710      	adds	r7, #16
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	bd80      	pop	{r7, pc}

0800dfba <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800dfba:	b580      	push	{r7, lr}
 800dfbc:	b084      	sub	sp, #16
 800dfbe:	af00      	add	r7, sp, #0
 800dfc0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dfc8:	69db      	ldr	r3, [r3, #28]
 800dfca:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	3340      	adds	r3, #64	; 0x40
 800dfd0:	4619      	mov	r1, r3
 800dfd2:	6878      	ldr	r0, [r7, #4]
 800dfd4:	f000 f8b1 	bl	800e13a <GetLineCoding>
 800dfd8:	4603      	mov	r3, r0
 800dfda:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800dfdc:	7afb      	ldrb	r3, [r7, #11]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d105      	bne.n	800dfee <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dfe8:	2102      	movs	r1, #2
 800dfea:	6878      	ldr	r0, [r7, #4]
 800dfec:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800dfee:	7afb      	ldrb	r3, [r7, #11]
}
 800dff0:	4618      	mov	r0, r3
 800dff2:	3710      	adds	r7, #16
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd80      	pop	{r7, pc}

0800dff8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b084      	sub	sp, #16
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800e000:	2301      	movs	r3, #1
 800e002:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800e004:	2300      	movs	r3, #0
 800e006:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e00e:	69db      	ldr	r3, [r3, #28]
 800e010:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800e012:	68bb      	ldr	r3, [r7, #8]
 800e014:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800e018:	2b04      	cmp	r3, #4
 800e01a:	d877      	bhi.n	800e10c <USBH_CDC_Process+0x114>
 800e01c:	a201      	add	r2, pc, #4	; (adr r2, 800e024 <USBH_CDC_Process+0x2c>)
 800e01e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e022:	bf00      	nop
 800e024:	0800e039 	.word	0x0800e039
 800e028:	0800e03f 	.word	0x0800e03f
 800e02c:	0800e06f 	.word	0x0800e06f
 800e030:	0800e0e3 	.word	0x0800e0e3
 800e034:	0800e0f1 	.word	0x0800e0f1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800e038:	2300      	movs	r3, #0
 800e03a:	73fb      	strb	r3, [r7, #15]
      break;
 800e03c:	e06d      	b.n	800e11a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800e03e:	68bb      	ldr	r3, [r7, #8]
 800e040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e042:	4619      	mov	r1, r3
 800e044:	6878      	ldr	r0, [r7, #4]
 800e046:	f000 f897 	bl	800e178 <SetLineCoding>
 800e04a:	4603      	mov	r3, r0
 800e04c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e04e:	7bbb      	ldrb	r3, [r7, #14]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d104      	bne.n	800e05e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800e054:	68bb      	ldr	r3, [r7, #8]
 800e056:	2202      	movs	r2, #2
 800e058:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800e05c:	e058      	b.n	800e110 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800e05e:	7bbb      	ldrb	r3, [r7, #14]
 800e060:	2b01      	cmp	r3, #1
 800e062:	d055      	beq.n	800e110 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800e064:	68bb      	ldr	r3, [r7, #8]
 800e066:	2204      	movs	r2, #4
 800e068:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800e06c:	e050      	b.n	800e110 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800e06e:	68bb      	ldr	r3, [r7, #8]
 800e070:	3340      	adds	r3, #64	; 0x40
 800e072:	4619      	mov	r1, r3
 800e074:	6878      	ldr	r0, [r7, #4]
 800e076:	f000 f860 	bl	800e13a <GetLineCoding>
 800e07a:	4603      	mov	r3, r0
 800e07c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e07e:	7bbb      	ldrb	r3, [r7, #14]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d126      	bne.n	800e0d2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800e084:	68bb      	ldr	r3, [r7, #8]
 800e086:	2200      	movs	r2, #0
 800e088:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800e08c:	68bb      	ldr	r3, [r7, #8]
 800e08e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800e092:	68bb      	ldr	r3, [r7, #8]
 800e094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e096:	791b      	ldrb	r3, [r3, #4]
 800e098:	429a      	cmp	r2, r3
 800e09a:	d13b      	bne.n	800e114 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800e09c:	68bb      	ldr	r3, [r7, #8]
 800e09e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800e0a2:	68bb      	ldr	r3, [r7, #8]
 800e0a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e0a6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800e0a8:	429a      	cmp	r2, r3
 800e0aa:	d133      	bne.n	800e114 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800e0ac:	68bb      	ldr	r3, [r7, #8]
 800e0ae:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800e0b2:	68bb      	ldr	r3, [r7, #8]
 800e0b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e0b6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800e0b8:	429a      	cmp	r2, r3
 800e0ba:	d12b      	bne.n	800e114 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800e0bc:	68bb      	ldr	r3, [r7, #8]
 800e0be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e0c0:	68bb      	ldr	r3, [r7, #8]
 800e0c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e0c4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800e0c6:	429a      	cmp	r2, r3
 800e0c8:	d124      	bne.n	800e114 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800e0ca:	6878      	ldr	r0, [r7, #4]
 800e0cc:	f000 f95a 	bl	800e384 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800e0d0:	e020      	b.n	800e114 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800e0d2:	7bbb      	ldrb	r3, [r7, #14]
 800e0d4:	2b01      	cmp	r3, #1
 800e0d6:	d01d      	beq.n	800e114 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800e0d8:	68bb      	ldr	r3, [r7, #8]
 800e0da:	2204      	movs	r2, #4
 800e0dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800e0e0:	e018      	b.n	800e114 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800e0e2:	6878      	ldr	r0, [r7, #4]
 800e0e4:	f000 f867 	bl	800e1b6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800e0e8:	6878      	ldr	r0, [r7, #4]
 800e0ea:	f000 f8dc 	bl	800e2a6 <CDC_ProcessReception>
      break;
 800e0ee:	e014      	b.n	800e11a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800e0f0:	2100      	movs	r1, #0
 800e0f2:	6878      	ldr	r0, [r7, #4]
 800e0f4:	f000 fb0a 	bl	800e70c <USBH_ClrFeature>
 800e0f8:	4603      	mov	r3, r0
 800e0fa:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e0fc:	7bbb      	ldrb	r3, [r7, #14]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d10a      	bne.n	800e118 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800e102:	68bb      	ldr	r3, [r7, #8]
 800e104:	2200      	movs	r2, #0
 800e106:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800e10a:	e005      	b.n	800e118 <USBH_CDC_Process+0x120>

    default:
      break;
 800e10c:	bf00      	nop
 800e10e:	e004      	b.n	800e11a <USBH_CDC_Process+0x122>
      break;
 800e110:	bf00      	nop
 800e112:	e002      	b.n	800e11a <USBH_CDC_Process+0x122>
      break;
 800e114:	bf00      	nop
 800e116:	e000      	b.n	800e11a <USBH_CDC_Process+0x122>
      break;
 800e118:	bf00      	nop

  }

  return status;
 800e11a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e11c:	4618      	mov	r0, r3
 800e11e:	3710      	adds	r7, #16
 800e120:	46bd      	mov	sp, r7
 800e122:	bd80      	pop	{r7, pc}

0800e124 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800e124:	b480      	push	{r7}
 800e126:	b083      	sub	sp, #12
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800e12c:	2300      	movs	r3, #0
}
 800e12e:	4618      	mov	r0, r3
 800e130:	370c      	adds	r7, #12
 800e132:	46bd      	mov	sp, r7
 800e134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e138:	4770      	bx	lr

0800e13a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800e13a:	b580      	push	{r7, lr}
 800e13c:	b082      	sub	sp, #8
 800e13e:	af00      	add	r7, sp, #0
 800e140:	6078      	str	r0, [r7, #4]
 800e142:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	22a1      	movs	r2, #161	; 0xa1
 800e148:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	2221      	movs	r2, #33	; 0x21
 800e14e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	2200      	movs	r2, #0
 800e154:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	2200      	movs	r2, #0
 800e15a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2207      	movs	r2, #7
 800e160:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800e162:	683b      	ldr	r3, [r7, #0]
 800e164:	2207      	movs	r2, #7
 800e166:	4619      	mov	r1, r3
 800e168:	6878      	ldr	r0, [r7, #4]
 800e16a:	f000 faf3 	bl	800e754 <USBH_CtlReq>
 800e16e:	4603      	mov	r3, r0
}
 800e170:	4618      	mov	r0, r3
 800e172:	3708      	adds	r7, #8
 800e174:	46bd      	mov	sp, r7
 800e176:	bd80      	pop	{r7, pc}

0800e178 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b082      	sub	sp, #8
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
 800e180:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	2221      	movs	r2, #33	; 0x21
 800e186:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	2220      	movs	r2, #32
 800e18c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	2200      	movs	r2, #0
 800e192:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	2200      	movs	r2, #0
 800e198:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	2207      	movs	r2, #7
 800e19e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800e1a0:	683b      	ldr	r3, [r7, #0]
 800e1a2:	2207      	movs	r2, #7
 800e1a4:	4619      	mov	r1, r3
 800e1a6:	6878      	ldr	r0, [r7, #4]
 800e1a8:	f000 fad4 	bl	800e754 <USBH_CtlReq>
 800e1ac:	4603      	mov	r3, r0
}
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	3708      	adds	r7, #8
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	bd80      	pop	{r7, pc}

0800e1b6 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800e1b6:	b580      	push	{r7, lr}
 800e1b8:	b086      	sub	sp, #24
 800e1ba:	af02      	add	r7, sp, #8
 800e1bc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e1c4:	69db      	ldr	r3, [r3, #28]
 800e1c6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800e1d2:	2b01      	cmp	r3, #1
 800e1d4:	d002      	beq.n	800e1dc <CDC_ProcessTransmission+0x26>
 800e1d6:	2b02      	cmp	r3, #2
 800e1d8:	d025      	beq.n	800e226 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800e1da:	e060      	b.n	800e29e <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1e0:	68fa      	ldr	r2, [r7, #12]
 800e1e2:	8b12      	ldrh	r2, [r2, #24]
 800e1e4:	4293      	cmp	r3, r2
 800e1e6:	d90c      	bls.n	800e202 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	69d9      	ldr	r1, [r3, #28]
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	8b1a      	ldrh	r2, [r3, #24]
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	7b58      	ldrb	r0, [r3, #13]
 800e1f4:	2301      	movs	r3, #1
 800e1f6:	9300      	str	r3, [sp, #0]
 800e1f8:	4603      	mov	r3, r0
 800e1fa:	6878      	ldr	r0, [r7, #4]
 800e1fc:	f000 fcbb 	bl	800eb76 <USBH_BulkSendData>
 800e200:	e00c      	b.n	800e21c <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800e20a:	b29a      	uxth	r2, r3
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	7b58      	ldrb	r0, [r3, #13]
 800e210:	2301      	movs	r3, #1
 800e212:	9300      	str	r3, [sp, #0]
 800e214:	4603      	mov	r3, r0
 800e216:	6878      	ldr	r0, [r7, #4]
 800e218:	f000 fcad 	bl	800eb76 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	2202      	movs	r2, #2
 800e220:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800e224:	e03b      	b.n	800e29e <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	7b5b      	ldrb	r3, [r3, #13]
 800e22a:	4619      	mov	r1, r3
 800e22c:	6878      	ldr	r0, [r7, #4]
 800e22e:	f000 ff85 	bl	800f13c <USBH_LL_GetURBState>
 800e232:	4603      	mov	r3, r0
 800e234:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800e236:	7afb      	ldrb	r3, [r7, #11]
 800e238:	2b01      	cmp	r3, #1
 800e23a:	d128      	bne.n	800e28e <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e240:	68fa      	ldr	r2, [r7, #12]
 800e242:	8b12      	ldrh	r2, [r2, #24]
 800e244:	4293      	cmp	r3, r2
 800e246:	d90e      	bls.n	800e266 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e24c:	68fa      	ldr	r2, [r7, #12]
 800e24e:	8b12      	ldrh	r2, [r2, #24]
 800e250:	1a9a      	subs	r2, r3, r2
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	69db      	ldr	r3, [r3, #28]
 800e25a:	68fa      	ldr	r2, [r7, #12]
 800e25c:	8b12      	ldrh	r2, [r2, #24]
 800e25e:	441a      	add	r2, r3
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	61da      	str	r2, [r3, #28]
 800e264:	e002      	b.n	800e26c <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	2200      	movs	r2, #0
 800e26a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e270:	2b00      	cmp	r3, #0
 800e272:	d004      	beq.n	800e27e <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	2201      	movs	r2, #1
 800e278:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800e27c:	e00e      	b.n	800e29c <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	2200      	movs	r2, #0
 800e282:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800e286:	6878      	ldr	r0, [r7, #4]
 800e288:	f000 f868 	bl	800e35c <USBH_CDC_TransmitCallback>
      break;
 800e28c:	e006      	b.n	800e29c <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 800e28e:	7afb      	ldrb	r3, [r7, #11]
 800e290:	2b02      	cmp	r3, #2
 800e292:	d103      	bne.n	800e29c <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	2201      	movs	r2, #1
 800e298:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800e29c:	bf00      	nop
  }
}
 800e29e:	bf00      	nop
 800e2a0:	3710      	adds	r7, #16
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	bd80      	pop	{r7, pc}

0800e2a6 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800e2a6:	b580      	push	{r7, lr}
 800e2a8:	b086      	sub	sp, #24
 800e2aa:	af00      	add	r7, sp, #0
 800e2ac:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e2b4:	69db      	ldr	r3, [r3, #28]
 800e2b6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800e2bc:	697b      	ldr	r3, [r7, #20]
 800e2be:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800e2c2:	2b03      	cmp	r3, #3
 800e2c4:	d002      	beq.n	800e2cc <CDC_ProcessReception+0x26>
 800e2c6:	2b04      	cmp	r3, #4
 800e2c8:	d00e      	beq.n	800e2e8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800e2ca:	e043      	b.n	800e354 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800e2cc:	697b      	ldr	r3, [r7, #20]
 800e2ce:	6a19      	ldr	r1, [r3, #32]
 800e2d0:	697b      	ldr	r3, [r7, #20]
 800e2d2:	8b5a      	ldrh	r2, [r3, #26]
 800e2d4:	697b      	ldr	r3, [r7, #20]
 800e2d6:	7b1b      	ldrb	r3, [r3, #12]
 800e2d8:	6878      	ldr	r0, [r7, #4]
 800e2da:	f000 fc71 	bl	800ebc0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800e2de:	697b      	ldr	r3, [r7, #20]
 800e2e0:	2204      	movs	r2, #4
 800e2e2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800e2e6:	e035      	b.n	800e354 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800e2e8:	697b      	ldr	r3, [r7, #20]
 800e2ea:	7b1b      	ldrb	r3, [r3, #12]
 800e2ec:	4619      	mov	r1, r3
 800e2ee:	6878      	ldr	r0, [r7, #4]
 800e2f0:	f000 ff24 	bl	800f13c <USBH_LL_GetURBState>
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800e2f8:	7cfb      	ldrb	r3, [r7, #19]
 800e2fa:	2b01      	cmp	r3, #1
 800e2fc:	d129      	bne.n	800e352 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800e2fe:	697b      	ldr	r3, [r7, #20]
 800e300:	7b1b      	ldrb	r3, [r3, #12]
 800e302:	4619      	mov	r1, r3
 800e304:	6878      	ldr	r0, [r7, #4]
 800e306:	f000 fe87 	bl	800f018 <USBH_LL_GetLastXferSize>
 800e30a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800e30c:	697b      	ldr	r3, [r7, #20]
 800e30e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e310:	68fa      	ldr	r2, [r7, #12]
 800e312:	429a      	cmp	r2, r3
 800e314:	d016      	beq.n	800e344 <CDC_ProcessReception+0x9e>
 800e316:	697b      	ldr	r3, [r7, #20]
 800e318:	8b5b      	ldrh	r3, [r3, #26]
 800e31a:	461a      	mov	r2, r3
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	4293      	cmp	r3, r2
 800e320:	d910      	bls.n	800e344 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800e322:	697b      	ldr	r3, [r7, #20]
 800e324:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	1ad2      	subs	r2, r2, r3
 800e32a:	697b      	ldr	r3, [r7, #20]
 800e32c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800e32e:	697b      	ldr	r3, [r7, #20]
 800e330:	6a1a      	ldr	r2, [r3, #32]
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	441a      	add	r2, r3
 800e336:	697b      	ldr	r3, [r7, #20]
 800e338:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800e33a:	697b      	ldr	r3, [r7, #20]
 800e33c:	2203      	movs	r2, #3
 800e33e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800e342:	e006      	b.n	800e352 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800e344:	697b      	ldr	r3, [r7, #20]
 800e346:	2200      	movs	r2, #0
 800e348:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800e34c:	6878      	ldr	r0, [r7, #4]
 800e34e:	f000 f80f 	bl	800e370 <USBH_CDC_ReceiveCallback>
      break;
 800e352:	bf00      	nop
  }
}
 800e354:	bf00      	nop
 800e356:	3718      	adds	r7, #24
 800e358:	46bd      	mov	sp, r7
 800e35a:	bd80      	pop	{r7, pc}

0800e35c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800e35c:	b480      	push	{r7}
 800e35e:	b083      	sub	sp, #12
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e364:	bf00      	nop
 800e366:	370c      	adds	r7, #12
 800e368:	46bd      	mov	sp, r7
 800e36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36e:	4770      	bx	lr

0800e370 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800e370:	b480      	push	{r7}
 800e372:	b083      	sub	sp, #12
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e378:	bf00      	nop
 800e37a:	370c      	adds	r7, #12
 800e37c:	46bd      	mov	sp, r7
 800e37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e382:	4770      	bx	lr

0800e384 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800e384:	b480      	push	{r7}
 800e386:	b083      	sub	sp, #12
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e38c:	bf00      	nop
 800e38e:	370c      	adds	r7, #12
 800e390:	46bd      	mov	sp, r7
 800e392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e396:	4770      	bx	lr

0800e398 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b084      	sub	sp, #16
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	60f8      	str	r0, [r7, #12]
 800e3a0:	60b9      	str	r1, [r7, #8]
 800e3a2:	4613      	mov	r3, r2
 800e3a4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d101      	bne.n	800e3b0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800e3ac:	2302      	movs	r3, #2
 800e3ae:	e029      	b.n	800e404 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	79fa      	ldrb	r2, [r7, #7]
 800e3b4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800e3c8:	68f8      	ldr	r0, [r7, #12]
 800e3ca:	f000 f81f 	bl	800e40c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	2200      	movs	r2, #0
 800e3da:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	2200      	movs	r2, #0
 800e3ea:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800e3ee:	68bb      	ldr	r3, [r7, #8]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d003      	beq.n	800e3fc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	68ba      	ldr	r2, [r7, #8]
 800e3f8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800e3fc:	68f8      	ldr	r0, [r7, #12]
 800e3fe:	f000 fd99 	bl	800ef34 <USBH_LL_Init>

  return USBH_OK;
 800e402:	2300      	movs	r3, #0
}
 800e404:	4618      	mov	r0, r3
 800e406:	3710      	adds	r7, #16
 800e408:	46bd      	mov	sp, r7
 800e40a:	bd80      	pop	{r7, pc}

0800e40c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800e40c:	b480      	push	{r7}
 800e40e:	b085      	sub	sp, #20
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800e414:	2300      	movs	r3, #0
 800e416:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e418:	2300      	movs	r3, #0
 800e41a:	60fb      	str	r3, [r7, #12]
 800e41c:	e009      	b.n	800e432 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800e41e:	687a      	ldr	r2, [r7, #4]
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	33e0      	adds	r3, #224	; 0xe0
 800e424:	009b      	lsls	r3, r3, #2
 800e426:	4413      	add	r3, r2
 800e428:	2200      	movs	r2, #0
 800e42a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	3301      	adds	r3, #1
 800e430:	60fb      	str	r3, [r7, #12]
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	2b0e      	cmp	r3, #14
 800e436:	d9f2      	bls.n	800e41e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e438:	2300      	movs	r3, #0
 800e43a:	60fb      	str	r3, [r7, #12]
 800e43c:	e009      	b.n	800e452 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800e43e:	687a      	ldr	r2, [r7, #4]
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	4413      	add	r3, r2
 800e444:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800e448:	2200      	movs	r2, #0
 800e44a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	3301      	adds	r3, #1
 800e450:	60fb      	str	r3, [r7, #12]
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e458:	d3f1      	bcc.n	800e43e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	2200      	movs	r2, #0
 800e45e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	2200      	movs	r2, #0
 800e464:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	2201      	movs	r2, #1
 800e46a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	2200      	movs	r2, #0
 800e470:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	2201      	movs	r2, #1
 800e478:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	2240      	movs	r2, #64	; 0x40
 800e47e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	2200      	movs	r2, #0
 800e484:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	2200      	movs	r2, #0
 800e48a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	2201      	movs	r2, #1
 800e492:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	2200      	movs	r2, #0
 800e49a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800e4a6:	2300      	movs	r3, #0
}
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	3714      	adds	r7, #20
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b2:	4770      	bx	lr

0800e4b4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800e4b4:	b480      	push	{r7}
 800e4b6:	b085      	sub	sp, #20
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	6078      	str	r0, [r7, #4]
 800e4bc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800e4be:	2300      	movs	r3, #0
 800e4c0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800e4c2:	683b      	ldr	r3, [r7, #0]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d016      	beq.n	800e4f6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d10e      	bne.n	800e4f0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e4d8:	1c59      	adds	r1, r3, #1
 800e4da:	687a      	ldr	r2, [r7, #4]
 800e4dc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800e4e0:	687a      	ldr	r2, [r7, #4]
 800e4e2:	33de      	adds	r3, #222	; 0xde
 800e4e4:	6839      	ldr	r1, [r7, #0]
 800e4e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	73fb      	strb	r3, [r7, #15]
 800e4ee:	e004      	b.n	800e4fa <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800e4f0:	2302      	movs	r3, #2
 800e4f2:	73fb      	strb	r3, [r7, #15]
 800e4f4:	e001      	b.n	800e4fa <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800e4f6:	2302      	movs	r3, #2
 800e4f8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e4fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	3714      	adds	r7, #20
 800e500:	46bd      	mov	sp, r7
 800e502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e506:	4770      	bx	lr

0800e508 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800e508:	b480      	push	{r7}
 800e50a:	b085      	sub	sp, #20
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
 800e510:	460b      	mov	r3, r1
 800e512:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800e514:	2300      	movs	r3, #0
 800e516:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800e51e:	78fa      	ldrb	r2, [r7, #3]
 800e520:	429a      	cmp	r2, r3
 800e522:	d204      	bcs.n	800e52e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	78fa      	ldrb	r2, [r7, #3]
 800e528:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800e52c:	e001      	b.n	800e532 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800e52e:	2302      	movs	r3, #2
 800e530:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e532:	7bfb      	ldrb	r3, [r7, #15]
}
 800e534:	4618      	mov	r0, r3
 800e536:	3714      	adds	r7, #20
 800e538:	46bd      	mov	sp, r7
 800e53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53e:	4770      	bx	lr

0800e540 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800e540:	b480      	push	{r7}
 800e542:	b087      	sub	sp, #28
 800e544:	af00      	add	r7, sp, #0
 800e546:	6078      	str	r0, [r7, #4]
 800e548:	4608      	mov	r0, r1
 800e54a:	4611      	mov	r1, r2
 800e54c:	461a      	mov	r2, r3
 800e54e:	4603      	mov	r3, r0
 800e550:	70fb      	strb	r3, [r7, #3]
 800e552:	460b      	mov	r3, r1
 800e554:	70bb      	strb	r3, [r7, #2]
 800e556:	4613      	mov	r3, r2
 800e558:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800e55a:	2300      	movs	r3, #0
 800e55c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800e55e:	2300      	movs	r3, #0
 800e560:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800e568:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e56a:	e025      	b.n	800e5b8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800e56c:	7dfb      	ldrb	r3, [r7, #23]
 800e56e:	221a      	movs	r2, #26
 800e570:	fb02 f303 	mul.w	r3, r2, r3
 800e574:	3308      	adds	r3, #8
 800e576:	68fa      	ldr	r2, [r7, #12]
 800e578:	4413      	add	r3, r2
 800e57a:	3302      	adds	r3, #2
 800e57c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800e57e:	693b      	ldr	r3, [r7, #16]
 800e580:	795b      	ldrb	r3, [r3, #5]
 800e582:	78fa      	ldrb	r2, [r7, #3]
 800e584:	429a      	cmp	r2, r3
 800e586:	d002      	beq.n	800e58e <USBH_FindInterface+0x4e>
 800e588:	78fb      	ldrb	r3, [r7, #3]
 800e58a:	2bff      	cmp	r3, #255	; 0xff
 800e58c:	d111      	bne.n	800e5b2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e58e:	693b      	ldr	r3, [r7, #16]
 800e590:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800e592:	78ba      	ldrb	r2, [r7, #2]
 800e594:	429a      	cmp	r2, r3
 800e596:	d002      	beq.n	800e59e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e598:	78bb      	ldrb	r3, [r7, #2]
 800e59a:	2bff      	cmp	r3, #255	; 0xff
 800e59c:	d109      	bne.n	800e5b2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800e59e:	693b      	ldr	r3, [r7, #16]
 800e5a0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e5a2:	787a      	ldrb	r2, [r7, #1]
 800e5a4:	429a      	cmp	r2, r3
 800e5a6:	d002      	beq.n	800e5ae <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800e5a8:	787b      	ldrb	r3, [r7, #1]
 800e5aa:	2bff      	cmp	r3, #255	; 0xff
 800e5ac:	d101      	bne.n	800e5b2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800e5ae:	7dfb      	ldrb	r3, [r7, #23]
 800e5b0:	e006      	b.n	800e5c0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800e5b2:	7dfb      	ldrb	r3, [r7, #23]
 800e5b4:	3301      	adds	r3, #1
 800e5b6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e5b8:	7dfb      	ldrb	r3, [r7, #23]
 800e5ba:	2b01      	cmp	r3, #1
 800e5bc:	d9d6      	bls.n	800e56c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800e5be:	23ff      	movs	r3, #255	; 0xff
}
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	371c      	adds	r7, #28
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ca:	4770      	bx	lr

0800e5cc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b082      	sub	sp, #8
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800e5d4:	6878      	ldr	r0, [r7, #4]
 800e5d6:	f000 fce9 	bl	800efac <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800e5da:	2101      	movs	r1, #1
 800e5dc:	6878      	ldr	r0, [r7, #4]
 800e5de:	f000 fdc0 	bl	800f162 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800e5e2:	2300      	movs	r3, #0
}
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	3708      	adds	r7, #8
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	bd80      	pop	{r7, pc}

0800e5ec <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800e5ec:	b480      	push	{r7}
 800e5ee:	b083      	sub	sp, #12
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
 800e5f4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	683a      	ldr	r2, [r7, #0]
 800e5fa:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800e5fe:	bf00      	nop
 800e600:	370c      	adds	r7, #12
 800e602:	46bd      	mov	sp, r7
 800e604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e608:	4770      	bx	lr

0800e60a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800e60a:	b580      	push	{r7, lr}
 800e60c:	b082      	sub	sp, #8
 800e60e:	af00      	add	r7, sp, #0
 800e610:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e618:	1c5a      	adds	r2, r3, #1
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800e620:	6878      	ldr	r0, [r7, #4]
 800e622:	f000 f804 	bl	800e62e <USBH_HandleSof>
}
 800e626:	bf00      	nop
 800e628:	3708      	adds	r7, #8
 800e62a:	46bd      	mov	sp, r7
 800e62c:	bd80      	pop	{r7, pc}

0800e62e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800e62e:	b580      	push	{r7, lr}
 800e630:	b082      	sub	sp, #8
 800e632:	af00      	add	r7, sp, #0
 800e634:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	781b      	ldrb	r3, [r3, #0]
 800e63a:	b2db      	uxtb	r3, r3
 800e63c:	2b0b      	cmp	r3, #11
 800e63e:	d10a      	bne.n	800e656 <USBH_HandleSof+0x28>
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e646:	2b00      	cmp	r3, #0
 800e648:	d005      	beq.n	800e656 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e650:	699b      	ldr	r3, [r3, #24]
 800e652:	6878      	ldr	r0, [r7, #4]
 800e654:	4798      	blx	r3
  }
}
 800e656:	bf00      	nop
 800e658:	3708      	adds	r7, #8
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd80      	pop	{r7, pc}

0800e65e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800e65e:	b480      	push	{r7}
 800e660:	b083      	sub	sp, #12
 800e662:	af00      	add	r7, sp, #0
 800e664:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	2201      	movs	r2, #1
 800e66a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800e66e:	bf00      	nop
}
 800e670:	370c      	adds	r7, #12
 800e672:	46bd      	mov	sp, r7
 800e674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e678:	4770      	bx	lr

0800e67a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800e67a:	b480      	push	{r7}
 800e67c:	b083      	sub	sp, #12
 800e67e:	af00      	add	r7, sp, #0
 800e680:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	2200      	movs	r2, #0
 800e686:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800e68a:	bf00      	nop
}
 800e68c:	370c      	adds	r7, #12
 800e68e:	46bd      	mov	sp, r7
 800e690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e694:	4770      	bx	lr

0800e696 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800e696:	b480      	push	{r7}
 800e698:	b083      	sub	sp, #12
 800e69a:	af00      	add	r7, sp, #0
 800e69c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	2201      	movs	r2, #1
 800e6a2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	2200      	movs	r2, #0
 800e6aa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	2200      	movs	r2, #0
 800e6b2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800e6b6:	2300      	movs	r3, #0
}
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	370c      	adds	r7, #12
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c2:	4770      	bx	lr

0800e6c4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b082      	sub	sp, #8
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	2201      	movs	r2, #1
 800e6d0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	2200      	movs	r2, #0
 800e6e0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800e6e4:	6878      	ldr	r0, [r7, #4]
 800e6e6:	f000 fc7c 	bl	800efe2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	791b      	ldrb	r3, [r3, #4]
 800e6ee:	4619      	mov	r1, r3
 800e6f0:	6878      	ldr	r0, [r7, #4]
 800e6f2:	f000 fad3 	bl	800ec9c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	795b      	ldrb	r3, [r3, #5]
 800e6fa:	4619      	mov	r1, r3
 800e6fc:	6878      	ldr	r0, [r7, #4]
 800e6fe:	f000 facd 	bl	800ec9c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800e702:	2300      	movs	r3, #0
}
 800e704:	4618      	mov	r0, r3
 800e706:	3708      	adds	r7, #8
 800e708:	46bd      	mov	sp, r7
 800e70a:	bd80      	pop	{r7, pc}

0800e70c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b082      	sub	sp, #8
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
 800e714:	460b      	mov	r3, r1
 800e716:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	789b      	ldrb	r3, [r3, #2]
 800e71c:	2b01      	cmp	r3, #1
 800e71e:	d10f      	bne.n	800e740 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	2202      	movs	r2, #2
 800e724:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	2201      	movs	r2, #1
 800e72a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	2200      	movs	r2, #0
 800e730:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800e732:	78fb      	ldrb	r3, [r7, #3]
 800e734:	b29a      	uxth	r2, r3
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	2200      	movs	r2, #0
 800e73e:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800e740:	2200      	movs	r2, #0
 800e742:	2100      	movs	r1, #0
 800e744:	6878      	ldr	r0, [r7, #4]
 800e746:	f000 f805 	bl	800e754 <USBH_CtlReq>
 800e74a:	4603      	mov	r3, r0
}
 800e74c:	4618      	mov	r0, r3
 800e74e:	3708      	adds	r7, #8
 800e750:	46bd      	mov	sp, r7
 800e752:	bd80      	pop	{r7, pc}

0800e754 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b086      	sub	sp, #24
 800e758:	af00      	add	r7, sp, #0
 800e75a:	60f8      	str	r0, [r7, #12]
 800e75c:	60b9      	str	r1, [r7, #8]
 800e75e:	4613      	mov	r3, r2
 800e760:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800e762:	2301      	movs	r3, #1
 800e764:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	789b      	ldrb	r3, [r3, #2]
 800e76a:	2b01      	cmp	r3, #1
 800e76c:	d002      	beq.n	800e774 <USBH_CtlReq+0x20>
 800e76e:	2b02      	cmp	r3, #2
 800e770:	d00f      	beq.n	800e792 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800e772:	e027      	b.n	800e7c4 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	68ba      	ldr	r2, [r7, #8]
 800e778:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	88fa      	ldrh	r2, [r7, #6]
 800e77e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	2201      	movs	r2, #1
 800e784:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	2202      	movs	r2, #2
 800e78a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800e78c:	2301      	movs	r3, #1
 800e78e:	75fb      	strb	r3, [r7, #23]
      break;
 800e790:	e018      	b.n	800e7c4 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800e792:	68f8      	ldr	r0, [r7, #12]
 800e794:	f000 f81c 	bl	800e7d0 <USBH_HandleControl>
 800e798:	4603      	mov	r3, r0
 800e79a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800e79c:	7dfb      	ldrb	r3, [r7, #23]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d002      	beq.n	800e7a8 <USBH_CtlReq+0x54>
 800e7a2:	7dfb      	ldrb	r3, [r7, #23]
 800e7a4:	2b03      	cmp	r3, #3
 800e7a6:	d106      	bne.n	800e7b6 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	2201      	movs	r2, #1
 800e7ac:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	761a      	strb	r2, [r3, #24]
      break;
 800e7b4:	e005      	b.n	800e7c2 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800e7b6:	7dfb      	ldrb	r3, [r7, #23]
 800e7b8:	2b02      	cmp	r3, #2
 800e7ba:	d102      	bne.n	800e7c2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	2201      	movs	r2, #1
 800e7c0:	709a      	strb	r2, [r3, #2]
      break;
 800e7c2:	bf00      	nop
  }
  return status;
 800e7c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	3718      	adds	r7, #24
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	bd80      	pop	{r7, pc}
	...

0800e7d0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b086      	sub	sp, #24
 800e7d4:	af02      	add	r7, sp, #8
 800e7d6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800e7d8:	2301      	movs	r3, #1
 800e7da:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e7dc:	2300      	movs	r3, #0
 800e7de:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	7e1b      	ldrb	r3, [r3, #24]
 800e7e4:	3b01      	subs	r3, #1
 800e7e6:	2b0a      	cmp	r3, #10
 800e7e8:	f200 8158 	bhi.w	800ea9c <USBH_HandleControl+0x2cc>
 800e7ec:	a201      	add	r2, pc, #4	; (adr r2, 800e7f4 <USBH_HandleControl+0x24>)
 800e7ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7f2:	bf00      	nop
 800e7f4:	0800e821 	.word	0x0800e821
 800e7f8:	0800e83b 	.word	0x0800e83b
 800e7fc:	0800e8a5 	.word	0x0800e8a5
 800e800:	0800e8cb 	.word	0x0800e8cb
 800e804:	0800e903 	.word	0x0800e903
 800e808:	0800e92f 	.word	0x0800e92f
 800e80c:	0800e981 	.word	0x0800e981
 800e810:	0800e9a3 	.word	0x0800e9a3
 800e814:	0800e9df 	.word	0x0800e9df
 800e818:	0800ea07 	.word	0x0800ea07
 800e81c:	0800ea45 	.word	0x0800ea45
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	f103 0110 	add.w	r1, r3, #16
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	795b      	ldrb	r3, [r3, #5]
 800e82a:	461a      	mov	r2, r3
 800e82c:	6878      	ldr	r0, [r7, #4]
 800e82e:	f000 f945 	bl	800eabc <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	2202      	movs	r2, #2
 800e836:	761a      	strb	r2, [r3, #24]
      break;
 800e838:	e13b      	b.n	800eab2 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	795b      	ldrb	r3, [r3, #5]
 800e83e:	4619      	mov	r1, r3
 800e840:	6878      	ldr	r0, [r7, #4]
 800e842:	f000 fc7b 	bl	800f13c <USBH_LL_GetURBState>
 800e846:	4603      	mov	r3, r0
 800e848:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800e84a:	7bbb      	ldrb	r3, [r7, #14]
 800e84c:	2b01      	cmp	r3, #1
 800e84e:	d11e      	bne.n	800e88e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	7c1b      	ldrb	r3, [r3, #16]
 800e854:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e858:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	8adb      	ldrh	r3, [r3, #22]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d00a      	beq.n	800e878 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800e862:	7b7b      	ldrb	r3, [r7, #13]
 800e864:	2b80      	cmp	r3, #128	; 0x80
 800e866:	d103      	bne.n	800e870 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	2203      	movs	r2, #3
 800e86c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e86e:	e117      	b.n	800eaa0 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	2205      	movs	r2, #5
 800e874:	761a      	strb	r2, [r3, #24]
      break;
 800e876:	e113      	b.n	800eaa0 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 800e878:	7b7b      	ldrb	r3, [r7, #13]
 800e87a:	2b80      	cmp	r3, #128	; 0x80
 800e87c:	d103      	bne.n	800e886 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	2209      	movs	r2, #9
 800e882:	761a      	strb	r2, [r3, #24]
      break;
 800e884:	e10c      	b.n	800eaa0 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	2207      	movs	r2, #7
 800e88a:	761a      	strb	r2, [r3, #24]
      break;
 800e88c:	e108      	b.n	800eaa0 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800e88e:	7bbb      	ldrb	r3, [r7, #14]
 800e890:	2b04      	cmp	r3, #4
 800e892:	d003      	beq.n	800e89c <USBH_HandleControl+0xcc>
 800e894:	7bbb      	ldrb	r3, [r7, #14]
 800e896:	2b02      	cmp	r3, #2
 800e898:	f040 8102 	bne.w	800eaa0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	220b      	movs	r2, #11
 800e8a0:	761a      	strb	r2, [r3, #24]
      break;
 800e8a2:	e0fd      	b.n	800eaa0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e8aa:	b29a      	uxth	r2, r3
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	6899      	ldr	r1, [r3, #8]
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	899a      	ldrh	r2, [r3, #12]
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	791b      	ldrb	r3, [r3, #4]
 800e8bc:	6878      	ldr	r0, [r7, #4]
 800e8be:	f000 f93c 	bl	800eb3a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	2204      	movs	r2, #4
 800e8c6:	761a      	strb	r2, [r3, #24]
      break;
 800e8c8:	e0f3      	b.n	800eab2 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	791b      	ldrb	r3, [r3, #4]
 800e8ce:	4619      	mov	r1, r3
 800e8d0:	6878      	ldr	r0, [r7, #4]
 800e8d2:	f000 fc33 	bl	800f13c <USBH_LL_GetURBState>
 800e8d6:	4603      	mov	r3, r0
 800e8d8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800e8da:	7bbb      	ldrb	r3, [r7, #14]
 800e8dc:	2b01      	cmp	r3, #1
 800e8de:	d102      	bne.n	800e8e6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	2209      	movs	r2, #9
 800e8e4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800e8e6:	7bbb      	ldrb	r3, [r7, #14]
 800e8e8:	2b05      	cmp	r3, #5
 800e8ea:	d102      	bne.n	800e8f2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800e8ec:	2303      	movs	r3, #3
 800e8ee:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e8f0:	e0d8      	b.n	800eaa4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800e8f2:	7bbb      	ldrb	r3, [r7, #14]
 800e8f4:	2b04      	cmp	r3, #4
 800e8f6:	f040 80d5 	bne.w	800eaa4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	220b      	movs	r2, #11
 800e8fe:	761a      	strb	r2, [r3, #24]
      break;
 800e900:	e0d0      	b.n	800eaa4 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	6899      	ldr	r1, [r3, #8]
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	899a      	ldrh	r2, [r3, #12]
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	7958      	ldrb	r0, [r3, #5]
 800e90e:	2301      	movs	r3, #1
 800e910:	9300      	str	r3, [sp, #0]
 800e912:	4603      	mov	r3, r0
 800e914:	6878      	ldr	r0, [r7, #4]
 800e916:	f000 f8eb 	bl	800eaf0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e920:	b29a      	uxth	r2, r3
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	2206      	movs	r2, #6
 800e92a:	761a      	strb	r2, [r3, #24]
      break;
 800e92c:	e0c1      	b.n	800eab2 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	795b      	ldrb	r3, [r3, #5]
 800e932:	4619      	mov	r1, r3
 800e934:	6878      	ldr	r0, [r7, #4]
 800e936:	f000 fc01 	bl	800f13c <USBH_LL_GetURBState>
 800e93a:	4603      	mov	r3, r0
 800e93c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e93e:	7bbb      	ldrb	r3, [r7, #14]
 800e940:	2b01      	cmp	r3, #1
 800e942:	d103      	bne.n	800e94c <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	2207      	movs	r2, #7
 800e948:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e94a:	e0ad      	b.n	800eaa8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 800e94c:	7bbb      	ldrb	r3, [r7, #14]
 800e94e:	2b05      	cmp	r3, #5
 800e950:	d105      	bne.n	800e95e <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	220c      	movs	r2, #12
 800e956:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800e958:	2303      	movs	r3, #3
 800e95a:	73fb      	strb	r3, [r7, #15]
      break;
 800e95c:	e0a4      	b.n	800eaa8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e95e:	7bbb      	ldrb	r3, [r7, #14]
 800e960:	2b02      	cmp	r3, #2
 800e962:	d103      	bne.n	800e96c <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	2205      	movs	r2, #5
 800e968:	761a      	strb	r2, [r3, #24]
      break;
 800e96a:	e09d      	b.n	800eaa8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 800e96c:	7bbb      	ldrb	r3, [r7, #14]
 800e96e:	2b04      	cmp	r3, #4
 800e970:	f040 809a 	bne.w	800eaa8 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	220b      	movs	r2, #11
 800e978:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800e97a:	2302      	movs	r3, #2
 800e97c:	73fb      	strb	r3, [r7, #15]
      break;
 800e97e:	e093      	b.n	800eaa8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	791b      	ldrb	r3, [r3, #4]
 800e984:	2200      	movs	r2, #0
 800e986:	2100      	movs	r1, #0
 800e988:	6878      	ldr	r0, [r7, #4]
 800e98a:	f000 f8d6 	bl	800eb3a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e994:	b29a      	uxth	r2, r3
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	2208      	movs	r2, #8
 800e99e:	761a      	strb	r2, [r3, #24]

      break;
 800e9a0:	e087      	b.n	800eab2 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	791b      	ldrb	r3, [r3, #4]
 800e9a6:	4619      	mov	r1, r3
 800e9a8:	6878      	ldr	r0, [r7, #4]
 800e9aa:	f000 fbc7 	bl	800f13c <USBH_LL_GetURBState>
 800e9ae:	4603      	mov	r3, r0
 800e9b0:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e9b2:	7bbb      	ldrb	r3, [r7, #14]
 800e9b4:	2b01      	cmp	r3, #1
 800e9b6:	d105      	bne.n	800e9c4 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	220d      	movs	r2, #13
 800e9bc:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800e9be:	2300      	movs	r3, #0
 800e9c0:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e9c2:	e073      	b.n	800eaac <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 800e9c4:	7bbb      	ldrb	r3, [r7, #14]
 800e9c6:	2b04      	cmp	r3, #4
 800e9c8:	d103      	bne.n	800e9d2 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	220b      	movs	r2, #11
 800e9ce:	761a      	strb	r2, [r3, #24]
      break;
 800e9d0:	e06c      	b.n	800eaac <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 800e9d2:	7bbb      	ldrb	r3, [r7, #14]
 800e9d4:	2b05      	cmp	r3, #5
 800e9d6:	d169      	bne.n	800eaac <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 800e9d8:	2303      	movs	r3, #3
 800e9da:	73fb      	strb	r3, [r7, #15]
      break;
 800e9dc:	e066      	b.n	800eaac <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	795a      	ldrb	r2, [r3, #5]
 800e9e2:	2301      	movs	r3, #1
 800e9e4:	9300      	str	r3, [sp, #0]
 800e9e6:	4613      	mov	r3, r2
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	2100      	movs	r1, #0
 800e9ec:	6878      	ldr	r0, [r7, #4]
 800e9ee:	f000 f87f 	bl	800eaf0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e9f8:	b29a      	uxth	r2, r3
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	220a      	movs	r2, #10
 800ea02:	761a      	strb	r2, [r3, #24]
      break;
 800ea04:	e055      	b.n	800eab2 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	795b      	ldrb	r3, [r3, #5]
 800ea0a:	4619      	mov	r1, r3
 800ea0c:	6878      	ldr	r0, [r7, #4]
 800ea0e:	f000 fb95 	bl	800f13c <USBH_LL_GetURBState>
 800ea12:	4603      	mov	r3, r0
 800ea14:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800ea16:	7bbb      	ldrb	r3, [r7, #14]
 800ea18:	2b01      	cmp	r3, #1
 800ea1a:	d105      	bne.n	800ea28 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	220d      	movs	r2, #13
 800ea24:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ea26:	e043      	b.n	800eab0 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ea28:	7bbb      	ldrb	r3, [r7, #14]
 800ea2a:	2b02      	cmp	r3, #2
 800ea2c:	d103      	bne.n	800ea36 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	2209      	movs	r2, #9
 800ea32:	761a      	strb	r2, [r3, #24]
      break;
 800ea34:	e03c      	b.n	800eab0 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 800ea36:	7bbb      	ldrb	r3, [r7, #14]
 800ea38:	2b04      	cmp	r3, #4
 800ea3a:	d139      	bne.n	800eab0 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	220b      	movs	r2, #11
 800ea40:	761a      	strb	r2, [r3, #24]
      break;
 800ea42:	e035      	b.n	800eab0 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	7e5b      	ldrb	r3, [r3, #25]
 800ea48:	3301      	adds	r3, #1
 800ea4a:	b2da      	uxtb	r2, r3
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	765a      	strb	r2, [r3, #25]
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	7e5b      	ldrb	r3, [r3, #25]
 800ea54:	2b02      	cmp	r3, #2
 800ea56:	d806      	bhi.n	800ea66 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	2201      	movs	r2, #1
 800ea5c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	2201      	movs	r2, #1
 800ea62:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800ea64:	e025      	b.n	800eab2 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ea6c:	2106      	movs	r1, #6
 800ea6e:	6878      	ldr	r0, [r7, #4]
 800ea70:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	2200      	movs	r2, #0
 800ea76:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	795b      	ldrb	r3, [r3, #5]
 800ea7c:	4619      	mov	r1, r3
 800ea7e:	6878      	ldr	r0, [r7, #4]
 800ea80:	f000 f90c 	bl	800ec9c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	791b      	ldrb	r3, [r3, #4]
 800ea88:	4619      	mov	r1, r3
 800ea8a:	6878      	ldr	r0, [r7, #4]
 800ea8c:	f000 f906 	bl	800ec9c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	2200      	movs	r2, #0
 800ea94:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800ea96:	2302      	movs	r3, #2
 800ea98:	73fb      	strb	r3, [r7, #15]
      break;
 800ea9a:	e00a      	b.n	800eab2 <USBH_HandleControl+0x2e2>

    default:
      break;
 800ea9c:	bf00      	nop
 800ea9e:	e008      	b.n	800eab2 <USBH_HandleControl+0x2e2>
      break;
 800eaa0:	bf00      	nop
 800eaa2:	e006      	b.n	800eab2 <USBH_HandleControl+0x2e2>
      break;
 800eaa4:	bf00      	nop
 800eaa6:	e004      	b.n	800eab2 <USBH_HandleControl+0x2e2>
      break;
 800eaa8:	bf00      	nop
 800eaaa:	e002      	b.n	800eab2 <USBH_HandleControl+0x2e2>
      break;
 800eaac:	bf00      	nop
 800eaae:	e000      	b.n	800eab2 <USBH_HandleControl+0x2e2>
      break;
 800eab0:	bf00      	nop
  }

  return status;
 800eab2:	7bfb      	ldrb	r3, [r7, #15]
}
 800eab4:	4618      	mov	r0, r3
 800eab6:	3710      	adds	r7, #16
 800eab8:	46bd      	mov	sp, r7
 800eaba:	bd80      	pop	{r7, pc}

0800eabc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b088      	sub	sp, #32
 800eac0:	af04      	add	r7, sp, #16
 800eac2:	60f8      	str	r0, [r7, #12]
 800eac4:	60b9      	str	r1, [r7, #8]
 800eac6:	4613      	mov	r3, r2
 800eac8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800eaca:	79f9      	ldrb	r1, [r7, #7]
 800eacc:	2300      	movs	r3, #0
 800eace:	9303      	str	r3, [sp, #12]
 800ead0:	2308      	movs	r3, #8
 800ead2:	9302      	str	r3, [sp, #8]
 800ead4:	68bb      	ldr	r3, [r7, #8]
 800ead6:	9301      	str	r3, [sp, #4]
 800ead8:	2300      	movs	r3, #0
 800eada:	9300      	str	r3, [sp, #0]
 800eadc:	2300      	movs	r3, #0
 800eade:	2200      	movs	r2, #0
 800eae0:	68f8      	ldr	r0, [r7, #12]
 800eae2:	f000 fafa 	bl	800f0da <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800eae6:	2300      	movs	r3, #0
}
 800eae8:	4618      	mov	r0, r3
 800eaea:	3710      	adds	r7, #16
 800eaec:	46bd      	mov	sp, r7
 800eaee:	bd80      	pop	{r7, pc}

0800eaf0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b088      	sub	sp, #32
 800eaf4:	af04      	add	r7, sp, #16
 800eaf6:	60f8      	str	r0, [r7, #12]
 800eaf8:	60b9      	str	r1, [r7, #8]
 800eafa:	4611      	mov	r1, r2
 800eafc:	461a      	mov	r2, r3
 800eafe:	460b      	mov	r3, r1
 800eb00:	80fb      	strh	r3, [r7, #6]
 800eb02:	4613      	mov	r3, r2
 800eb04:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d001      	beq.n	800eb14 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800eb10:	2300      	movs	r3, #0
 800eb12:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800eb14:	7979      	ldrb	r1, [r7, #5]
 800eb16:	7e3b      	ldrb	r3, [r7, #24]
 800eb18:	9303      	str	r3, [sp, #12]
 800eb1a:	88fb      	ldrh	r3, [r7, #6]
 800eb1c:	9302      	str	r3, [sp, #8]
 800eb1e:	68bb      	ldr	r3, [r7, #8]
 800eb20:	9301      	str	r3, [sp, #4]
 800eb22:	2301      	movs	r3, #1
 800eb24:	9300      	str	r3, [sp, #0]
 800eb26:	2300      	movs	r3, #0
 800eb28:	2200      	movs	r2, #0
 800eb2a:	68f8      	ldr	r0, [r7, #12]
 800eb2c:	f000 fad5 	bl	800f0da <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800eb30:	2300      	movs	r3, #0
}
 800eb32:	4618      	mov	r0, r3
 800eb34:	3710      	adds	r7, #16
 800eb36:	46bd      	mov	sp, r7
 800eb38:	bd80      	pop	{r7, pc}

0800eb3a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800eb3a:	b580      	push	{r7, lr}
 800eb3c:	b088      	sub	sp, #32
 800eb3e:	af04      	add	r7, sp, #16
 800eb40:	60f8      	str	r0, [r7, #12]
 800eb42:	60b9      	str	r1, [r7, #8]
 800eb44:	4611      	mov	r1, r2
 800eb46:	461a      	mov	r2, r3
 800eb48:	460b      	mov	r3, r1
 800eb4a:	80fb      	strh	r3, [r7, #6]
 800eb4c:	4613      	mov	r3, r2
 800eb4e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800eb50:	7979      	ldrb	r1, [r7, #5]
 800eb52:	2300      	movs	r3, #0
 800eb54:	9303      	str	r3, [sp, #12]
 800eb56:	88fb      	ldrh	r3, [r7, #6]
 800eb58:	9302      	str	r3, [sp, #8]
 800eb5a:	68bb      	ldr	r3, [r7, #8]
 800eb5c:	9301      	str	r3, [sp, #4]
 800eb5e:	2301      	movs	r3, #1
 800eb60:	9300      	str	r3, [sp, #0]
 800eb62:	2300      	movs	r3, #0
 800eb64:	2201      	movs	r2, #1
 800eb66:	68f8      	ldr	r0, [r7, #12]
 800eb68:	f000 fab7 	bl	800f0da <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800eb6c:	2300      	movs	r3, #0

}
 800eb6e:	4618      	mov	r0, r3
 800eb70:	3710      	adds	r7, #16
 800eb72:	46bd      	mov	sp, r7
 800eb74:	bd80      	pop	{r7, pc}

0800eb76 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800eb76:	b580      	push	{r7, lr}
 800eb78:	b088      	sub	sp, #32
 800eb7a:	af04      	add	r7, sp, #16
 800eb7c:	60f8      	str	r0, [r7, #12]
 800eb7e:	60b9      	str	r1, [r7, #8]
 800eb80:	4611      	mov	r1, r2
 800eb82:	461a      	mov	r2, r3
 800eb84:	460b      	mov	r3, r1
 800eb86:	80fb      	strh	r3, [r7, #6]
 800eb88:	4613      	mov	r3, r2
 800eb8a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d001      	beq.n	800eb9a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800eb96:	2300      	movs	r3, #0
 800eb98:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800eb9a:	7979      	ldrb	r1, [r7, #5]
 800eb9c:	7e3b      	ldrb	r3, [r7, #24]
 800eb9e:	9303      	str	r3, [sp, #12]
 800eba0:	88fb      	ldrh	r3, [r7, #6]
 800eba2:	9302      	str	r3, [sp, #8]
 800eba4:	68bb      	ldr	r3, [r7, #8]
 800eba6:	9301      	str	r3, [sp, #4]
 800eba8:	2301      	movs	r3, #1
 800ebaa:	9300      	str	r3, [sp, #0]
 800ebac:	2302      	movs	r3, #2
 800ebae:	2200      	movs	r2, #0
 800ebb0:	68f8      	ldr	r0, [r7, #12]
 800ebb2:	f000 fa92 	bl	800f0da <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800ebb6:	2300      	movs	r3, #0
}
 800ebb8:	4618      	mov	r0, r3
 800ebba:	3710      	adds	r7, #16
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	bd80      	pop	{r7, pc}

0800ebc0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b088      	sub	sp, #32
 800ebc4:	af04      	add	r7, sp, #16
 800ebc6:	60f8      	str	r0, [r7, #12]
 800ebc8:	60b9      	str	r1, [r7, #8]
 800ebca:	4611      	mov	r1, r2
 800ebcc:	461a      	mov	r2, r3
 800ebce:	460b      	mov	r3, r1
 800ebd0:	80fb      	strh	r3, [r7, #6]
 800ebd2:	4613      	mov	r3, r2
 800ebd4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ebd6:	7979      	ldrb	r1, [r7, #5]
 800ebd8:	2300      	movs	r3, #0
 800ebda:	9303      	str	r3, [sp, #12]
 800ebdc:	88fb      	ldrh	r3, [r7, #6]
 800ebde:	9302      	str	r3, [sp, #8]
 800ebe0:	68bb      	ldr	r3, [r7, #8]
 800ebe2:	9301      	str	r3, [sp, #4]
 800ebe4:	2301      	movs	r3, #1
 800ebe6:	9300      	str	r3, [sp, #0]
 800ebe8:	2302      	movs	r3, #2
 800ebea:	2201      	movs	r2, #1
 800ebec:	68f8      	ldr	r0, [r7, #12]
 800ebee:	f000 fa74 	bl	800f0da <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800ebf2:	2300      	movs	r3, #0
}
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	3710      	adds	r7, #16
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	bd80      	pop	{r7, pc}

0800ebfc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b086      	sub	sp, #24
 800ec00:	af04      	add	r7, sp, #16
 800ec02:	6078      	str	r0, [r7, #4]
 800ec04:	4608      	mov	r0, r1
 800ec06:	4611      	mov	r1, r2
 800ec08:	461a      	mov	r2, r3
 800ec0a:	4603      	mov	r3, r0
 800ec0c:	70fb      	strb	r3, [r7, #3]
 800ec0e:	460b      	mov	r3, r1
 800ec10:	70bb      	strb	r3, [r7, #2]
 800ec12:	4613      	mov	r3, r2
 800ec14:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800ec16:	7878      	ldrb	r0, [r7, #1]
 800ec18:	78ba      	ldrb	r2, [r7, #2]
 800ec1a:	78f9      	ldrb	r1, [r7, #3]
 800ec1c:	8b3b      	ldrh	r3, [r7, #24]
 800ec1e:	9302      	str	r3, [sp, #8]
 800ec20:	7d3b      	ldrb	r3, [r7, #20]
 800ec22:	9301      	str	r3, [sp, #4]
 800ec24:	7c3b      	ldrb	r3, [r7, #16]
 800ec26:	9300      	str	r3, [sp, #0]
 800ec28:	4603      	mov	r3, r0
 800ec2a:	6878      	ldr	r0, [r7, #4]
 800ec2c:	f000 fa07 	bl	800f03e <USBH_LL_OpenPipe>

  return USBH_OK;
 800ec30:	2300      	movs	r3, #0
}
 800ec32:	4618      	mov	r0, r3
 800ec34:	3708      	adds	r7, #8
 800ec36:	46bd      	mov	sp, r7
 800ec38:	bd80      	pop	{r7, pc}

0800ec3a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800ec3a:	b580      	push	{r7, lr}
 800ec3c:	b082      	sub	sp, #8
 800ec3e:	af00      	add	r7, sp, #0
 800ec40:	6078      	str	r0, [r7, #4]
 800ec42:	460b      	mov	r3, r1
 800ec44:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800ec46:	78fb      	ldrb	r3, [r7, #3]
 800ec48:	4619      	mov	r1, r3
 800ec4a:	6878      	ldr	r0, [r7, #4]
 800ec4c:	f000 fa26 	bl	800f09c <USBH_LL_ClosePipe>

  return USBH_OK;
 800ec50:	2300      	movs	r3, #0
}
 800ec52:	4618      	mov	r0, r3
 800ec54:	3708      	adds	r7, #8
 800ec56:	46bd      	mov	sp, r7
 800ec58:	bd80      	pop	{r7, pc}

0800ec5a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ec5a:	b580      	push	{r7, lr}
 800ec5c:	b084      	sub	sp, #16
 800ec5e:	af00      	add	r7, sp, #0
 800ec60:	6078      	str	r0, [r7, #4]
 800ec62:	460b      	mov	r3, r1
 800ec64:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ec66:	6878      	ldr	r0, [r7, #4]
 800ec68:	f000 f836 	bl	800ecd8 <USBH_GetFreePipe>
 800ec6c:	4603      	mov	r3, r0
 800ec6e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ec70:	89fb      	ldrh	r3, [r7, #14]
 800ec72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ec76:	4293      	cmp	r3, r2
 800ec78:	d00a      	beq.n	800ec90 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800ec7a:	78fa      	ldrb	r2, [r7, #3]
 800ec7c:	89fb      	ldrh	r3, [r7, #14]
 800ec7e:	f003 030f 	and.w	r3, r3, #15
 800ec82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ec86:	6879      	ldr	r1, [r7, #4]
 800ec88:	33e0      	adds	r3, #224	; 0xe0
 800ec8a:	009b      	lsls	r3, r3, #2
 800ec8c:	440b      	add	r3, r1
 800ec8e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800ec90:	89fb      	ldrh	r3, [r7, #14]
 800ec92:	b2db      	uxtb	r3, r3
}
 800ec94:	4618      	mov	r0, r3
 800ec96:	3710      	adds	r7, #16
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	bd80      	pop	{r7, pc}

0800ec9c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ec9c:	b480      	push	{r7}
 800ec9e:	b083      	sub	sp, #12
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	6078      	str	r0, [r7, #4]
 800eca4:	460b      	mov	r3, r1
 800eca6:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800eca8:	78fb      	ldrb	r3, [r7, #3]
 800ecaa:	2b0a      	cmp	r3, #10
 800ecac:	d80d      	bhi.n	800ecca <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800ecae:	78fb      	ldrb	r3, [r7, #3]
 800ecb0:	687a      	ldr	r2, [r7, #4]
 800ecb2:	33e0      	adds	r3, #224	; 0xe0
 800ecb4:	009b      	lsls	r3, r3, #2
 800ecb6:	4413      	add	r3, r2
 800ecb8:	685a      	ldr	r2, [r3, #4]
 800ecba:	78fb      	ldrb	r3, [r7, #3]
 800ecbc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ecc0:	6879      	ldr	r1, [r7, #4]
 800ecc2:	33e0      	adds	r3, #224	; 0xe0
 800ecc4:	009b      	lsls	r3, r3, #2
 800ecc6:	440b      	add	r3, r1
 800ecc8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800ecca:	2300      	movs	r3, #0
}
 800eccc:	4618      	mov	r0, r3
 800ecce:	370c      	adds	r7, #12
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd6:	4770      	bx	lr

0800ecd8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800ecd8:	b480      	push	{r7}
 800ecda:	b085      	sub	sp, #20
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800ece0:	2300      	movs	r3, #0
 800ece2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800ece4:	2300      	movs	r3, #0
 800ece6:	73fb      	strb	r3, [r7, #15]
 800ece8:	e00f      	b.n	800ed0a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ecea:	7bfb      	ldrb	r3, [r7, #15]
 800ecec:	687a      	ldr	r2, [r7, #4]
 800ecee:	33e0      	adds	r3, #224	; 0xe0
 800ecf0:	009b      	lsls	r3, r3, #2
 800ecf2:	4413      	add	r3, r2
 800ecf4:	685b      	ldr	r3, [r3, #4]
 800ecf6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d102      	bne.n	800ed04 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800ecfe:	7bfb      	ldrb	r3, [r7, #15]
 800ed00:	b29b      	uxth	r3, r3
 800ed02:	e007      	b.n	800ed14 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800ed04:	7bfb      	ldrb	r3, [r7, #15]
 800ed06:	3301      	adds	r3, #1
 800ed08:	73fb      	strb	r3, [r7, #15]
 800ed0a:	7bfb      	ldrb	r3, [r7, #15]
 800ed0c:	2b0a      	cmp	r3, #10
 800ed0e:	d9ec      	bls.n	800ecea <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ed10:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800ed14:	4618      	mov	r0, r3
 800ed16:	3714      	adds	r7, #20
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed1e:	4770      	bx	lr

0800ed20 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ed24:	2201      	movs	r2, #1
 800ed26:	490e      	ldr	r1, [pc, #56]	; (800ed60 <MX_USB_HOST_Init+0x40>)
 800ed28:	480e      	ldr	r0, [pc, #56]	; (800ed64 <MX_USB_HOST_Init+0x44>)
 800ed2a:	f7ff fb35 	bl	800e398 <USBH_Init>
 800ed2e:	4603      	mov	r3, r0
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d001      	beq.n	800ed38 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ed34:	f7f9 fe3a 	bl	80089ac <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800ed38:	490b      	ldr	r1, [pc, #44]	; (800ed68 <MX_USB_HOST_Init+0x48>)
 800ed3a:	480a      	ldr	r0, [pc, #40]	; (800ed64 <MX_USB_HOST_Init+0x44>)
 800ed3c:	f7ff fbba 	bl	800e4b4 <USBH_RegisterClass>
 800ed40:	4603      	mov	r3, r0
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d001      	beq.n	800ed4a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ed46:	f7f9 fe31 	bl	80089ac <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ed4a:	4806      	ldr	r0, [pc, #24]	; (800ed64 <MX_USB_HOST_Init+0x44>)
 800ed4c:	f7ff fc3e 	bl	800e5cc <USBH_Start>
 800ed50:	4603      	mov	r3, r0
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d001      	beq.n	800ed5a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ed56:	f7f9 fe29 	bl	80089ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ed5a:	bf00      	nop
 800ed5c:	bd80      	pop	{r7, pc}
 800ed5e:	bf00      	nop
 800ed60:	0800ed6d 	.word	0x0800ed6d
 800ed64:	20000204 	.word	0x20000204
 800ed68:	2000000c 	.word	0x2000000c

0800ed6c <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ed6c:	b480      	push	{r7}
 800ed6e:	b083      	sub	sp, #12
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
 800ed74:	460b      	mov	r3, r1
 800ed76:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800ed78:	78fb      	ldrb	r3, [r7, #3]
 800ed7a:	3b01      	subs	r3, #1
 800ed7c:	2b04      	cmp	r3, #4
 800ed7e:	d819      	bhi.n	800edb4 <USBH_UserProcess+0x48>
 800ed80:	a201      	add	r2, pc, #4	; (adr r2, 800ed88 <USBH_UserProcess+0x1c>)
 800ed82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed86:	bf00      	nop
 800ed88:	0800edb5 	.word	0x0800edb5
 800ed8c:	0800eda5 	.word	0x0800eda5
 800ed90:	0800edb5 	.word	0x0800edb5
 800ed94:	0800edad 	.word	0x0800edad
 800ed98:	0800ed9d 	.word	0x0800ed9d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800ed9c:	4b09      	ldr	r3, [pc, #36]	; (800edc4 <USBH_UserProcess+0x58>)
 800ed9e:	2203      	movs	r2, #3
 800eda0:	701a      	strb	r2, [r3, #0]
  break;
 800eda2:	e008      	b.n	800edb6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800eda4:	4b07      	ldr	r3, [pc, #28]	; (800edc4 <USBH_UserProcess+0x58>)
 800eda6:	2202      	movs	r2, #2
 800eda8:	701a      	strb	r2, [r3, #0]
  break;
 800edaa:	e004      	b.n	800edb6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800edac:	4b05      	ldr	r3, [pc, #20]	; (800edc4 <USBH_UserProcess+0x58>)
 800edae:	2201      	movs	r2, #1
 800edb0:	701a      	strb	r2, [r3, #0]
  break;
 800edb2:	e000      	b.n	800edb6 <USBH_UserProcess+0x4a>

  default:
  break;
 800edb4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800edb6:	bf00      	nop
 800edb8:	370c      	adds	r7, #12
 800edba:	46bd      	mov	sp, r7
 800edbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc0:	4770      	bx	lr
 800edc2:	bf00      	nop
 800edc4:	200000b4 	.word	0x200000b4

0800edc8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800edc8:	b580      	push	{r7, lr}
 800edca:	b08a      	sub	sp, #40	; 0x28
 800edcc:	af00      	add	r7, sp, #0
 800edce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800edd0:	f107 0314 	add.w	r3, r7, #20
 800edd4:	2200      	movs	r2, #0
 800edd6:	601a      	str	r2, [r3, #0]
 800edd8:	605a      	str	r2, [r3, #4]
 800edda:	609a      	str	r2, [r3, #8]
 800eddc:	60da      	str	r2, [r3, #12]
 800edde:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ede8:	d147      	bne.n	800ee7a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800edea:	2300      	movs	r3, #0
 800edec:	613b      	str	r3, [r7, #16]
 800edee:	4b25      	ldr	r3, [pc, #148]	; (800ee84 <HAL_HCD_MspInit+0xbc>)
 800edf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edf2:	4a24      	ldr	r2, [pc, #144]	; (800ee84 <HAL_HCD_MspInit+0xbc>)
 800edf4:	f043 0301 	orr.w	r3, r3, #1
 800edf8:	6313      	str	r3, [r2, #48]	; 0x30
 800edfa:	4b22      	ldr	r3, [pc, #136]	; (800ee84 <HAL_HCD_MspInit+0xbc>)
 800edfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edfe:	f003 0301 	and.w	r3, r3, #1
 800ee02:	613b      	str	r3, [r7, #16]
 800ee04:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800ee06:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ee0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee10:	2300      	movs	r3, #0
 800ee12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800ee14:	f107 0314 	add.w	r3, r7, #20
 800ee18:	4619      	mov	r1, r3
 800ee1a:	481b      	ldr	r0, [pc, #108]	; (800ee88 <HAL_HCD_MspInit+0xc0>)
 800ee1c:	f7fa f9c8 	bl	80091b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800ee20:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800ee24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ee26:	2302      	movs	r3, #2
 800ee28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ee2e:	2300      	movs	r3, #0
 800ee30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ee32:	230a      	movs	r3, #10
 800ee34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ee36:	f107 0314 	add.w	r3, r7, #20
 800ee3a:	4619      	mov	r1, r3
 800ee3c:	4812      	ldr	r0, [pc, #72]	; (800ee88 <HAL_HCD_MspInit+0xc0>)
 800ee3e:	f7fa f9b7 	bl	80091b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ee42:	4b10      	ldr	r3, [pc, #64]	; (800ee84 <HAL_HCD_MspInit+0xbc>)
 800ee44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee46:	4a0f      	ldr	r2, [pc, #60]	; (800ee84 <HAL_HCD_MspInit+0xbc>)
 800ee48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee4c:	6353      	str	r3, [r2, #52]	; 0x34
 800ee4e:	2300      	movs	r3, #0
 800ee50:	60fb      	str	r3, [r7, #12]
 800ee52:	4b0c      	ldr	r3, [pc, #48]	; (800ee84 <HAL_HCD_MspInit+0xbc>)
 800ee54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee56:	4a0b      	ldr	r2, [pc, #44]	; (800ee84 <HAL_HCD_MspInit+0xbc>)
 800ee58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ee5c:	6453      	str	r3, [r2, #68]	; 0x44
 800ee5e:	4b09      	ldr	r3, [pc, #36]	; (800ee84 <HAL_HCD_MspInit+0xbc>)
 800ee60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ee66:	60fb      	str	r3, [r7, #12]
 800ee68:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	2100      	movs	r1, #0
 800ee6e:	2043      	movs	r0, #67	; 0x43
 800ee70:	f7fa f94b 	bl	800910a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ee74:	2043      	movs	r0, #67	; 0x43
 800ee76:	f7fa f964 	bl	8009142 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ee7a:	bf00      	nop
 800ee7c:	3728      	adds	r7, #40	; 0x28
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	bd80      	pop	{r7, pc}
 800ee82:	bf00      	nop
 800ee84:	40023800 	.word	0x40023800
 800ee88:	40020000 	.word	0x40020000

0800ee8c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b082      	sub	sp, #8
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	f7ff fbb5 	bl	800e60a <USBH_LL_IncTimer>
}
 800eea0:	bf00      	nop
 800eea2:	3708      	adds	r7, #8
 800eea4:	46bd      	mov	sp, r7
 800eea6:	bd80      	pop	{r7, pc}

0800eea8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b082      	sub	sp, #8
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	f7ff fbed 	bl	800e696 <USBH_LL_Connect>
}
 800eebc:	bf00      	nop
 800eebe:	3708      	adds	r7, #8
 800eec0:	46bd      	mov	sp, r7
 800eec2:	bd80      	pop	{r7, pc}

0800eec4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b082      	sub	sp, #8
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eed2:	4618      	mov	r0, r3
 800eed4:	f7ff fbf6 	bl	800e6c4 <USBH_LL_Disconnect>
}
 800eed8:	bf00      	nop
 800eeda:	3708      	adds	r7, #8
 800eedc:	46bd      	mov	sp, r7
 800eede:	bd80      	pop	{r7, pc}

0800eee0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800eee0:	b480      	push	{r7}
 800eee2:	b083      	sub	sp, #12
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
 800eee8:	460b      	mov	r3, r1
 800eeea:	70fb      	strb	r3, [r7, #3]
 800eeec:	4613      	mov	r3, r2
 800eeee:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800eef0:	bf00      	nop
 800eef2:	370c      	adds	r7, #12
 800eef4:	46bd      	mov	sp, r7
 800eef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefa:	4770      	bx	lr

0800eefc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b082      	sub	sp, #8
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	f7ff fba7 	bl	800e65e <USBH_LL_PortEnabled>
}
 800ef10:	bf00      	nop
 800ef12:	3708      	adds	r7, #8
 800ef14:	46bd      	mov	sp, r7
 800ef16:	bd80      	pop	{r7, pc}

0800ef18 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b082      	sub	sp, #8
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ef26:	4618      	mov	r0, r3
 800ef28:	f7ff fba7 	bl	800e67a <USBH_LL_PortDisabled>
}
 800ef2c:	bf00      	nop
 800ef2e:	3708      	adds	r7, #8
 800ef30:	46bd      	mov	sp, r7
 800ef32:	bd80      	pop	{r7, pc}

0800ef34 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b082      	sub	sp, #8
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ef42:	2b01      	cmp	r3, #1
 800ef44:	d12a      	bne.n	800ef9c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800ef46:	4a18      	ldr	r2, [pc, #96]	; (800efa8 <USBH_LL_Init+0x74>)
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	4a15      	ldr	r2, [pc, #84]	; (800efa8 <USBH_LL_Init+0x74>)
 800ef52:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ef56:	4b14      	ldr	r3, [pc, #80]	; (800efa8 <USBH_LL_Init+0x74>)
 800ef58:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ef5c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800ef5e:	4b12      	ldr	r3, [pc, #72]	; (800efa8 <USBH_LL_Init+0x74>)
 800ef60:	2208      	movs	r2, #8
 800ef62:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800ef64:	4b10      	ldr	r3, [pc, #64]	; (800efa8 <USBH_LL_Init+0x74>)
 800ef66:	2201      	movs	r2, #1
 800ef68:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ef6a:	4b0f      	ldr	r3, [pc, #60]	; (800efa8 <USBH_LL_Init+0x74>)
 800ef6c:	2200      	movs	r2, #0
 800ef6e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800ef70:	4b0d      	ldr	r3, [pc, #52]	; (800efa8 <USBH_LL_Init+0x74>)
 800ef72:	2202      	movs	r2, #2
 800ef74:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ef76:	4b0c      	ldr	r3, [pc, #48]	; (800efa8 <USBH_LL_Init+0x74>)
 800ef78:	2200      	movs	r2, #0
 800ef7a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ef7c:	480a      	ldr	r0, [pc, #40]	; (800efa8 <USBH_LL_Init+0x74>)
 800ef7e:	f7fa fae5 	bl	800954c <HAL_HCD_Init>
 800ef82:	4603      	mov	r3, r0
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d001      	beq.n	800ef8c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800ef88:	f7f9 fd10 	bl	80089ac <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800ef8c:	4806      	ldr	r0, [pc, #24]	; (800efa8 <USBH_LL_Init+0x74>)
 800ef8e:	f7fa fedb 	bl	8009d48 <HAL_HCD_GetCurrentFrame>
 800ef92:	4603      	mov	r3, r0
 800ef94:	4619      	mov	r1, r3
 800ef96:	6878      	ldr	r0, [r7, #4]
 800ef98:	f7ff fb28 	bl	800e5ec <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ef9c:	2300      	movs	r3, #0
}
 800ef9e:	4618      	mov	r0, r3
 800efa0:	3708      	adds	r7, #8
 800efa2:	46bd      	mov	sp, r7
 800efa4:	bd80      	pop	{r7, pc}
 800efa6:	bf00      	nop
 800efa8:	200005dc 	.word	0x200005dc

0800efac <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800efac:	b580      	push	{r7, lr}
 800efae:	b084      	sub	sp, #16
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800efb4:	2300      	movs	r3, #0
 800efb6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800efb8:	2300      	movs	r3, #0
 800efba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800efc2:	4618      	mov	r0, r3
 800efc4:	f7fa fe56 	bl	8009c74 <HAL_HCD_Start>
 800efc8:	4603      	mov	r3, r0
 800efca:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800efcc:	7bfb      	ldrb	r3, [r7, #15]
 800efce:	4618      	mov	r0, r3
 800efd0:	f000 f912 	bl	800f1f8 <USBH_Get_USB_Status>
 800efd4:	4603      	mov	r3, r0
 800efd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800efd8:	7bbb      	ldrb	r3, [r7, #14]
}
 800efda:	4618      	mov	r0, r3
 800efdc:	3710      	adds	r7, #16
 800efde:	46bd      	mov	sp, r7
 800efe0:	bd80      	pop	{r7, pc}

0800efe2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800efe2:	b580      	push	{r7, lr}
 800efe4:	b084      	sub	sp, #16
 800efe6:	af00      	add	r7, sp, #0
 800efe8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800efea:	2300      	movs	r3, #0
 800efec:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800efee:	2300      	movs	r3, #0
 800eff0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800eff8:	4618      	mov	r0, r3
 800effa:	f7fa fe5e 	bl	8009cba <HAL_HCD_Stop>
 800effe:	4603      	mov	r3, r0
 800f000:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f002:	7bfb      	ldrb	r3, [r7, #15]
 800f004:	4618      	mov	r0, r3
 800f006:	f000 f8f7 	bl	800f1f8 <USBH_Get_USB_Status>
 800f00a:	4603      	mov	r3, r0
 800f00c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f00e:	7bbb      	ldrb	r3, [r7, #14]
}
 800f010:	4618      	mov	r0, r3
 800f012:	3710      	adds	r7, #16
 800f014:	46bd      	mov	sp, r7
 800f016:	bd80      	pop	{r7, pc}

0800f018 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f018:	b580      	push	{r7, lr}
 800f01a:	b082      	sub	sp, #8
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	6078      	str	r0, [r7, #4]
 800f020:	460b      	mov	r3, r1
 800f022:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f02a:	78fa      	ldrb	r2, [r7, #3]
 800f02c:	4611      	mov	r1, r2
 800f02e:	4618      	mov	r0, r3
 800f030:	f7fa fe75 	bl	8009d1e <HAL_HCD_HC_GetXferCount>
 800f034:	4603      	mov	r3, r0
}
 800f036:	4618      	mov	r0, r3
 800f038:	3708      	adds	r7, #8
 800f03a:	46bd      	mov	sp, r7
 800f03c:	bd80      	pop	{r7, pc}

0800f03e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f03e:	b590      	push	{r4, r7, lr}
 800f040:	b089      	sub	sp, #36	; 0x24
 800f042:	af04      	add	r7, sp, #16
 800f044:	6078      	str	r0, [r7, #4]
 800f046:	4608      	mov	r0, r1
 800f048:	4611      	mov	r1, r2
 800f04a:	461a      	mov	r2, r3
 800f04c:	4603      	mov	r3, r0
 800f04e:	70fb      	strb	r3, [r7, #3]
 800f050:	460b      	mov	r3, r1
 800f052:	70bb      	strb	r3, [r7, #2]
 800f054:	4613      	mov	r3, r2
 800f056:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f058:	2300      	movs	r3, #0
 800f05a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f05c:	2300      	movs	r3, #0
 800f05e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f066:	787c      	ldrb	r4, [r7, #1]
 800f068:	78ba      	ldrb	r2, [r7, #2]
 800f06a:	78f9      	ldrb	r1, [r7, #3]
 800f06c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f06e:	9302      	str	r3, [sp, #8]
 800f070:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f074:	9301      	str	r3, [sp, #4]
 800f076:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f07a:	9300      	str	r3, [sp, #0]
 800f07c:	4623      	mov	r3, r4
 800f07e:	f7fa fac7 	bl	8009610 <HAL_HCD_HC_Init>
 800f082:	4603      	mov	r3, r0
 800f084:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800f086:	7bfb      	ldrb	r3, [r7, #15]
 800f088:	4618      	mov	r0, r3
 800f08a:	f000 f8b5 	bl	800f1f8 <USBH_Get_USB_Status>
 800f08e:	4603      	mov	r3, r0
 800f090:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f092:	7bbb      	ldrb	r3, [r7, #14]
}
 800f094:	4618      	mov	r0, r3
 800f096:	3714      	adds	r7, #20
 800f098:	46bd      	mov	sp, r7
 800f09a:	bd90      	pop	{r4, r7, pc}

0800f09c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b084      	sub	sp, #16
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
 800f0a4:	460b      	mov	r3, r1
 800f0a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f0b6:	78fa      	ldrb	r2, [r7, #3]
 800f0b8:	4611      	mov	r1, r2
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	f7fa fb40 	bl	8009740 <HAL_HCD_HC_Halt>
 800f0c0:	4603      	mov	r3, r0
 800f0c2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f0c4:	7bfb      	ldrb	r3, [r7, #15]
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	f000 f896 	bl	800f1f8 <USBH_Get_USB_Status>
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f0d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	3710      	adds	r7, #16
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	bd80      	pop	{r7, pc}

0800f0da <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800f0da:	b590      	push	{r4, r7, lr}
 800f0dc:	b089      	sub	sp, #36	; 0x24
 800f0de:	af04      	add	r7, sp, #16
 800f0e0:	6078      	str	r0, [r7, #4]
 800f0e2:	4608      	mov	r0, r1
 800f0e4:	4611      	mov	r1, r2
 800f0e6:	461a      	mov	r2, r3
 800f0e8:	4603      	mov	r3, r0
 800f0ea:	70fb      	strb	r3, [r7, #3]
 800f0ec:	460b      	mov	r3, r1
 800f0ee:	70bb      	strb	r3, [r7, #2]
 800f0f0:	4613      	mov	r3, r2
 800f0f2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f102:	787c      	ldrb	r4, [r7, #1]
 800f104:	78ba      	ldrb	r2, [r7, #2]
 800f106:	78f9      	ldrb	r1, [r7, #3]
 800f108:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f10c:	9303      	str	r3, [sp, #12]
 800f10e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f110:	9302      	str	r3, [sp, #8]
 800f112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f114:	9301      	str	r3, [sp, #4]
 800f116:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f11a:	9300      	str	r3, [sp, #0]
 800f11c:	4623      	mov	r3, r4
 800f11e:	f7fa fb33 	bl	8009788 <HAL_HCD_HC_SubmitRequest>
 800f122:	4603      	mov	r3, r0
 800f124:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800f126:	7bfb      	ldrb	r3, [r7, #15]
 800f128:	4618      	mov	r0, r3
 800f12a:	f000 f865 	bl	800f1f8 <USBH_Get_USB_Status>
 800f12e:	4603      	mov	r3, r0
 800f130:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f132:	7bbb      	ldrb	r3, [r7, #14]
}
 800f134:	4618      	mov	r0, r3
 800f136:	3714      	adds	r7, #20
 800f138:	46bd      	mov	sp, r7
 800f13a:	bd90      	pop	{r4, r7, pc}

0800f13c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f13c:	b580      	push	{r7, lr}
 800f13e:	b082      	sub	sp, #8
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
 800f144:	460b      	mov	r3, r1
 800f146:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f14e:	78fa      	ldrb	r2, [r7, #3]
 800f150:	4611      	mov	r1, r2
 800f152:	4618      	mov	r0, r3
 800f154:	f7fa fdce 	bl	8009cf4 <HAL_HCD_HC_GetURBState>
 800f158:	4603      	mov	r3, r0
}
 800f15a:	4618      	mov	r0, r3
 800f15c:	3708      	adds	r7, #8
 800f15e:	46bd      	mov	sp, r7
 800f160:	bd80      	pop	{r7, pc}

0800f162 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800f162:	b580      	push	{r7, lr}
 800f164:	b082      	sub	sp, #8
 800f166:	af00      	add	r7, sp, #0
 800f168:	6078      	str	r0, [r7, #4]
 800f16a:	460b      	mov	r3, r1
 800f16c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800f174:	2b01      	cmp	r3, #1
 800f176:	d103      	bne.n	800f180 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800f178:	78fb      	ldrb	r3, [r7, #3]
 800f17a:	4618      	mov	r0, r3
 800f17c:	f000 f868 	bl	800f250 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800f180:	20c8      	movs	r0, #200	; 0xc8
 800f182:	f7f9 fec5 	bl	8008f10 <HAL_Delay>
  return USBH_OK;
 800f186:	2300      	movs	r3, #0
}
 800f188:	4618      	mov	r0, r3
 800f18a:	3708      	adds	r7, #8
 800f18c:	46bd      	mov	sp, r7
 800f18e:	bd80      	pop	{r7, pc}

0800f190 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800f190:	b480      	push	{r7}
 800f192:	b085      	sub	sp, #20
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
 800f198:	460b      	mov	r3, r1
 800f19a:	70fb      	strb	r3, [r7, #3]
 800f19c:	4613      	mov	r3, r2
 800f19e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f1a6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800f1a8:	78fa      	ldrb	r2, [r7, #3]
 800f1aa:	68f9      	ldr	r1, [r7, #12]
 800f1ac:	4613      	mov	r3, r2
 800f1ae:	009b      	lsls	r3, r3, #2
 800f1b0:	4413      	add	r3, r2
 800f1b2:	00db      	lsls	r3, r3, #3
 800f1b4:	440b      	add	r3, r1
 800f1b6:	333b      	adds	r3, #59	; 0x3b
 800f1b8:	781b      	ldrb	r3, [r3, #0]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d00a      	beq.n	800f1d4 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800f1be:	78fa      	ldrb	r2, [r7, #3]
 800f1c0:	68f9      	ldr	r1, [r7, #12]
 800f1c2:	4613      	mov	r3, r2
 800f1c4:	009b      	lsls	r3, r3, #2
 800f1c6:	4413      	add	r3, r2
 800f1c8:	00db      	lsls	r3, r3, #3
 800f1ca:	440b      	add	r3, r1
 800f1cc:	3350      	adds	r3, #80	; 0x50
 800f1ce:	78ba      	ldrb	r2, [r7, #2]
 800f1d0:	701a      	strb	r2, [r3, #0]
 800f1d2:	e009      	b.n	800f1e8 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800f1d4:	78fa      	ldrb	r2, [r7, #3]
 800f1d6:	68f9      	ldr	r1, [r7, #12]
 800f1d8:	4613      	mov	r3, r2
 800f1da:	009b      	lsls	r3, r3, #2
 800f1dc:	4413      	add	r3, r2
 800f1de:	00db      	lsls	r3, r3, #3
 800f1e0:	440b      	add	r3, r1
 800f1e2:	3351      	adds	r3, #81	; 0x51
 800f1e4:	78ba      	ldrb	r2, [r7, #2]
 800f1e6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800f1e8:	2300      	movs	r3, #0
}
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	3714      	adds	r7, #20
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f4:	4770      	bx	lr
	...

0800f1f8 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f1f8:	b480      	push	{r7}
 800f1fa:	b085      	sub	sp, #20
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	4603      	mov	r3, r0
 800f200:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f202:	2300      	movs	r3, #0
 800f204:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f206:	79fb      	ldrb	r3, [r7, #7]
 800f208:	2b03      	cmp	r3, #3
 800f20a:	d817      	bhi.n	800f23c <USBH_Get_USB_Status+0x44>
 800f20c:	a201      	add	r2, pc, #4	; (adr r2, 800f214 <USBH_Get_USB_Status+0x1c>)
 800f20e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f212:	bf00      	nop
 800f214:	0800f225 	.word	0x0800f225
 800f218:	0800f22b 	.word	0x0800f22b
 800f21c:	0800f231 	.word	0x0800f231
 800f220:	0800f237 	.word	0x0800f237
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800f224:	2300      	movs	r3, #0
 800f226:	73fb      	strb	r3, [r7, #15]
    break;
 800f228:	e00b      	b.n	800f242 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800f22a:	2302      	movs	r3, #2
 800f22c:	73fb      	strb	r3, [r7, #15]
    break;
 800f22e:	e008      	b.n	800f242 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800f230:	2301      	movs	r3, #1
 800f232:	73fb      	strb	r3, [r7, #15]
    break;
 800f234:	e005      	b.n	800f242 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800f236:	2302      	movs	r3, #2
 800f238:	73fb      	strb	r3, [r7, #15]
    break;
 800f23a:	e002      	b.n	800f242 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800f23c:	2302      	movs	r3, #2
 800f23e:	73fb      	strb	r3, [r7, #15]
    break;
 800f240:	bf00      	nop
  }
  return usb_status;
 800f242:	7bfb      	ldrb	r3, [r7, #15]
}
 800f244:	4618      	mov	r0, r3
 800f246:	3714      	adds	r7, #20
 800f248:	46bd      	mov	sp, r7
 800f24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f24e:	4770      	bx	lr

0800f250 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800f250:	b580      	push	{r7, lr}
 800f252:	b084      	sub	sp, #16
 800f254:	af00      	add	r7, sp, #0
 800f256:	4603      	mov	r3, r0
 800f258:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800f25a:	79fb      	ldrb	r3, [r7, #7]
 800f25c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800f25e:	79fb      	ldrb	r3, [r7, #7]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d102      	bne.n	800f26a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800f264:	2301      	movs	r3, #1
 800f266:	73fb      	strb	r3, [r7, #15]
 800f268:	e001      	b.n	800f26e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800f26a:	2300      	movs	r3, #0
 800f26c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800f26e:	7bfb      	ldrb	r3, [r7, #15]
 800f270:	461a      	mov	r2, r3
 800f272:	2101      	movs	r1, #1
 800f274:	4803      	ldr	r0, [pc, #12]	; (800f284 <MX_DriverVbusFS+0x34>)
 800f276:	f7fa f935 	bl	80094e4 <HAL_GPIO_WritePin>
}
 800f27a:	bf00      	nop
 800f27c:	3710      	adds	r7, #16
 800f27e:	46bd      	mov	sp, r7
 800f280:	bd80      	pop	{r7, pc}
 800f282:	bf00      	nop
 800f284:	40020800 	.word	0x40020800

0800f288 <__errno>:
 800f288:	4b01      	ldr	r3, [pc, #4]	; (800f290 <__errno+0x8>)
 800f28a:	6818      	ldr	r0, [r3, #0]
 800f28c:	4770      	bx	lr
 800f28e:	bf00      	nop
 800f290:	2000002c 	.word	0x2000002c

0800f294 <__libc_init_array>:
 800f294:	b570      	push	{r4, r5, r6, lr}
 800f296:	4e0d      	ldr	r6, [pc, #52]	; (800f2cc <__libc_init_array+0x38>)
 800f298:	4c0d      	ldr	r4, [pc, #52]	; (800f2d0 <__libc_init_array+0x3c>)
 800f29a:	1ba4      	subs	r4, r4, r6
 800f29c:	10a4      	asrs	r4, r4, #2
 800f29e:	2500      	movs	r5, #0
 800f2a0:	42a5      	cmp	r5, r4
 800f2a2:	d109      	bne.n	800f2b8 <__libc_init_array+0x24>
 800f2a4:	4e0b      	ldr	r6, [pc, #44]	; (800f2d4 <__libc_init_array+0x40>)
 800f2a6:	4c0c      	ldr	r4, [pc, #48]	; (800f2d8 <__libc_init_array+0x44>)
 800f2a8:	f000 f8ea 	bl	800f480 <_init>
 800f2ac:	1ba4      	subs	r4, r4, r6
 800f2ae:	10a4      	asrs	r4, r4, #2
 800f2b0:	2500      	movs	r5, #0
 800f2b2:	42a5      	cmp	r5, r4
 800f2b4:	d105      	bne.n	800f2c2 <__libc_init_array+0x2e>
 800f2b6:	bd70      	pop	{r4, r5, r6, pc}
 800f2b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f2bc:	4798      	blx	r3
 800f2be:	3501      	adds	r5, #1
 800f2c0:	e7ee      	b.n	800f2a0 <__libc_init_array+0xc>
 800f2c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f2c6:	4798      	blx	r3
 800f2c8:	3501      	adds	r5, #1
 800f2ca:	e7f2      	b.n	800f2b2 <__libc_init_array+0x1e>
 800f2cc:	0800f4bc 	.word	0x0800f4bc
 800f2d0:	0800f4bc 	.word	0x0800f4bc
 800f2d4:	0800f4bc 	.word	0x0800f4bc
 800f2d8:	0800f4c0 	.word	0x0800f4c0

0800f2dc <malloc>:
 800f2dc:	4b02      	ldr	r3, [pc, #8]	; (800f2e8 <malloc+0xc>)
 800f2de:	4601      	mov	r1, r0
 800f2e0:	6818      	ldr	r0, [r3, #0]
 800f2e2:	f000 b861 	b.w	800f3a8 <_malloc_r>
 800f2e6:	bf00      	nop
 800f2e8:	2000002c 	.word	0x2000002c

0800f2ec <free>:
 800f2ec:	4b02      	ldr	r3, [pc, #8]	; (800f2f8 <free+0xc>)
 800f2ee:	4601      	mov	r1, r0
 800f2f0:	6818      	ldr	r0, [r3, #0]
 800f2f2:	f000 b80b 	b.w	800f30c <_free_r>
 800f2f6:	bf00      	nop
 800f2f8:	2000002c 	.word	0x2000002c

0800f2fc <memset>:
 800f2fc:	4402      	add	r2, r0
 800f2fe:	4603      	mov	r3, r0
 800f300:	4293      	cmp	r3, r2
 800f302:	d100      	bne.n	800f306 <memset+0xa>
 800f304:	4770      	bx	lr
 800f306:	f803 1b01 	strb.w	r1, [r3], #1
 800f30a:	e7f9      	b.n	800f300 <memset+0x4>

0800f30c <_free_r>:
 800f30c:	b538      	push	{r3, r4, r5, lr}
 800f30e:	4605      	mov	r5, r0
 800f310:	2900      	cmp	r1, #0
 800f312:	d045      	beq.n	800f3a0 <_free_r+0x94>
 800f314:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f318:	1f0c      	subs	r4, r1, #4
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	bfb8      	it	lt
 800f31e:	18e4      	addlt	r4, r4, r3
 800f320:	f000 f8ac 	bl	800f47c <__malloc_lock>
 800f324:	4a1f      	ldr	r2, [pc, #124]	; (800f3a4 <_free_r+0x98>)
 800f326:	6813      	ldr	r3, [r2, #0]
 800f328:	4610      	mov	r0, r2
 800f32a:	b933      	cbnz	r3, 800f33a <_free_r+0x2e>
 800f32c:	6063      	str	r3, [r4, #4]
 800f32e:	6014      	str	r4, [r2, #0]
 800f330:	4628      	mov	r0, r5
 800f332:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f336:	f000 b8a2 	b.w	800f47e <__malloc_unlock>
 800f33a:	42a3      	cmp	r3, r4
 800f33c:	d90c      	bls.n	800f358 <_free_r+0x4c>
 800f33e:	6821      	ldr	r1, [r4, #0]
 800f340:	1862      	adds	r2, r4, r1
 800f342:	4293      	cmp	r3, r2
 800f344:	bf04      	itt	eq
 800f346:	681a      	ldreq	r2, [r3, #0]
 800f348:	685b      	ldreq	r3, [r3, #4]
 800f34a:	6063      	str	r3, [r4, #4]
 800f34c:	bf04      	itt	eq
 800f34e:	1852      	addeq	r2, r2, r1
 800f350:	6022      	streq	r2, [r4, #0]
 800f352:	6004      	str	r4, [r0, #0]
 800f354:	e7ec      	b.n	800f330 <_free_r+0x24>
 800f356:	4613      	mov	r3, r2
 800f358:	685a      	ldr	r2, [r3, #4]
 800f35a:	b10a      	cbz	r2, 800f360 <_free_r+0x54>
 800f35c:	42a2      	cmp	r2, r4
 800f35e:	d9fa      	bls.n	800f356 <_free_r+0x4a>
 800f360:	6819      	ldr	r1, [r3, #0]
 800f362:	1858      	adds	r0, r3, r1
 800f364:	42a0      	cmp	r0, r4
 800f366:	d10b      	bne.n	800f380 <_free_r+0x74>
 800f368:	6820      	ldr	r0, [r4, #0]
 800f36a:	4401      	add	r1, r0
 800f36c:	1858      	adds	r0, r3, r1
 800f36e:	4282      	cmp	r2, r0
 800f370:	6019      	str	r1, [r3, #0]
 800f372:	d1dd      	bne.n	800f330 <_free_r+0x24>
 800f374:	6810      	ldr	r0, [r2, #0]
 800f376:	6852      	ldr	r2, [r2, #4]
 800f378:	605a      	str	r2, [r3, #4]
 800f37a:	4401      	add	r1, r0
 800f37c:	6019      	str	r1, [r3, #0]
 800f37e:	e7d7      	b.n	800f330 <_free_r+0x24>
 800f380:	d902      	bls.n	800f388 <_free_r+0x7c>
 800f382:	230c      	movs	r3, #12
 800f384:	602b      	str	r3, [r5, #0]
 800f386:	e7d3      	b.n	800f330 <_free_r+0x24>
 800f388:	6820      	ldr	r0, [r4, #0]
 800f38a:	1821      	adds	r1, r4, r0
 800f38c:	428a      	cmp	r2, r1
 800f38e:	bf04      	itt	eq
 800f390:	6811      	ldreq	r1, [r2, #0]
 800f392:	6852      	ldreq	r2, [r2, #4]
 800f394:	6062      	str	r2, [r4, #4]
 800f396:	bf04      	itt	eq
 800f398:	1809      	addeq	r1, r1, r0
 800f39a:	6021      	streq	r1, [r4, #0]
 800f39c:	605c      	str	r4, [r3, #4]
 800f39e:	e7c7      	b.n	800f330 <_free_r+0x24>
 800f3a0:	bd38      	pop	{r3, r4, r5, pc}
 800f3a2:	bf00      	nop
 800f3a4:	200000b8 	.word	0x200000b8

0800f3a8 <_malloc_r>:
 800f3a8:	b570      	push	{r4, r5, r6, lr}
 800f3aa:	1ccd      	adds	r5, r1, #3
 800f3ac:	f025 0503 	bic.w	r5, r5, #3
 800f3b0:	3508      	adds	r5, #8
 800f3b2:	2d0c      	cmp	r5, #12
 800f3b4:	bf38      	it	cc
 800f3b6:	250c      	movcc	r5, #12
 800f3b8:	2d00      	cmp	r5, #0
 800f3ba:	4606      	mov	r6, r0
 800f3bc:	db01      	blt.n	800f3c2 <_malloc_r+0x1a>
 800f3be:	42a9      	cmp	r1, r5
 800f3c0:	d903      	bls.n	800f3ca <_malloc_r+0x22>
 800f3c2:	230c      	movs	r3, #12
 800f3c4:	6033      	str	r3, [r6, #0]
 800f3c6:	2000      	movs	r0, #0
 800f3c8:	bd70      	pop	{r4, r5, r6, pc}
 800f3ca:	f000 f857 	bl	800f47c <__malloc_lock>
 800f3ce:	4a21      	ldr	r2, [pc, #132]	; (800f454 <_malloc_r+0xac>)
 800f3d0:	6814      	ldr	r4, [r2, #0]
 800f3d2:	4621      	mov	r1, r4
 800f3d4:	b991      	cbnz	r1, 800f3fc <_malloc_r+0x54>
 800f3d6:	4c20      	ldr	r4, [pc, #128]	; (800f458 <_malloc_r+0xb0>)
 800f3d8:	6823      	ldr	r3, [r4, #0]
 800f3da:	b91b      	cbnz	r3, 800f3e4 <_malloc_r+0x3c>
 800f3dc:	4630      	mov	r0, r6
 800f3de:	f000 f83d 	bl	800f45c <_sbrk_r>
 800f3e2:	6020      	str	r0, [r4, #0]
 800f3e4:	4629      	mov	r1, r5
 800f3e6:	4630      	mov	r0, r6
 800f3e8:	f000 f838 	bl	800f45c <_sbrk_r>
 800f3ec:	1c43      	adds	r3, r0, #1
 800f3ee:	d124      	bne.n	800f43a <_malloc_r+0x92>
 800f3f0:	230c      	movs	r3, #12
 800f3f2:	6033      	str	r3, [r6, #0]
 800f3f4:	4630      	mov	r0, r6
 800f3f6:	f000 f842 	bl	800f47e <__malloc_unlock>
 800f3fa:	e7e4      	b.n	800f3c6 <_malloc_r+0x1e>
 800f3fc:	680b      	ldr	r3, [r1, #0]
 800f3fe:	1b5b      	subs	r3, r3, r5
 800f400:	d418      	bmi.n	800f434 <_malloc_r+0x8c>
 800f402:	2b0b      	cmp	r3, #11
 800f404:	d90f      	bls.n	800f426 <_malloc_r+0x7e>
 800f406:	600b      	str	r3, [r1, #0]
 800f408:	50cd      	str	r5, [r1, r3]
 800f40a:	18cc      	adds	r4, r1, r3
 800f40c:	4630      	mov	r0, r6
 800f40e:	f000 f836 	bl	800f47e <__malloc_unlock>
 800f412:	f104 000b 	add.w	r0, r4, #11
 800f416:	1d23      	adds	r3, r4, #4
 800f418:	f020 0007 	bic.w	r0, r0, #7
 800f41c:	1ac3      	subs	r3, r0, r3
 800f41e:	d0d3      	beq.n	800f3c8 <_malloc_r+0x20>
 800f420:	425a      	negs	r2, r3
 800f422:	50e2      	str	r2, [r4, r3]
 800f424:	e7d0      	b.n	800f3c8 <_malloc_r+0x20>
 800f426:	428c      	cmp	r4, r1
 800f428:	684b      	ldr	r3, [r1, #4]
 800f42a:	bf16      	itet	ne
 800f42c:	6063      	strne	r3, [r4, #4]
 800f42e:	6013      	streq	r3, [r2, #0]
 800f430:	460c      	movne	r4, r1
 800f432:	e7eb      	b.n	800f40c <_malloc_r+0x64>
 800f434:	460c      	mov	r4, r1
 800f436:	6849      	ldr	r1, [r1, #4]
 800f438:	e7cc      	b.n	800f3d4 <_malloc_r+0x2c>
 800f43a:	1cc4      	adds	r4, r0, #3
 800f43c:	f024 0403 	bic.w	r4, r4, #3
 800f440:	42a0      	cmp	r0, r4
 800f442:	d005      	beq.n	800f450 <_malloc_r+0xa8>
 800f444:	1a21      	subs	r1, r4, r0
 800f446:	4630      	mov	r0, r6
 800f448:	f000 f808 	bl	800f45c <_sbrk_r>
 800f44c:	3001      	adds	r0, #1
 800f44e:	d0cf      	beq.n	800f3f0 <_malloc_r+0x48>
 800f450:	6025      	str	r5, [r4, #0]
 800f452:	e7db      	b.n	800f40c <_malloc_r+0x64>
 800f454:	200000b8 	.word	0x200000b8
 800f458:	200000bc 	.word	0x200000bc

0800f45c <_sbrk_r>:
 800f45c:	b538      	push	{r3, r4, r5, lr}
 800f45e:	4c06      	ldr	r4, [pc, #24]	; (800f478 <_sbrk_r+0x1c>)
 800f460:	2300      	movs	r3, #0
 800f462:	4605      	mov	r5, r0
 800f464:	4608      	mov	r0, r1
 800f466:	6023      	str	r3, [r4, #0]
 800f468:	f7f9 fc6a 	bl	8008d40 <_sbrk>
 800f46c:	1c43      	adds	r3, r0, #1
 800f46e:	d102      	bne.n	800f476 <_sbrk_r+0x1a>
 800f470:	6823      	ldr	r3, [r4, #0]
 800f472:	b103      	cbz	r3, 800f476 <_sbrk_r+0x1a>
 800f474:	602b      	str	r3, [r5, #0]
 800f476:	bd38      	pop	{r3, r4, r5, pc}
 800f478:	200008a0 	.word	0x200008a0

0800f47c <__malloc_lock>:
 800f47c:	4770      	bx	lr

0800f47e <__malloc_unlock>:
 800f47e:	4770      	bx	lr

0800f480 <_init>:
 800f480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f482:	bf00      	nop
 800f484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f486:	bc08      	pop	{r3}
 800f488:	469e      	mov	lr, r3
 800f48a:	4770      	bx	lr

0800f48c <_fini>:
 800f48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f48e:	bf00      	nop
 800f490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f492:	bc08      	pop	{r3}
 800f494:	469e      	mov	lr, r3
 800f496:	4770      	bx	lr
