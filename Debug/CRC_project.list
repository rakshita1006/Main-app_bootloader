
CRC_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007504  08008188  08008188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  0800f68c  0800f68c  0000f68c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f6d0  0800f6d0  00010090  2**0
                  CONTENTS
  4 .ARM          00000008  0800f6d0  0800f6d0  0000f6d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f6d8  0800f6d8  00010090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f6d8  0800f6d8  0000f6d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f6dc  0800f6dc  0000f6dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800f6e0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000814  20000090  0800f770  00010090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008a4  0800f770  000108a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a42a  00000000  00000000  000100c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000396b  00000000  00000000  0002a4ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001358  00000000  00000000  0002de58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011d8  00000000  00000000  0002f1b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002418b  00000000  00000000  00030388  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012cc0  00000000  00000000  00054513  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cd494  00000000  00000000  000671d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00134667  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005204  00000000  00000000  001346e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008188 <__do_global_dtors_aux>:
 8008188:	b510      	push	{r4, lr}
 800818a:	4c05      	ldr	r4, [pc, #20]	; (80081a0 <__do_global_dtors_aux+0x18>)
 800818c:	7823      	ldrb	r3, [r4, #0]
 800818e:	b933      	cbnz	r3, 800819e <__do_global_dtors_aux+0x16>
 8008190:	4b04      	ldr	r3, [pc, #16]	; (80081a4 <__do_global_dtors_aux+0x1c>)
 8008192:	b113      	cbz	r3, 800819a <__do_global_dtors_aux+0x12>
 8008194:	4804      	ldr	r0, [pc, #16]	; (80081a8 <__do_global_dtors_aux+0x20>)
 8008196:	f3af 8000 	nop.w
 800819a:	2301      	movs	r3, #1
 800819c:	7023      	strb	r3, [r4, #0]
 800819e:	bd10      	pop	{r4, pc}
 80081a0:	20000090 	.word	0x20000090
 80081a4:	00000000 	.word	0x00000000
 80081a8:	0800f674 	.word	0x0800f674

080081ac <frame_dummy>:
 80081ac:	b508      	push	{r3, lr}
 80081ae:	4b03      	ldr	r3, [pc, #12]	; (80081bc <frame_dummy+0x10>)
 80081b0:	b11b      	cbz	r3, 80081ba <frame_dummy+0xe>
 80081b2:	4903      	ldr	r1, [pc, #12]	; (80081c0 <frame_dummy+0x14>)
 80081b4:	4803      	ldr	r0, [pc, #12]	; (80081c4 <frame_dummy+0x18>)
 80081b6:	f3af 8000 	nop.w
 80081ba:	bd08      	pop	{r3, pc}
 80081bc:	00000000 	.word	0x00000000
 80081c0:	20000094 	.word	0x20000094
 80081c4:	0800f674 	.word	0x0800f674

080081c8 <__aeabi_uldivmod>:
 80081c8:	b953      	cbnz	r3, 80081e0 <__aeabi_uldivmod+0x18>
 80081ca:	b94a      	cbnz	r2, 80081e0 <__aeabi_uldivmod+0x18>
 80081cc:	2900      	cmp	r1, #0
 80081ce:	bf08      	it	eq
 80081d0:	2800      	cmpeq	r0, #0
 80081d2:	bf1c      	itt	ne
 80081d4:	f04f 31ff 	movne.w	r1, #4294967295
 80081d8:	f04f 30ff 	movne.w	r0, #4294967295
 80081dc:	f000 b972 	b.w	80084c4 <__aeabi_idiv0>
 80081e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80081e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80081e8:	f000 f806 	bl	80081f8 <__udivmoddi4>
 80081ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80081f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081f4:	b004      	add	sp, #16
 80081f6:	4770      	bx	lr

080081f8 <__udivmoddi4>:
 80081f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081fc:	9e08      	ldr	r6, [sp, #32]
 80081fe:	4604      	mov	r4, r0
 8008200:	4688      	mov	r8, r1
 8008202:	2b00      	cmp	r3, #0
 8008204:	d14b      	bne.n	800829e <__udivmoddi4+0xa6>
 8008206:	428a      	cmp	r2, r1
 8008208:	4615      	mov	r5, r2
 800820a:	d967      	bls.n	80082dc <__udivmoddi4+0xe4>
 800820c:	fab2 f282 	clz	r2, r2
 8008210:	b14a      	cbz	r2, 8008226 <__udivmoddi4+0x2e>
 8008212:	f1c2 0720 	rsb	r7, r2, #32
 8008216:	fa01 f302 	lsl.w	r3, r1, r2
 800821a:	fa20 f707 	lsr.w	r7, r0, r7
 800821e:	4095      	lsls	r5, r2
 8008220:	ea47 0803 	orr.w	r8, r7, r3
 8008224:	4094      	lsls	r4, r2
 8008226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800822a:	0c23      	lsrs	r3, r4, #16
 800822c:	fbb8 f7fe 	udiv	r7, r8, lr
 8008230:	fa1f fc85 	uxth.w	ip, r5
 8008234:	fb0e 8817 	mls	r8, lr, r7, r8
 8008238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800823c:	fb07 f10c 	mul.w	r1, r7, ip
 8008240:	4299      	cmp	r1, r3
 8008242:	d909      	bls.n	8008258 <__udivmoddi4+0x60>
 8008244:	18eb      	adds	r3, r5, r3
 8008246:	f107 30ff 	add.w	r0, r7, #4294967295
 800824a:	f080 811b 	bcs.w	8008484 <__udivmoddi4+0x28c>
 800824e:	4299      	cmp	r1, r3
 8008250:	f240 8118 	bls.w	8008484 <__udivmoddi4+0x28c>
 8008254:	3f02      	subs	r7, #2
 8008256:	442b      	add	r3, r5
 8008258:	1a5b      	subs	r3, r3, r1
 800825a:	b2a4      	uxth	r4, r4
 800825c:	fbb3 f0fe 	udiv	r0, r3, lr
 8008260:	fb0e 3310 	mls	r3, lr, r0, r3
 8008264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008268:	fb00 fc0c 	mul.w	ip, r0, ip
 800826c:	45a4      	cmp	ip, r4
 800826e:	d909      	bls.n	8008284 <__udivmoddi4+0x8c>
 8008270:	192c      	adds	r4, r5, r4
 8008272:	f100 33ff 	add.w	r3, r0, #4294967295
 8008276:	f080 8107 	bcs.w	8008488 <__udivmoddi4+0x290>
 800827a:	45a4      	cmp	ip, r4
 800827c:	f240 8104 	bls.w	8008488 <__udivmoddi4+0x290>
 8008280:	3802      	subs	r0, #2
 8008282:	442c      	add	r4, r5
 8008284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008288:	eba4 040c 	sub.w	r4, r4, ip
 800828c:	2700      	movs	r7, #0
 800828e:	b11e      	cbz	r6, 8008298 <__udivmoddi4+0xa0>
 8008290:	40d4      	lsrs	r4, r2
 8008292:	2300      	movs	r3, #0
 8008294:	e9c6 4300 	strd	r4, r3, [r6]
 8008298:	4639      	mov	r1, r7
 800829a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800829e:	428b      	cmp	r3, r1
 80082a0:	d909      	bls.n	80082b6 <__udivmoddi4+0xbe>
 80082a2:	2e00      	cmp	r6, #0
 80082a4:	f000 80eb 	beq.w	800847e <__udivmoddi4+0x286>
 80082a8:	2700      	movs	r7, #0
 80082aa:	e9c6 0100 	strd	r0, r1, [r6]
 80082ae:	4638      	mov	r0, r7
 80082b0:	4639      	mov	r1, r7
 80082b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082b6:	fab3 f783 	clz	r7, r3
 80082ba:	2f00      	cmp	r7, #0
 80082bc:	d147      	bne.n	800834e <__udivmoddi4+0x156>
 80082be:	428b      	cmp	r3, r1
 80082c0:	d302      	bcc.n	80082c8 <__udivmoddi4+0xd0>
 80082c2:	4282      	cmp	r2, r0
 80082c4:	f200 80fa 	bhi.w	80084bc <__udivmoddi4+0x2c4>
 80082c8:	1a84      	subs	r4, r0, r2
 80082ca:	eb61 0303 	sbc.w	r3, r1, r3
 80082ce:	2001      	movs	r0, #1
 80082d0:	4698      	mov	r8, r3
 80082d2:	2e00      	cmp	r6, #0
 80082d4:	d0e0      	beq.n	8008298 <__udivmoddi4+0xa0>
 80082d6:	e9c6 4800 	strd	r4, r8, [r6]
 80082da:	e7dd      	b.n	8008298 <__udivmoddi4+0xa0>
 80082dc:	b902      	cbnz	r2, 80082e0 <__udivmoddi4+0xe8>
 80082de:	deff      	udf	#255	; 0xff
 80082e0:	fab2 f282 	clz	r2, r2
 80082e4:	2a00      	cmp	r2, #0
 80082e6:	f040 808f 	bne.w	8008408 <__udivmoddi4+0x210>
 80082ea:	1b49      	subs	r1, r1, r5
 80082ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80082f0:	fa1f f885 	uxth.w	r8, r5
 80082f4:	2701      	movs	r7, #1
 80082f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80082fa:	0c23      	lsrs	r3, r4, #16
 80082fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8008300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008304:	fb08 f10c 	mul.w	r1, r8, ip
 8008308:	4299      	cmp	r1, r3
 800830a:	d907      	bls.n	800831c <__udivmoddi4+0x124>
 800830c:	18eb      	adds	r3, r5, r3
 800830e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8008312:	d202      	bcs.n	800831a <__udivmoddi4+0x122>
 8008314:	4299      	cmp	r1, r3
 8008316:	f200 80cd 	bhi.w	80084b4 <__udivmoddi4+0x2bc>
 800831a:	4684      	mov	ip, r0
 800831c:	1a59      	subs	r1, r3, r1
 800831e:	b2a3      	uxth	r3, r4
 8008320:	fbb1 f0fe 	udiv	r0, r1, lr
 8008324:	fb0e 1410 	mls	r4, lr, r0, r1
 8008328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800832c:	fb08 f800 	mul.w	r8, r8, r0
 8008330:	45a0      	cmp	r8, r4
 8008332:	d907      	bls.n	8008344 <__udivmoddi4+0x14c>
 8008334:	192c      	adds	r4, r5, r4
 8008336:	f100 33ff 	add.w	r3, r0, #4294967295
 800833a:	d202      	bcs.n	8008342 <__udivmoddi4+0x14a>
 800833c:	45a0      	cmp	r8, r4
 800833e:	f200 80b6 	bhi.w	80084ae <__udivmoddi4+0x2b6>
 8008342:	4618      	mov	r0, r3
 8008344:	eba4 0408 	sub.w	r4, r4, r8
 8008348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800834c:	e79f      	b.n	800828e <__udivmoddi4+0x96>
 800834e:	f1c7 0c20 	rsb	ip, r7, #32
 8008352:	40bb      	lsls	r3, r7
 8008354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008358:	ea4e 0e03 	orr.w	lr, lr, r3
 800835c:	fa01 f407 	lsl.w	r4, r1, r7
 8008360:	fa20 f50c 	lsr.w	r5, r0, ip
 8008364:	fa21 f30c 	lsr.w	r3, r1, ip
 8008368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800836c:	4325      	orrs	r5, r4
 800836e:	fbb3 f9f8 	udiv	r9, r3, r8
 8008372:	0c2c      	lsrs	r4, r5, #16
 8008374:	fb08 3319 	mls	r3, r8, r9, r3
 8008378:	fa1f fa8e 	uxth.w	sl, lr
 800837c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008380:	fb09 f40a 	mul.w	r4, r9, sl
 8008384:	429c      	cmp	r4, r3
 8008386:	fa02 f207 	lsl.w	r2, r2, r7
 800838a:	fa00 f107 	lsl.w	r1, r0, r7
 800838e:	d90b      	bls.n	80083a8 <__udivmoddi4+0x1b0>
 8008390:	eb1e 0303 	adds.w	r3, lr, r3
 8008394:	f109 30ff 	add.w	r0, r9, #4294967295
 8008398:	f080 8087 	bcs.w	80084aa <__udivmoddi4+0x2b2>
 800839c:	429c      	cmp	r4, r3
 800839e:	f240 8084 	bls.w	80084aa <__udivmoddi4+0x2b2>
 80083a2:	f1a9 0902 	sub.w	r9, r9, #2
 80083a6:	4473      	add	r3, lr
 80083a8:	1b1b      	subs	r3, r3, r4
 80083aa:	b2ad      	uxth	r5, r5
 80083ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80083b0:	fb08 3310 	mls	r3, r8, r0, r3
 80083b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80083b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80083bc:	45a2      	cmp	sl, r4
 80083be:	d908      	bls.n	80083d2 <__udivmoddi4+0x1da>
 80083c0:	eb1e 0404 	adds.w	r4, lr, r4
 80083c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80083c8:	d26b      	bcs.n	80084a2 <__udivmoddi4+0x2aa>
 80083ca:	45a2      	cmp	sl, r4
 80083cc:	d969      	bls.n	80084a2 <__udivmoddi4+0x2aa>
 80083ce:	3802      	subs	r0, #2
 80083d0:	4474      	add	r4, lr
 80083d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80083d6:	fba0 8902 	umull	r8, r9, r0, r2
 80083da:	eba4 040a 	sub.w	r4, r4, sl
 80083de:	454c      	cmp	r4, r9
 80083e0:	46c2      	mov	sl, r8
 80083e2:	464b      	mov	r3, r9
 80083e4:	d354      	bcc.n	8008490 <__udivmoddi4+0x298>
 80083e6:	d051      	beq.n	800848c <__udivmoddi4+0x294>
 80083e8:	2e00      	cmp	r6, #0
 80083ea:	d069      	beq.n	80084c0 <__udivmoddi4+0x2c8>
 80083ec:	ebb1 050a 	subs.w	r5, r1, sl
 80083f0:	eb64 0403 	sbc.w	r4, r4, r3
 80083f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80083f8:	40fd      	lsrs	r5, r7
 80083fa:	40fc      	lsrs	r4, r7
 80083fc:	ea4c 0505 	orr.w	r5, ip, r5
 8008400:	e9c6 5400 	strd	r5, r4, [r6]
 8008404:	2700      	movs	r7, #0
 8008406:	e747      	b.n	8008298 <__udivmoddi4+0xa0>
 8008408:	f1c2 0320 	rsb	r3, r2, #32
 800840c:	fa20 f703 	lsr.w	r7, r0, r3
 8008410:	4095      	lsls	r5, r2
 8008412:	fa01 f002 	lsl.w	r0, r1, r2
 8008416:	fa21 f303 	lsr.w	r3, r1, r3
 800841a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800841e:	4338      	orrs	r0, r7
 8008420:	0c01      	lsrs	r1, r0, #16
 8008422:	fbb3 f7fe 	udiv	r7, r3, lr
 8008426:	fa1f f885 	uxth.w	r8, r5
 800842a:	fb0e 3317 	mls	r3, lr, r7, r3
 800842e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008432:	fb07 f308 	mul.w	r3, r7, r8
 8008436:	428b      	cmp	r3, r1
 8008438:	fa04 f402 	lsl.w	r4, r4, r2
 800843c:	d907      	bls.n	800844e <__udivmoddi4+0x256>
 800843e:	1869      	adds	r1, r5, r1
 8008440:	f107 3cff 	add.w	ip, r7, #4294967295
 8008444:	d22f      	bcs.n	80084a6 <__udivmoddi4+0x2ae>
 8008446:	428b      	cmp	r3, r1
 8008448:	d92d      	bls.n	80084a6 <__udivmoddi4+0x2ae>
 800844a:	3f02      	subs	r7, #2
 800844c:	4429      	add	r1, r5
 800844e:	1acb      	subs	r3, r1, r3
 8008450:	b281      	uxth	r1, r0
 8008452:	fbb3 f0fe 	udiv	r0, r3, lr
 8008456:	fb0e 3310 	mls	r3, lr, r0, r3
 800845a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800845e:	fb00 f308 	mul.w	r3, r0, r8
 8008462:	428b      	cmp	r3, r1
 8008464:	d907      	bls.n	8008476 <__udivmoddi4+0x27e>
 8008466:	1869      	adds	r1, r5, r1
 8008468:	f100 3cff 	add.w	ip, r0, #4294967295
 800846c:	d217      	bcs.n	800849e <__udivmoddi4+0x2a6>
 800846e:	428b      	cmp	r3, r1
 8008470:	d915      	bls.n	800849e <__udivmoddi4+0x2a6>
 8008472:	3802      	subs	r0, #2
 8008474:	4429      	add	r1, r5
 8008476:	1ac9      	subs	r1, r1, r3
 8008478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800847c:	e73b      	b.n	80082f6 <__udivmoddi4+0xfe>
 800847e:	4637      	mov	r7, r6
 8008480:	4630      	mov	r0, r6
 8008482:	e709      	b.n	8008298 <__udivmoddi4+0xa0>
 8008484:	4607      	mov	r7, r0
 8008486:	e6e7      	b.n	8008258 <__udivmoddi4+0x60>
 8008488:	4618      	mov	r0, r3
 800848a:	e6fb      	b.n	8008284 <__udivmoddi4+0x8c>
 800848c:	4541      	cmp	r1, r8
 800848e:	d2ab      	bcs.n	80083e8 <__udivmoddi4+0x1f0>
 8008490:	ebb8 0a02 	subs.w	sl, r8, r2
 8008494:	eb69 020e 	sbc.w	r2, r9, lr
 8008498:	3801      	subs	r0, #1
 800849a:	4613      	mov	r3, r2
 800849c:	e7a4      	b.n	80083e8 <__udivmoddi4+0x1f0>
 800849e:	4660      	mov	r0, ip
 80084a0:	e7e9      	b.n	8008476 <__udivmoddi4+0x27e>
 80084a2:	4618      	mov	r0, r3
 80084a4:	e795      	b.n	80083d2 <__udivmoddi4+0x1da>
 80084a6:	4667      	mov	r7, ip
 80084a8:	e7d1      	b.n	800844e <__udivmoddi4+0x256>
 80084aa:	4681      	mov	r9, r0
 80084ac:	e77c      	b.n	80083a8 <__udivmoddi4+0x1b0>
 80084ae:	3802      	subs	r0, #2
 80084b0:	442c      	add	r4, r5
 80084b2:	e747      	b.n	8008344 <__udivmoddi4+0x14c>
 80084b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80084b8:	442b      	add	r3, r5
 80084ba:	e72f      	b.n	800831c <__udivmoddi4+0x124>
 80084bc:	4638      	mov	r0, r7
 80084be:	e708      	b.n	80082d2 <__udivmoddi4+0xda>
 80084c0:	4637      	mov	r7, r6
 80084c2:	e6e9      	b.n	8008298 <__udivmoddi4+0xa0>

080084c4 <__aeabi_idiv0>:
 80084c4:	4770      	bx	lr
 80084c6:	bf00      	nop

080084c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80084cc:	f000 fcc6 	bl	8008e5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80084d0:	f000 f832 	bl	8008538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80084d4:	f000 f984 	bl	80087e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80084d8:	f000 f8c4 	bl	8008664 <MX_I2C1_Init>
  MX_I2S3_Init();
 80084dc:	f000 f8f0 	bl	80086c0 <MX_I2S3_Init>
  MX_SPI1_Init();
 80084e0:	f000 f91e 	bl	8008720 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80084e4:	f006 fd16 	bl	800ef14 <MX_USB_HOST_Init>
  MX_CRC_Init();
 80084e8:	f000 f8a8 	bl	800863c <MX_CRC_Init>
  MX_USART2_UART_Init();
 80084ec:	f000 f94e 	bl	800878c <MX_USART2_UART_Init>

  /* USER CODE END 2 */
  // Value = HAL_CRC_Calculate(&hcrc,array,sizeof(array));//0x2059acae
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Transmit(&huart2,"Entering Main app", 20, 1000);
 80084f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80084f4:	2214      	movs	r2, #20
 80084f6:	490c      	ldr	r1, [pc, #48]	; (8008528 <main+0x60>)
 80084f8:	480c      	ldr	r0, [pc, #48]	; (800852c <main+0x64>)
 80084fa:	f004 f93e 	bl	800c77a <HAL_UART_Transmit>
  HAL_Delay(3000);
 80084fe:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8008502:	f000 fd1d 	bl	8008f40 <HAL_Delay>
  while (1)
  {

	  HAL_UART_Transmit(&huart2,"Main app Inprogress", 20, 1000);
 8008506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800850a:	2214      	movs	r2, #20
 800850c:	4908      	ldr	r1, [pc, #32]	; (8008530 <main+0x68>)
 800850e:	4807      	ldr	r0, [pc, #28]	; (800852c <main+0x64>)
 8008510:	f004 f933 	bl	800c77a <HAL_UART_Transmit>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8008514:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008518:	4806      	ldr	r0, [pc, #24]	; (8008534 <main+0x6c>)
 800851a:	f001 f814 	bl	8009546 <HAL_GPIO_TogglePin>
	  HAL_Delay(3000);
 800851e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8008522:	f000 fd0d 	bl	8008f40 <HAL_Delay>
	  HAL_UART_Transmit(&huart2,"Main app Inprogress", 20, 1000);
 8008526:	e7ee      	b.n	8008506 <main+0x3e>
 8008528:	0800f68c 	.word	0x0800f68c
 800852c:	20000178 	.word	0x20000178
 8008530:	0800f6a0 	.word	0x0800f6a0
 8008534:	40020c00 	.word	0x40020c00

08008538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b098      	sub	sp, #96	; 0x60
 800853c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800853e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008542:	2230      	movs	r2, #48	; 0x30
 8008544:	2100      	movs	r1, #0
 8008546:	4618      	mov	r0, r3
 8008548:	f006 ffd2 	bl	800f4f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800854c:	f107 031c 	add.w	r3, r7, #28
 8008550:	2200      	movs	r2, #0
 8008552:	601a      	str	r2, [r3, #0]
 8008554:	605a      	str	r2, [r3, #4]
 8008556:	609a      	str	r2, [r3, #8]
 8008558:	60da      	str	r2, [r3, #12]
 800855a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800855c:	f107 030c 	add.w	r3, r7, #12
 8008560:	2200      	movs	r2, #0
 8008562:	601a      	str	r2, [r3, #0]
 8008564:	605a      	str	r2, [r3, #4]
 8008566:	609a      	str	r2, [r3, #8]
 8008568:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800856a:	2300      	movs	r3, #0
 800856c:	60bb      	str	r3, [r7, #8]
 800856e:	4b31      	ldr	r3, [pc, #196]	; (8008634 <SystemClock_Config+0xfc>)
 8008570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008572:	4a30      	ldr	r2, [pc, #192]	; (8008634 <SystemClock_Config+0xfc>)
 8008574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008578:	6413      	str	r3, [r2, #64]	; 0x40
 800857a:	4b2e      	ldr	r3, [pc, #184]	; (8008634 <SystemClock_Config+0xfc>)
 800857c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800857e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008582:	60bb      	str	r3, [r7, #8]
 8008584:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008586:	2300      	movs	r3, #0
 8008588:	607b      	str	r3, [r7, #4]
 800858a:	4b2b      	ldr	r3, [pc, #172]	; (8008638 <SystemClock_Config+0x100>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a2a      	ldr	r2, [pc, #168]	; (8008638 <SystemClock_Config+0x100>)
 8008590:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008594:	6013      	str	r3, [r2, #0]
 8008596:	4b28      	ldr	r3, [pc, #160]	; (8008638 <SystemClock_Config+0x100>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800859e:	607b      	str	r3, [r7, #4]
 80085a0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80085a2:	2301      	movs	r3, #1
 80085a4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80085a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80085aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80085ac:	2302      	movs	r3, #2
 80085ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80085b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80085b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80085b6:	2308      	movs	r3, #8
 80085b8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80085ba:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80085be:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80085c0:	2302      	movs	r3, #2
 80085c2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80085c4:	2307      	movs	r3, #7
 80085c6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80085c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80085cc:	4618      	mov	r0, r3
 80085ce:	f003 fa83 	bl	800bad8 <HAL_RCC_OscConfig>
 80085d2:	4603      	mov	r3, r0
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d001      	beq.n	80085dc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80085d8:	f000 fa00 	bl	80089dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80085dc:	230f      	movs	r3, #15
 80085de:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80085e0:	2302      	movs	r3, #2
 80085e2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80085e4:	2300      	movs	r3, #0
 80085e6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80085e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80085ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80085ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80085f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80085f4:	f107 031c 	add.w	r3, r7, #28
 80085f8:	2105      	movs	r1, #5
 80085fa:	4618      	mov	r0, r3
 80085fc:	f003 fcdc 	bl	800bfb8 <HAL_RCC_ClockConfig>
 8008600:	4603      	mov	r3, r0
 8008602:	2b00      	cmp	r3, #0
 8008604:	d001      	beq.n	800860a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8008606:	f000 f9e9 	bl	80089dc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800860a:	2301      	movs	r3, #1
 800860c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800860e:	23c0      	movs	r3, #192	; 0xc0
 8008610:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8008612:	2302      	movs	r3, #2
 8008614:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008616:	f107 030c 	add.w	r3, r7, #12
 800861a:	4618      	mov	r0, r3
 800861c:	f003 febe 	bl	800c39c <HAL_RCCEx_PeriphCLKConfig>
 8008620:	4603      	mov	r3, r0
 8008622:	2b00      	cmp	r3, #0
 8008624:	d001      	beq.n	800862a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8008626:	f000 f9d9 	bl	80089dc <Error_Handler>
  }
}
 800862a:	bf00      	nop
 800862c:	3760      	adds	r7, #96	; 0x60
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop
 8008634:	40023800 	.word	0x40023800
 8008638:	40007000 	.word	0x40007000

0800863c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8008640:	4b06      	ldr	r3, [pc, #24]	; (800865c <MX_CRC_Init+0x20>)
 8008642:	4a07      	ldr	r2, [pc, #28]	; (8008660 <MX_CRC_Init+0x24>)
 8008644:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8008646:	4805      	ldr	r0, [pc, #20]	; (800865c <MX_CRC_Init+0x20>)
 8008648:	f000 fdad 	bl	80091a6 <HAL_CRC_Init>
 800864c:	4603      	mov	r3, r0
 800864e:	2b00      	cmp	r3, #0
 8008650:	d001      	beq.n	8008656 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8008652:	f000 f9c3 	bl	80089dc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8008656:	bf00      	nop
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop
 800865c:	20000118 	.word	0x20000118
 8008660:	40023000 	.word	0x40023000

08008664 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008668:	4b12      	ldr	r3, [pc, #72]	; (80086b4 <MX_I2C1_Init+0x50>)
 800866a:	4a13      	ldr	r2, [pc, #76]	; (80086b8 <MX_I2C1_Init+0x54>)
 800866c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800866e:	4b11      	ldr	r3, [pc, #68]	; (80086b4 <MX_I2C1_Init+0x50>)
 8008670:	4a12      	ldr	r2, [pc, #72]	; (80086bc <MX_I2C1_Init+0x58>)
 8008672:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008674:	4b0f      	ldr	r3, [pc, #60]	; (80086b4 <MX_I2C1_Init+0x50>)
 8008676:	2200      	movs	r2, #0
 8008678:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800867a:	4b0e      	ldr	r3, [pc, #56]	; (80086b4 <MX_I2C1_Init+0x50>)
 800867c:	2200      	movs	r2, #0
 800867e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008680:	4b0c      	ldr	r3, [pc, #48]	; (80086b4 <MX_I2C1_Init+0x50>)
 8008682:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008686:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008688:	4b0a      	ldr	r3, [pc, #40]	; (80086b4 <MX_I2C1_Init+0x50>)
 800868a:	2200      	movs	r2, #0
 800868c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800868e:	4b09      	ldr	r3, [pc, #36]	; (80086b4 <MX_I2C1_Init+0x50>)
 8008690:	2200      	movs	r2, #0
 8008692:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008694:	4b07      	ldr	r3, [pc, #28]	; (80086b4 <MX_I2C1_Init+0x50>)
 8008696:	2200      	movs	r2, #0
 8008698:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800869a:	4b06      	ldr	r3, [pc, #24]	; (80086b4 <MX_I2C1_Init+0x50>)
 800869c:	2200      	movs	r2, #0
 800869e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80086a0:	4804      	ldr	r0, [pc, #16]	; (80086b4 <MX_I2C1_Init+0x50>)
 80086a2:	f002 fc41 	bl	800af28 <HAL_I2C_Init>
 80086a6:	4603      	mov	r3, r0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d001      	beq.n	80086b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80086ac:	f000 f996 	bl	80089dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80086b0:	bf00      	nop
 80086b2:	bd80      	pop	{r7, pc}
 80086b4:	200000c4 	.word	0x200000c4
 80086b8:	40005400 	.word	0x40005400
 80086bc:	000186a0 	.word	0x000186a0

080086c0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80086c4:	4b13      	ldr	r3, [pc, #76]	; (8008714 <MX_I2S3_Init+0x54>)
 80086c6:	4a14      	ldr	r2, [pc, #80]	; (8008718 <MX_I2S3_Init+0x58>)
 80086c8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80086ca:	4b12      	ldr	r3, [pc, #72]	; (8008714 <MX_I2S3_Init+0x54>)
 80086cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086d0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80086d2:	4b10      	ldr	r3, [pc, #64]	; (8008714 <MX_I2S3_Init+0x54>)
 80086d4:	2200      	movs	r2, #0
 80086d6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80086d8:	4b0e      	ldr	r3, [pc, #56]	; (8008714 <MX_I2S3_Init+0x54>)
 80086da:	2200      	movs	r2, #0
 80086dc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80086de:	4b0d      	ldr	r3, [pc, #52]	; (8008714 <MX_I2S3_Init+0x54>)
 80086e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086e4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80086e6:	4b0b      	ldr	r3, [pc, #44]	; (8008714 <MX_I2S3_Init+0x54>)
 80086e8:	4a0c      	ldr	r2, [pc, #48]	; (800871c <MX_I2S3_Init+0x5c>)
 80086ea:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80086ec:	4b09      	ldr	r3, [pc, #36]	; (8008714 <MX_I2S3_Init+0x54>)
 80086ee:	2200      	movs	r2, #0
 80086f0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80086f2:	4b08      	ldr	r3, [pc, #32]	; (8008714 <MX_I2S3_Init+0x54>)
 80086f4:	2200      	movs	r2, #0
 80086f6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80086f8:	4b06      	ldr	r3, [pc, #24]	; (8008714 <MX_I2S3_Init+0x54>)
 80086fa:	2200      	movs	r2, #0
 80086fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80086fe:	4805      	ldr	r0, [pc, #20]	; (8008714 <MX_I2S3_Init+0x54>)
 8008700:	f002 fd4a 	bl	800b198 <HAL_I2S_Init>
 8008704:	4603      	mov	r3, r0
 8008706:	2b00      	cmp	r3, #0
 8008708:	d001      	beq.n	800870e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800870a:	f000 f967 	bl	80089dc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800870e:	bf00      	nop
 8008710:	bd80      	pop	{r7, pc}
 8008712:	bf00      	nop
 8008714:	200001b8 	.word	0x200001b8
 8008718:	40003c00 	.word	0x40003c00
 800871c:	00017700 	.word	0x00017700

08008720 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8008724:	4b17      	ldr	r3, [pc, #92]	; (8008784 <MX_SPI1_Init+0x64>)
 8008726:	4a18      	ldr	r2, [pc, #96]	; (8008788 <MX_SPI1_Init+0x68>)
 8008728:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800872a:	4b16      	ldr	r3, [pc, #88]	; (8008784 <MX_SPI1_Init+0x64>)
 800872c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008730:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8008732:	4b14      	ldr	r3, [pc, #80]	; (8008784 <MX_SPI1_Init+0x64>)
 8008734:	2200      	movs	r2, #0
 8008736:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008738:	4b12      	ldr	r3, [pc, #72]	; (8008784 <MX_SPI1_Init+0x64>)
 800873a:	2200      	movs	r2, #0
 800873c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800873e:	4b11      	ldr	r3, [pc, #68]	; (8008784 <MX_SPI1_Init+0x64>)
 8008740:	2200      	movs	r2, #0
 8008742:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008744:	4b0f      	ldr	r3, [pc, #60]	; (8008784 <MX_SPI1_Init+0x64>)
 8008746:	2200      	movs	r2, #0
 8008748:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800874a:	4b0e      	ldr	r3, [pc, #56]	; (8008784 <MX_SPI1_Init+0x64>)
 800874c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008750:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008752:	4b0c      	ldr	r3, [pc, #48]	; (8008784 <MX_SPI1_Init+0x64>)
 8008754:	2200      	movs	r2, #0
 8008756:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008758:	4b0a      	ldr	r3, [pc, #40]	; (8008784 <MX_SPI1_Init+0x64>)
 800875a:	2200      	movs	r2, #0
 800875c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800875e:	4b09      	ldr	r3, [pc, #36]	; (8008784 <MX_SPI1_Init+0x64>)
 8008760:	2200      	movs	r2, #0
 8008762:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008764:	4b07      	ldr	r3, [pc, #28]	; (8008784 <MX_SPI1_Init+0x64>)
 8008766:	2200      	movs	r2, #0
 8008768:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800876a:	4b06      	ldr	r3, [pc, #24]	; (8008784 <MX_SPI1_Init+0x64>)
 800876c:	220a      	movs	r2, #10
 800876e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8008770:	4804      	ldr	r0, [pc, #16]	; (8008784 <MX_SPI1_Init+0x64>)
 8008772:	f003 ff51 	bl	800c618 <HAL_SPI_Init>
 8008776:	4603      	mov	r3, r0
 8008778:	2b00      	cmp	r3, #0
 800877a:	d001      	beq.n	8008780 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800877c:	f000 f92e 	bl	80089dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8008780:	bf00      	nop
 8008782:	bd80      	pop	{r7, pc}
 8008784:	20000120 	.word	0x20000120
 8008788:	40013000 	.word	0x40013000

0800878c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008790:	4b11      	ldr	r3, [pc, #68]	; (80087d8 <MX_USART2_UART_Init+0x4c>)
 8008792:	4a12      	ldr	r2, [pc, #72]	; (80087dc <MX_USART2_UART_Init+0x50>)
 8008794:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8008796:	4b10      	ldr	r3, [pc, #64]	; (80087d8 <MX_USART2_UART_Init+0x4c>)
 8008798:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800879c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800879e:	4b0e      	ldr	r3, [pc, #56]	; (80087d8 <MX_USART2_UART_Init+0x4c>)
 80087a0:	2200      	movs	r2, #0
 80087a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80087a4:	4b0c      	ldr	r3, [pc, #48]	; (80087d8 <MX_USART2_UART_Init+0x4c>)
 80087a6:	2200      	movs	r2, #0
 80087a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80087aa:	4b0b      	ldr	r3, [pc, #44]	; (80087d8 <MX_USART2_UART_Init+0x4c>)
 80087ac:	2200      	movs	r2, #0
 80087ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80087b0:	4b09      	ldr	r3, [pc, #36]	; (80087d8 <MX_USART2_UART_Init+0x4c>)
 80087b2:	220c      	movs	r2, #12
 80087b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80087b6:	4b08      	ldr	r3, [pc, #32]	; (80087d8 <MX_USART2_UART_Init+0x4c>)
 80087b8:	2200      	movs	r2, #0
 80087ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80087bc:	4b06      	ldr	r3, [pc, #24]	; (80087d8 <MX_USART2_UART_Init+0x4c>)
 80087be:	2200      	movs	r2, #0
 80087c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80087c2:	4805      	ldr	r0, [pc, #20]	; (80087d8 <MX_USART2_UART_Init+0x4c>)
 80087c4:	f003 ff8c 	bl	800c6e0 <HAL_UART_Init>
 80087c8:	4603      	mov	r3, r0
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d001      	beq.n	80087d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80087ce:	f000 f905 	bl	80089dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80087d2:	bf00      	nop
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	20000178 	.word	0x20000178
 80087dc:	40004400 	.word	0x40004400

080087e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b08c      	sub	sp, #48	; 0x30
 80087e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087e6:	f107 031c 	add.w	r3, r7, #28
 80087ea:	2200      	movs	r2, #0
 80087ec:	601a      	str	r2, [r3, #0]
 80087ee:	605a      	str	r2, [r3, #4]
 80087f0:	609a      	str	r2, [r3, #8]
 80087f2:	60da      	str	r2, [r3, #12]
 80087f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80087f6:	2300      	movs	r3, #0
 80087f8:	61bb      	str	r3, [r7, #24]
 80087fa:	4b71      	ldr	r3, [pc, #452]	; (80089c0 <MX_GPIO_Init+0x1e0>)
 80087fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087fe:	4a70      	ldr	r2, [pc, #448]	; (80089c0 <MX_GPIO_Init+0x1e0>)
 8008800:	f043 0310 	orr.w	r3, r3, #16
 8008804:	6313      	str	r3, [r2, #48]	; 0x30
 8008806:	4b6e      	ldr	r3, [pc, #440]	; (80089c0 <MX_GPIO_Init+0x1e0>)
 8008808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800880a:	f003 0310 	and.w	r3, r3, #16
 800880e:	61bb      	str	r3, [r7, #24]
 8008810:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008812:	2300      	movs	r3, #0
 8008814:	617b      	str	r3, [r7, #20]
 8008816:	4b6a      	ldr	r3, [pc, #424]	; (80089c0 <MX_GPIO_Init+0x1e0>)
 8008818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800881a:	4a69      	ldr	r2, [pc, #420]	; (80089c0 <MX_GPIO_Init+0x1e0>)
 800881c:	f043 0304 	orr.w	r3, r3, #4
 8008820:	6313      	str	r3, [r2, #48]	; 0x30
 8008822:	4b67      	ldr	r3, [pc, #412]	; (80089c0 <MX_GPIO_Init+0x1e0>)
 8008824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008826:	f003 0304 	and.w	r3, r3, #4
 800882a:	617b      	str	r3, [r7, #20]
 800882c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800882e:	2300      	movs	r3, #0
 8008830:	613b      	str	r3, [r7, #16]
 8008832:	4b63      	ldr	r3, [pc, #396]	; (80089c0 <MX_GPIO_Init+0x1e0>)
 8008834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008836:	4a62      	ldr	r2, [pc, #392]	; (80089c0 <MX_GPIO_Init+0x1e0>)
 8008838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800883c:	6313      	str	r3, [r2, #48]	; 0x30
 800883e:	4b60      	ldr	r3, [pc, #384]	; (80089c0 <MX_GPIO_Init+0x1e0>)
 8008840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008846:	613b      	str	r3, [r7, #16]
 8008848:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800884a:	2300      	movs	r3, #0
 800884c:	60fb      	str	r3, [r7, #12]
 800884e:	4b5c      	ldr	r3, [pc, #368]	; (80089c0 <MX_GPIO_Init+0x1e0>)
 8008850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008852:	4a5b      	ldr	r2, [pc, #364]	; (80089c0 <MX_GPIO_Init+0x1e0>)
 8008854:	f043 0301 	orr.w	r3, r3, #1
 8008858:	6313      	str	r3, [r2, #48]	; 0x30
 800885a:	4b59      	ldr	r3, [pc, #356]	; (80089c0 <MX_GPIO_Init+0x1e0>)
 800885c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800885e:	f003 0301 	and.w	r3, r3, #1
 8008862:	60fb      	str	r3, [r7, #12]
 8008864:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008866:	2300      	movs	r3, #0
 8008868:	60bb      	str	r3, [r7, #8]
 800886a:	4b55      	ldr	r3, [pc, #340]	; (80089c0 <MX_GPIO_Init+0x1e0>)
 800886c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800886e:	4a54      	ldr	r2, [pc, #336]	; (80089c0 <MX_GPIO_Init+0x1e0>)
 8008870:	f043 0302 	orr.w	r3, r3, #2
 8008874:	6313      	str	r3, [r2, #48]	; 0x30
 8008876:	4b52      	ldr	r3, [pc, #328]	; (80089c0 <MX_GPIO_Init+0x1e0>)
 8008878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800887a:	f003 0302 	and.w	r3, r3, #2
 800887e:	60bb      	str	r3, [r7, #8]
 8008880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008882:	2300      	movs	r3, #0
 8008884:	607b      	str	r3, [r7, #4]
 8008886:	4b4e      	ldr	r3, [pc, #312]	; (80089c0 <MX_GPIO_Init+0x1e0>)
 8008888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800888a:	4a4d      	ldr	r2, [pc, #308]	; (80089c0 <MX_GPIO_Init+0x1e0>)
 800888c:	f043 0308 	orr.w	r3, r3, #8
 8008890:	6313      	str	r3, [r2, #48]	; 0x30
 8008892:	4b4b      	ldr	r3, [pc, #300]	; (80089c0 <MX_GPIO_Init+0x1e0>)
 8008894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008896:	f003 0308 	and.w	r3, r3, #8
 800889a:	607b      	str	r3, [r7, #4]
 800889c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800889e:	2200      	movs	r2, #0
 80088a0:	2108      	movs	r1, #8
 80088a2:	4848      	ldr	r0, [pc, #288]	; (80089c4 <MX_GPIO_Init+0x1e4>)
 80088a4:	f000 fe36 	bl	8009514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80088a8:	2201      	movs	r2, #1
 80088aa:	2101      	movs	r1, #1
 80088ac:	4846      	ldr	r0, [pc, #280]	; (80089c8 <MX_GPIO_Init+0x1e8>)
 80088ae:	f000 fe31 	bl	8009514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80088b2:	2200      	movs	r2, #0
 80088b4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80088b8:	4844      	ldr	r0, [pc, #272]	; (80089cc <MX_GPIO_Init+0x1ec>)
 80088ba:	f000 fe2b 	bl	8009514 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80088be:	2308      	movs	r3, #8
 80088c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80088c2:	2301      	movs	r3, #1
 80088c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088c6:	2300      	movs	r3, #0
 80088c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088ca:	2300      	movs	r3, #0
 80088cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80088ce:	f107 031c 	add.w	r3, r7, #28
 80088d2:	4619      	mov	r1, r3
 80088d4:	483b      	ldr	r0, [pc, #236]	; (80089c4 <MX_GPIO_Init+0x1e4>)
 80088d6:	f000 fc83 	bl	80091e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80088da:	2301      	movs	r3, #1
 80088dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80088de:	2301      	movs	r3, #1
 80088e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088e2:	2300      	movs	r3, #0
 80088e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088e6:	2300      	movs	r3, #0
 80088e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80088ea:	f107 031c 	add.w	r3, r7, #28
 80088ee:	4619      	mov	r1, r3
 80088f0:	4835      	ldr	r0, [pc, #212]	; (80089c8 <MX_GPIO_Init+0x1e8>)
 80088f2:	f000 fc75 	bl	80091e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80088f6:	2308      	movs	r3, #8
 80088f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088fa:	2302      	movs	r3, #2
 80088fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088fe:	2300      	movs	r3, #0
 8008900:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008902:	2300      	movs	r3, #0
 8008904:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8008906:	2305      	movs	r3, #5
 8008908:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800890a:	f107 031c 	add.w	r3, r7, #28
 800890e:	4619      	mov	r1, r3
 8008910:	482d      	ldr	r0, [pc, #180]	; (80089c8 <MX_GPIO_Init+0x1e8>)
 8008912:	f000 fc65 	bl	80091e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8008916:	2301      	movs	r3, #1
 8008918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800891a:	4b2d      	ldr	r3, [pc, #180]	; (80089d0 <MX_GPIO_Init+0x1f0>)
 800891c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800891e:	2300      	movs	r3, #0
 8008920:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8008922:	f107 031c 	add.w	r3, r7, #28
 8008926:	4619      	mov	r1, r3
 8008928:	482a      	ldr	r0, [pc, #168]	; (80089d4 <MX_GPIO_Init+0x1f4>)
 800892a:	f000 fc59 	bl	80091e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800892e:	2304      	movs	r3, #4
 8008930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008932:	2300      	movs	r3, #0
 8008934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008936:	2300      	movs	r3, #0
 8008938:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800893a:	f107 031c 	add.w	r3, r7, #28
 800893e:	4619      	mov	r1, r3
 8008940:	4825      	ldr	r0, [pc, #148]	; (80089d8 <MX_GPIO_Init+0x1f8>)
 8008942:	f000 fc4d 	bl	80091e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8008946:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800894a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800894c:	2302      	movs	r3, #2
 800894e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008950:	2300      	movs	r3, #0
 8008952:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008954:	2300      	movs	r3, #0
 8008956:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8008958:	2305      	movs	r3, #5
 800895a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800895c:	f107 031c 	add.w	r3, r7, #28
 8008960:	4619      	mov	r1, r3
 8008962:	481d      	ldr	r0, [pc, #116]	; (80089d8 <MX_GPIO_Init+0x1f8>)
 8008964:	f000 fc3c 	bl	80091e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8008968:	f24f 0310 	movw	r3, #61456	; 0xf010
 800896c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800896e:	2301      	movs	r3, #1
 8008970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008972:	2300      	movs	r3, #0
 8008974:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008976:	2300      	movs	r3, #0
 8008978:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800897a:	f107 031c 	add.w	r3, r7, #28
 800897e:	4619      	mov	r1, r3
 8008980:	4812      	ldr	r0, [pc, #72]	; (80089cc <MX_GPIO_Init+0x1ec>)
 8008982:	f000 fc2d 	bl	80091e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8008986:	2320      	movs	r3, #32
 8008988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800898a:	2300      	movs	r3, #0
 800898c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800898e:	2300      	movs	r3, #0
 8008990:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8008992:	f107 031c 	add.w	r3, r7, #28
 8008996:	4619      	mov	r1, r3
 8008998:	480c      	ldr	r0, [pc, #48]	; (80089cc <MX_GPIO_Init+0x1ec>)
 800899a:	f000 fc21 	bl	80091e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800899e:	2302      	movs	r3, #2
 80089a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80089a2:	4b0b      	ldr	r3, [pc, #44]	; (80089d0 <MX_GPIO_Init+0x1f0>)
 80089a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089a6:	2300      	movs	r3, #0
 80089a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80089aa:	f107 031c 	add.w	r3, r7, #28
 80089ae:	4619      	mov	r1, r3
 80089b0:	4804      	ldr	r0, [pc, #16]	; (80089c4 <MX_GPIO_Init+0x1e4>)
 80089b2:	f000 fc15 	bl	80091e0 <HAL_GPIO_Init>

}
 80089b6:	bf00      	nop
 80089b8:	3730      	adds	r7, #48	; 0x30
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
 80089be:	bf00      	nop
 80089c0:	40023800 	.word	0x40023800
 80089c4:	40021000 	.word	0x40021000
 80089c8:	40020800 	.word	0x40020800
 80089cc:	40020c00 	.word	0x40020c00
 80089d0:	10120000 	.word	0x10120000
 80089d4:	40020000 	.word	0x40020000
 80089d8:	40020400 	.word	0x40020400

080089dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80089dc:	b480      	push	{r7}
 80089de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80089e0:	bf00      	nop
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr
	...

080089ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80089f2:	2300      	movs	r3, #0
 80089f4:	607b      	str	r3, [r7, #4]
 80089f6:	4b10      	ldr	r3, [pc, #64]	; (8008a38 <HAL_MspInit+0x4c>)
 80089f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089fa:	4a0f      	ldr	r2, [pc, #60]	; (8008a38 <HAL_MspInit+0x4c>)
 80089fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008a00:	6453      	str	r3, [r2, #68]	; 0x44
 8008a02:	4b0d      	ldr	r3, [pc, #52]	; (8008a38 <HAL_MspInit+0x4c>)
 8008a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a0a:	607b      	str	r3, [r7, #4]
 8008a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008a0e:	2300      	movs	r3, #0
 8008a10:	603b      	str	r3, [r7, #0]
 8008a12:	4b09      	ldr	r3, [pc, #36]	; (8008a38 <HAL_MspInit+0x4c>)
 8008a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a16:	4a08      	ldr	r2, [pc, #32]	; (8008a38 <HAL_MspInit+0x4c>)
 8008a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8008a1e:	4b06      	ldr	r3, [pc, #24]	; (8008a38 <HAL_MspInit+0x4c>)
 8008a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a26:	603b      	str	r3, [r7, #0]
 8008a28:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8008a2a:	2007      	movs	r0, #7
 8008a2c:	f000 fb7a 	bl	8009124 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008a30:	bf00      	nop
 8008a32:	3708      	adds	r7, #8
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}
 8008a38:	40023800 	.word	0x40023800

08008a3c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b085      	sub	sp, #20
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a0b      	ldr	r2, [pc, #44]	; (8008a78 <HAL_CRC_MspInit+0x3c>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d10d      	bne.n	8008a6a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8008a4e:	2300      	movs	r3, #0
 8008a50:	60fb      	str	r3, [r7, #12]
 8008a52:	4b0a      	ldr	r3, [pc, #40]	; (8008a7c <HAL_CRC_MspInit+0x40>)
 8008a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a56:	4a09      	ldr	r2, [pc, #36]	; (8008a7c <HAL_CRC_MspInit+0x40>)
 8008a58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8008a5e:	4b07      	ldr	r3, [pc, #28]	; (8008a7c <HAL_CRC_MspInit+0x40>)
 8008a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a66:	60fb      	str	r3, [r7, #12]
 8008a68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8008a6a:	bf00      	nop
 8008a6c:	3714      	adds	r7, #20
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr
 8008a76:	bf00      	nop
 8008a78:	40023000 	.word	0x40023000
 8008a7c:	40023800 	.word	0x40023800

08008a80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b08a      	sub	sp, #40	; 0x28
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a88:	f107 0314 	add.w	r3, r7, #20
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	601a      	str	r2, [r3, #0]
 8008a90:	605a      	str	r2, [r3, #4]
 8008a92:	609a      	str	r2, [r3, #8]
 8008a94:	60da      	str	r2, [r3, #12]
 8008a96:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a19      	ldr	r2, [pc, #100]	; (8008b04 <HAL_I2C_MspInit+0x84>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d12c      	bne.n	8008afc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	613b      	str	r3, [r7, #16]
 8008aa6:	4b18      	ldr	r3, [pc, #96]	; (8008b08 <HAL_I2C_MspInit+0x88>)
 8008aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aaa:	4a17      	ldr	r2, [pc, #92]	; (8008b08 <HAL_I2C_MspInit+0x88>)
 8008aac:	f043 0302 	orr.w	r3, r3, #2
 8008ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8008ab2:	4b15      	ldr	r3, [pc, #84]	; (8008b08 <HAL_I2C_MspInit+0x88>)
 8008ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ab6:	f003 0302 	and.w	r3, r3, #2
 8008aba:	613b      	str	r3, [r7, #16]
 8008abc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8008abe:	f44f 7310 	mov.w	r3, #576	; 0x240
 8008ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008ac4:	2312      	movs	r3, #18
 8008ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008ac8:	2301      	movs	r3, #1
 8008aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008acc:	2300      	movs	r3, #0
 8008ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008ad0:	2304      	movs	r3, #4
 8008ad2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008ad4:	f107 0314 	add.w	r3, r7, #20
 8008ad8:	4619      	mov	r1, r3
 8008ada:	480c      	ldr	r0, [pc, #48]	; (8008b0c <HAL_I2C_MspInit+0x8c>)
 8008adc:	f000 fb80 	bl	80091e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	60fb      	str	r3, [r7, #12]
 8008ae4:	4b08      	ldr	r3, [pc, #32]	; (8008b08 <HAL_I2C_MspInit+0x88>)
 8008ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ae8:	4a07      	ldr	r2, [pc, #28]	; (8008b08 <HAL_I2C_MspInit+0x88>)
 8008aea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008aee:	6413      	str	r3, [r2, #64]	; 0x40
 8008af0:	4b05      	ldr	r3, [pc, #20]	; (8008b08 <HAL_I2C_MspInit+0x88>)
 8008af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008af8:	60fb      	str	r3, [r7, #12]
 8008afa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008afc:	bf00      	nop
 8008afe:	3728      	adds	r7, #40	; 0x28
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}
 8008b04:	40005400 	.word	0x40005400
 8008b08:	40023800 	.word	0x40023800
 8008b0c:	40020400 	.word	0x40020400

08008b10 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b08a      	sub	sp, #40	; 0x28
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b18:	f107 0314 	add.w	r3, r7, #20
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	601a      	str	r2, [r3, #0]
 8008b20:	605a      	str	r2, [r3, #4]
 8008b22:	609a      	str	r2, [r3, #8]
 8008b24:	60da      	str	r2, [r3, #12]
 8008b26:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a28      	ldr	r2, [pc, #160]	; (8008bd0 <HAL_I2S_MspInit+0xc0>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d14a      	bne.n	8008bc8 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8008b32:	2300      	movs	r3, #0
 8008b34:	613b      	str	r3, [r7, #16]
 8008b36:	4b27      	ldr	r3, [pc, #156]	; (8008bd4 <HAL_I2S_MspInit+0xc4>)
 8008b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b3a:	4a26      	ldr	r2, [pc, #152]	; (8008bd4 <HAL_I2S_MspInit+0xc4>)
 8008b3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b40:	6413      	str	r3, [r2, #64]	; 0x40
 8008b42:	4b24      	ldr	r3, [pc, #144]	; (8008bd4 <HAL_I2S_MspInit+0xc4>)
 8008b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b4a:	613b      	str	r3, [r7, #16]
 8008b4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008b4e:	2300      	movs	r3, #0
 8008b50:	60fb      	str	r3, [r7, #12]
 8008b52:	4b20      	ldr	r3, [pc, #128]	; (8008bd4 <HAL_I2S_MspInit+0xc4>)
 8008b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b56:	4a1f      	ldr	r2, [pc, #124]	; (8008bd4 <HAL_I2S_MspInit+0xc4>)
 8008b58:	f043 0301 	orr.w	r3, r3, #1
 8008b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8008b5e:	4b1d      	ldr	r3, [pc, #116]	; (8008bd4 <HAL_I2S_MspInit+0xc4>)
 8008b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b62:	f003 0301 	and.w	r3, r3, #1
 8008b66:	60fb      	str	r3, [r7, #12]
 8008b68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	60bb      	str	r3, [r7, #8]
 8008b6e:	4b19      	ldr	r3, [pc, #100]	; (8008bd4 <HAL_I2S_MspInit+0xc4>)
 8008b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b72:	4a18      	ldr	r2, [pc, #96]	; (8008bd4 <HAL_I2S_MspInit+0xc4>)
 8008b74:	f043 0304 	orr.w	r3, r3, #4
 8008b78:	6313      	str	r3, [r2, #48]	; 0x30
 8008b7a:	4b16      	ldr	r3, [pc, #88]	; (8008bd4 <HAL_I2S_MspInit+0xc4>)
 8008b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b7e:	f003 0304 	and.w	r3, r3, #4
 8008b82:	60bb      	str	r3, [r7, #8]
 8008b84:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8008b86:	2310      	movs	r3, #16
 8008b88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b8a:	2302      	movs	r3, #2
 8008b8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b92:	2300      	movs	r3, #0
 8008b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008b96:	2306      	movs	r3, #6
 8008b98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8008b9a:	f107 0314 	add.w	r3, r7, #20
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	480d      	ldr	r0, [pc, #52]	; (8008bd8 <HAL_I2S_MspInit+0xc8>)
 8008ba2:	f000 fb1d 	bl	80091e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8008ba6:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8008baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008bac:	2302      	movs	r3, #2
 8008bae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008bb8:	2306      	movs	r3, #6
 8008bba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008bbc:	f107 0314 	add.w	r3, r7, #20
 8008bc0:	4619      	mov	r1, r3
 8008bc2:	4806      	ldr	r0, [pc, #24]	; (8008bdc <HAL_I2S_MspInit+0xcc>)
 8008bc4:	f000 fb0c 	bl	80091e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8008bc8:	bf00      	nop
 8008bca:	3728      	adds	r7, #40	; 0x28
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}
 8008bd0:	40003c00 	.word	0x40003c00
 8008bd4:	40023800 	.word	0x40023800
 8008bd8:	40020000 	.word	0x40020000
 8008bdc:	40020800 	.word	0x40020800

08008be0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b08a      	sub	sp, #40	; 0x28
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008be8:	f107 0314 	add.w	r3, r7, #20
 8008bec:	2200      	movs	r2, #0
 8008bee:	601a      	str	r2, [r3, #0]
 8008bf0:	605a      	str	r2, [r3, #4]
 8008bf2:	609a      	str	r2, [r3, #8]
 8008bf4:	60da      	str	r2, [r3, #12]
 8008bf6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a19      	ldr	r2, [pc, #100]	; (8008c64 <HAL_SPI_MspInit+0x84>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d12b      	bne.n	8008c5a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008c02:	2300      	movs	r3, #0
 8008c04:	613b      	str	r3, [r7, #16]
 8008c06:	4b18      	ldr	r3, [pc, #96]	; (8008c68 <HAL_SPI_MspInit+0x88>)
 8008c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c0a:	4a17      	ldr	r2, [pc, #92]	; (8008c68 <HAL_SPI_MspInit+0x88>)
 8008c0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008c10:	6453      	str	r3, [r2, #68]	; 0x44
 8008c12:	4b15      	ldr	r3, [pc, #84]	; (8008c68 <HAL_SPI_MspInit+0x88>)
 8008c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008c1a:	613b      	str	r3, [r7, #16]
 8008c1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c1e:	2300      	movs	r3, #0
 8008c20:	60fb      	str	r3, [r7, #12]
 8008c22:	4b11      	ldr	r3, [pc, #68]	; (8008c68 <HAL_SPI_MspInit+0x88>)
 8008c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c26:	4a10      	ldr	r2, [pc, #64]	; (8008c68 <HAL_SPI_MspInit+0x88>)
 8008c28:	f043 0301 	orr.w	r3, r3, #1
 8008c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8008c2e:	4b0e      	ldr	r3, [pc, #56]	; (8008c68 <HAL_SPI_MspInit+0x88>)
 8008c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c32:	f003 0301 	and.w	r3, r3, #1
 8008c36:	60fb      	str	r3, [r7, #12]
 8008c38:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8008c3a:	23e0      	movs	r3, #224	; 0xe0
 8008c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c3e:	2302      	movs	r3, #2
 8008c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c42:	2300      	movs	r3, #0
 8008c44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c46:	2300      	movs	r3, #0
 8008c48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008c4a:	2305      	movs	r3, #5
 8008c4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c4e:	f107 0314 	add.w	r3, r7, #20
 8008c52:	4619      	mov	r1, r3
 8008c54:	4805      	ldr	r0, [pc, #20]	; (8008c6c <HAL_SPI_MspInit+0x8c>)
 8008c56:	f000 fac3 	bl	80091e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8008c5a:	bf00      	nop
 8008c5c:	3728      	adds	r7, #40	; 0x28
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	bf00      	nop
 8008c64:	40013000 	.word	0x40013000
 8008c68:	40023800 	.word	0x40023800
 8008c6c:	40020000 	.word	0x40020000

08008c70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b08a      	sub	sp, #40	; 0x28
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c78:	f107 0314 	add.w	r3, r7, #20
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	601a      	str	r2, [r3, #0]
 8008c80:	605a      	str	r2, [r3, #4]
 8008c82:	609a      	str	r2, [r3, #8]
 8008c84:	60da      	str	r2, [r3, #12]
 8008c86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a19      	ldr	r2, [pc, #100]	; (8008cf4 <HAL_UART_MspInit+0x84>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d12b      	bne.n	8008cea <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008c92:	2300      	movs	r3, #0
 8008c94:	613b      	str	r3, [r7, #16]
 8008c96:	4b18      	ldr	r3, [pc, #96]	; (8008cf8 <HAL_UART_MspInit+0x88>)
 8008c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c9a:	4a17      	ldr	r2, [pc, #92]	; (8008cf8 <HAL_UART_MspInit+0x88>)
 8008c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8008ca2:	4b15      	ldr	r3, [pc, #84]	; (8008cf8 <HAL_UART_MspInit+0x88>)
 8008ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008caa:	613b      	str	r3, [r7, #16]
 8008cac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008cae:	2300      	movs	r3, #0
 8008cb0:	60fb      	str	r3, [r7, #12]
 8008cb2:	4b11      	ldr	r3, [pc, #68]	; (8008cf8 <HAL_UART_MspInit+0x88>)
 8008cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cb6:	4a10      	ldr	r2, [pc, #64]	; (8008cf8 <HAL_UART_MspInit+0x88>)
 8008cb8:	f043 0301 	orr.w	r3, r3, #1
 8008cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8008cbe:	4b0e      	ldr	r3, [pc, #56]	; (8008cf8 <HAL_UART_MspInit+0x88>)
 8008cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cc2:	f003 0301 	and.w	r3, r3, #1
 8008cc6:	60fb      	str	r3, [r7, #12]
 8008cc8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8008cca:	230c      	movs	r3, #12
 8008ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008cce:	2302      	movs	r3, #2
 8008cd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008cd6:	2303      	movs	r3, #3
 8008cd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008cda:	2307      	movs	r3, #7
 8008cdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cde:	f107 0314 	add.w	r3, r7, #20
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	4805      	ldr	r0, [pc, #20]	; (8008cfc <HAL_UART_MspInit+0x8c>)
 8008ce6:	f000 fa7b 	bl	80091e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8008cea:	bf00      	nop
 8008cec:	3728      	adds	r7, #40	; 0x28
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}
 8008cf2:	bf00      	nop
 8008cf4:	40004400 	.word	0x40004400
 8008cf8:	40023800 	.word	0x40023800
 8008cfc:	40020000 	.word	0x40020000

08008d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008d00:	b480      	push	{r7}
 8008d02:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008d04:	bf00      	nop
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr

08008d0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008d0e:	b480      	push	{r7}
 8008d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008d12:	e7fe      	b.n	8008d12 <HardFault_Handler+0x4>

08008d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008d14:	b480      	push	{r7}
 8008d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008d18:	e7fe      	b.n	8008d18 <MemManage_Handler+0x4>

08008d1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008d1a:	b480      	push	{r7}
 8008d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008d1e:	e7fe      	b.n	8008d1e <BusFault_Handler+0x4>

08008d20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008d20:	b480      	push	{r7}
 8008d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008d24:	e7fe      	b.n	8008d24 <UsageFault_Handler+0x4>

08008d26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008d26:	b480      	push	{r7}
 8008d28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008d2a:	bf00      	nop
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr

08008d34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008d34:	b480      	push	{r7}
 8008d36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008d38:	bf00      	nop
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d40:	4770      	bx	lr

08008d42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008d42:	b480      	push	{r7}
 8008d44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008d46:	bf00      	nop
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr

08008d50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008d54:	f000 f8d4 	bl	8008f00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008d58:	bf00      	nop
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8008d60:	4802      	ldr	r0, [pc, #8]	; (8008d6c <OTG_FS_IRQHandler+0x10>)
 8008d62:	f000 fe9b 	bl	8009a9c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8008d66:	bf00      	nop
 8008d68:	bd80      	pop	{r7, pc}
 8008d6a:	bf00      	nop
 8008d6c:	200005dc 	.word	0x200005dc

08008d70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b086      	sub	sp, #24
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008d78:	4a14      	ldr	r2, [pc, #80]	; (8008dcc <_sbrk+0x5c>)
 8008d7a:	4b15      	ldr	r3, [pc, #84]	; (8008dd0 <_sbrk+0x60>)
 8008d7c:	1ad3      	subs	r3, r2, r3
 8008d7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008d84:	4b13      	ldr	r3, [pc, #76]	; (8008dd4 <_sbrk+0x64>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d102      	bne.n	8008d92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008d8c:	4b11      	ldr	r3, [pc, #68]	; (8008dd4 <_sbrk+0x64>)
 8008d8e:	4a12      	ldr	r2, [pc, #72]	; (8008dd8 <_sbrk+0x68>)
 8008d90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008d92:	4b10      	ldr	r3, [pc, #64]	; (8008dd4 <_sbrk+0x64>)
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	4413      	add	r3, r2
 8008d9a:	693a      	ldr	r2, [r7, #16]
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d207      	bcs.n	8008db0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008da0:	f006 fb6c 	bl	800f47c <__errno>
 8008da4:	4602      	mov	r2, r0
 8008da6:	230c      	movs	r3, #12
 8008da8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8008daa:	f04f 33ff 	mov.w	r3, #4294967295
 8008dae:	e009      	b.n	8008dc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008db0:	4b08      	ldr	r3, [pc, #32]	; (8008dd4 <_sbrk+0x64>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008db6:	4b07      	ldr	r3, [pc, #28]	; (8008dd4 <_sbrk+0x64>)
 8008db8:	681a      	ldr	r2, [r3, #0]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	4413      	add	r3, r2
 8008dbe:	4a05      	ldr	r2, [pc, #20]	; (8008dd4 <_sbrk+0x64>)
 8008dc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3718      	adds	r7, #24
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}
 8008dcc:	20020000 	.word	0x20020000
 8008dd0:	00000400 	.word	0x00000400
 8008dd4:	200000ac 	.word	0x200000ac
 8008dd8:	200008a8 	.word	0x200008a8

08008ddc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008de0:	4b07      	ldr	r3, [pc, #28]	; (8008e00 <SystemInit+0x24>)
 8008de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008de6:	4a06      	ldr	r2, [pc, #24]	; (8008e00 <SystemInit+0x24>)
 8008de8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008dec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008df0:	4b03      	ldr	r3, [pc, #12]	; (8008e00 <SystemInit+0x24>)
 8008df2:	4a04      	ldr	r2, [pc, #16]	; (8008e04 <SystemInit+0x28>)
 8008df4:	609a      	str	r2, [r3, #8]
#endif
}
 8008df6:	bf00      	nop
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr
 8008e00:	e000ed00 	.word	0xe000ed00
 8008e04:	08008000 	.word	0x08008000

08008e08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008e08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008e40 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008e0c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008e0e:	e003      	b.n	8008e18 <LoopCopyDataInit>

08008e10 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008e10:	4b0c      	ldr	r3, [pc, #48]	; (8008e44 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008e12:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008e14:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008e16:	3104      	adds	r1, #4

08008e18 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008e18:	480b      	ldr	r0, [pc, #44]	; (8008e48 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008e1a:	4b0c      	ldr	r3, [pc, #48]	; (8008e4c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008e1c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008e1e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008e20:	d3f6      	bcc.n	8008e10 <CopyDataInit>
  ldr  r2, =_sbss
 8008e22:	4a0b      	ldr	r2, [pc, #44]	; (8008e50 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008e24:	e002      	b.n	8008e2c <LoopFillZerobss>

08008e26 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008e26:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008e28:	f842 3b04 	str.w	r3, [r2], #4

08008e2c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008e2c:	4b09      	ldr	r3, [pc, #36]	; (8008e54 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008e2e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008e30:	d3f9      	bcc.n	8008e26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008e32:	f7ff ffd3 	bl	8008ddc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008e36:	f006 fb27 	bl	800f488 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008e3a:	f7ff fb45 	bl	80084c8 <main>
  bx  lr    
 8008e3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008e40:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008e44:	0800f6e0 	.word	0x0800f6e0
  ldr  r0, =_sdata
 8008e48:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008e4c:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8008e50:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8008e54:	200008a4 	.word	0x200008a4

08008e58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008e58:	e7fe      	b.n	8008e58 <ADC_IRQHandler>
	...

08008e5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008e60:	4b0e      	ldr	r3, [pc, #56]	; (8008e9c <HAL_Init+0x40>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a0d      	ldr	r2, [pc, #52]	; (8008e9c <HAL_Init+0x40>)
 8008e66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008e6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008e6c:	4b0b      	ldr	r3, [pc, #44]	; (8008e9c <HAL_Init+0x40>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a0a      	ldr	r2, [pc, #40]	; (8008e9c <HAL_Init+0x40>)
 8008e72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008e76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008e78:	4b08      	ldr	r3, [pc, #32]	; (8008e9c <HAL_Init+0x40>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a07      	ldr	r2, [pc, #28]	; (8008e9c <HAL_Init+0x40>)
 8008e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008e84:	2003      	movs	r0, #3
 8008e86:	f000 f94d 	bl	8009124 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008e8a:	2000      	movs	r0, #0
 8008e8c:	f000 f808 	bl	8008ea0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008e90:	f7ff fdac 	bl	80089ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008e94:	2300      	movs	r3, #0
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	bd80      	pop	{r7, pc}
 8008e9a:	bf00      	nop
 8008e9c:	40023c00 	.word	0x40023c00

08008ea0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008ea8:	4b12      	ldr	r3, [pc, #72]	; (8008ef4 <HAL_InitTick+0x54>)
 8008eaa:	681a      	ldr	r2, [r3, #0]
 8008eac:	4b12      	ldr	r3, [pc, #72]	; (8008ef8 <HAL_InitTick+0x58>)
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008eb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8008eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f000 f965 	bl	800918e <HAL_SYSTICK_Config>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d001      	beq.n	8008ece <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	e00e      	b.n	8008eec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2b0f      	cmp	r3, #15
 8008ed2:	d80a      	bhi.n	8008eea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	6879      	ldr	r1, [r7, #4]
 8008ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8008edc:	f000 f92d 	bl	800913a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008ee0:	4a06      	ldr	r2, [pc, #24]	; (8008efc <HAL_InitTick+0x5c>)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	e000      	b.n	8008eec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008eea:	2301      	movs	r3, #1
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3708      	adds	r7, #8
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}
 8008ef4:	20000000 	.word	0x20000000
 8008ef8:	20000008 	.word	0x20000008
 8008efc:	20000004 	.word	0x20000004

08008f00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008f00:	b480      	push	{r7}
 8008f02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008f04:	4b06      	ldr	r3, [pc, #24]	; (8008f20 <HAL_IncTick+0x20>)
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	461a      	mov	r2, r3
 8008f0a:	4b06      	ldr	r3, [pc, #24]	; (8008f24 <HAL_IncTick+0x24>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	4413      	add	r3, r2
 8008f10:	4a04      	ldr	r2, [pc, #16]	; (8008f24 <HAL_IncTick+0x24>)
 8008f12:	6013      	str	r3, [r2, #0]
}
 8008f14:	bf00      	nop
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr
 8008f1e:	bf00      	nop
 8008f20:	20000008 	.word	0x20000008
 8008f24:	20000200 	.word	0x20000200

08008f28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8008f2c:	4b03      	ldr	r3, [pc, #12]	; (8008f3c <HAL_GetTick+0x14>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr
 8008f3a:	bf00      	nop
 8008f3c:	20000200 	.word	0x20000200

08008f40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008f48:	f7ff ffee 	bl	8008f28 <HAL_GetTick>
 8008f4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f58:	d005      	beq.n	8008f66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008f5a:	4b09      	ldr	r3, [pc, #36]	; (8008f80 <HAL_Delay+0x40>)
 8008f5c:	781b      	ldrb	r3, [r3, #0]
 8008f5e:	461a      	mov	r2, r3
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	4413      	add	r3, r2
 8008f64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008f66:	bf00      	nop
 8008f68:	f7ff ffde 	bl	8008f28 <HAL_GetTick>
 8008f6c:	4602      	mov	r2, r0
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	1ad3      	subs	r3, r2, r3
 8008f72:	68fa      	ldr	r2, [r7, #12]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d8f7      	bhi.n	8008f68 <HAL_Delay+0x28>
  {
  }
}
 8008f78:	bf00      	nop
 8008f7a:	3710      	adds	r7, #16
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}
 8008f80:	20000008 	.word	0x20000008

08008f84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b085      	sub	sp, #20
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f003 0307 	and.w	r3, r3, #7
 8008f92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008f94:	4b0c      	ldr	r3, [pc, #48]	; (8008fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8008f96:	68db      	ldr	r3, [r3, #12]
 8008f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008f9a:	68ba      	ldr	r2, [r7, #8]
 8008f9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008fa0:	4013      	ands	r3, r2
 8008fa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008fac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008fb6:	4a04      	ldr	r2, [pc, #16]	; (8008fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	60d3      	str	r3, [r2, #12]
}
 8008fbc:	bf00      	nop
 8008fbe:	3714      	adds	r7, #20
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr
 8008fc8:	e000ed00 	.word	0xe000ed00

08008fcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008fd0:	4b04      	ldr	r3, [pc, #16]	; (8008fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8008fd2:	68db      	ldr	r3, [r3, #12]
 8008fd4:	0a1b      	lsrs	r3, r3, #8
 8008fd6:	f003 0307 	and.w	r3, r3, #7
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr
 8008fe4:	e000ed00 	.word	0xe000ed00

08008fe8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b083      	sub	sp, #12
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	4603      	mov	r3, r0
 8008ff0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	db0b      	blt.n	8009012 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008ffa:	79fb      	ldrb	r3, [r7, #7]
 8008ffc:	f003 021f 	and.w	r2, r3, #31
 8009000:	4907      	ldr	r1, [pc, #28]	; (8009020 <__NVIC_EnableIRQ+0x38>)
 8009002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009006:	095b      	lsrs	r3, r3, #5
 8009008:	2001      	movs	r0, #1
 800900a:	fa00 f202 	lsl.w	r2, r0, r2
 800900e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009012:	bf00      	nop
 8009014:	370c      	adds	r7, #12
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr
 800901e:	bf00      	nop
 8009020:	e000e100 	.word	0xe000e100

08009024 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009024:	b480      	push	{r7}
 8009026:	b083      	sub	sp, #12
 8009028:	af00      	add	r7, sp, #0
 800902a:	4603      	mov	r3, r0
 800902c:	6039      	str	r1, [r7, #0]
 800902e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009034:	2b00      	cmp	r3, #0
 8009036:	db0a      	blt.n	800904e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	b2da      	uxtb	r2, r3
 800903c:	490c      	ldr	r1, [pc, #48]	; (8009070 <__NVIC_SetPriority+0x4c>)
 800903e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009042:	0112      	lsls	r2, r2, #4
 8009044:	b2d2      	uxtb	r2, r2
 8009046:	440b      	add	r3, r1
 8009048:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800904c:	e00a      	b.n	8009064 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	b2da      	uxtb	r2, r3
 8009052:	4908      	ldr	r1, [pc, #32]	; (8009074 <__NVIC_SetPriority+0x50>)
 8009054:	79fb      	ldrb	r3, [r7, #7]
 8009056:	f003 030f 	and.w	r3, r3, #15
 800905a:	3b04      	subs	r3, #4
 800905c:	0112      	lsls	r2, r2, #4
 800905e:	b2d2      	uxtb	r2, r2
 8009060:	440b      	add	r3, r1
 8009062:	761a      	strb	r2, [r3, #24]
}
 8009064:	bf00      	nop
 8009066:	370c      	adds	r7, #12
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr
 8009070:	e000e100 	.word	0xe000e100
 8009074:	e000ed00 	.word	0xe000ed00

08009078 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009078:	b480      	push	{r7}
 800907a:	b089      	sub	sp, #36	; 0x24
 800907c:	af00      	add	r7, sp, #0
 800907e:	60f8      	str	r0, [r7, #12]
 8009080:	60b9      	str	r1, [r7, #8]
 8009082:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f003 0307 	and.w	r3, r3, #7
 800908a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800908c:	69fb      	ldr	r3, [r7, #28]
 800908e:	f1c3 0307 	rsb	r3, r3, #7
 8009092:	2b04      	cmp	r3, #4
 8009094:	bf28      	it	cs
 8009096:	2304      	movcs	r3, #4
 8009098:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800909a:	69fb      	ldr	r3, [r7, #28]
 800909c:	3304      	adds	r3, #4
 800909e:	2b06      	cmp	r3, #6
 80090a0:	d902      	bls.n	80090a8 <NVIC_EncodePriority+0x30>
 80090a2:	69fb      	ldr	r3, [r7, #28]
 80090a4:	3b03      	subs	r3, #3
 80090a6:	e000      	b.n	80090aa <NVIC_EncodePriority+0x32>
 80090a8:	2300      	movs	r3, #0
 80090aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80090ac:	f04f 32ff 	mov.w	r2, #4294967295
 80090b0:	69bb      	ldr	r3, [r7, #24]
 80090b2:	fa02 f303 	lsl.w	r3, r2, r3
 80090b6:	43da      	mvns	r2, r3
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	401a      	ands	r2, r3
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80090c0:	f04f 31ff 	mov.w	r1, #4294967295
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	fa01 f303 	lsl.w	r3, r1, r3
 80090ca:	43d9      	mvns	r1, r3
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80090d0:	4313      	orrs	r3, r2
         );
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3724      	adds	r7, #36	; 0x24
 80090d6:	46bd      	mov	sp, r7
 80090d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090dc:	4770      	bx	lr
	...

080090e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	3b01      	subs	r3, #1
 80090ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80090f0:	d301      	bcc.n	80090f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80090f2:	2301      	movs	r3, #1
 80090f4:	e00f      	b.n	8009116 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80090f6:	4a0a      	ldr	r2, [pc, #40]	; (8009120 <SysTick_Config+0x40>)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	3b01      	subs	r3, #1
 80090fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80090fe:	210f      	movs	r1, #15
 8009100:	f04f 30ff 	mov.w	r0, #4294967295
 8009104:	f7ff ff8e 	bl	8009024 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009108:	4b05      	ldr	r3, [pc, #20]	; (8009120 <SysTick_Config+0x40>)
 800910a:	2200      	movs	r2, #0
 800910c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800910e:	4b04      	ldr	r3, [pc, #16]	; (8009120 <SysTick_Config+0x40>)
 8009110:	2207      	movs	r2, #7
 8009112:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009114:	2300      	movs	r3, #0
}
 8009116:	4618      	mov	r0, r3
 8009118:	3708      	adds	r7, #8
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
 800911e:	bf00      	nop
 8009120:	e000e010 	.word	0xe000e010

08009124 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b082      	sub	sp, #8
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f7ff ff29 	bl	8008f84 <__NVIC_SetPriorityGrouping>
}
 8009132:	bf00      	nop
 8009134:	3708      	adds	r7, #8
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}

0800913a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800913a:	b580      	push	{r7, lr}
 800913c:	b086      	sub	sp, #24
 800913e:	af00      	add	r7, sp, #0
 8009140:	4603      	mov	r3, r0
 8009142:	60b9      	str	r1, [r7, #8]
 8009144:	607a      	str	r2, [r7, #4]
 8009146:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009148:	2300      	movs	r3, #0
 800914a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800914c:	f7ff ff3e 	bl	8008fcc <__NVIC_GetPriorityGrouping>
 8009150:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	68b9      	ldr	r1, [r7, #8]
 8009156:	6978      	ldr	r0, [r7, #20]
 8009158:	f7ff ff8e 	bl	8009078 <NVIC_EncodePriority>
 800915c:	4602      	mov	r2, r0
 800915e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009162:	4611      	mov	r1, r2
 8009164:	4618      	mov	r0, r3
 8009166:	f7ff ff5d 	bl	8009024 <__NVIC_SetPriority>
}
 800916a:	bf00      	nop
 800916c:	3718      	adds	r7, #24
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}

08009172 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009172:	b580      	push	{r7, lr}
 8009174:	b082      	sub	sp, #8
 8009176:	af00      	add	r7, sp, #0
 8009178:	4603      	mov	r3, r0
 800917a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800917c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009180:	4618      	mov	r0, r3
 8009182:	f7ff ff31 	bl	8008fe8 <__NVIC_EnableIRQ>
}
 8009186:	bf00      	nop
 8009188:	3708      	adds	r7, #8
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}

0800918e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800918e:	b580      	push	{r7, lr}
 8009190:	b082      	sub	sp, #8
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f7ff ffa2 	bl	80090e0 <SysTick_Config>
 800919c:	4603      	mov	r3, r0
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3708      	adds	r7, #8
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}

080091a6 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80091a6:	b580      	push	{r7, lr}
 80091a8:	b082      	sub	sp, #8
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d101      	bne.n	80091b8 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80091b4:	2301      	movs	r3, #1
 80091b6:	e00e      	b.n	80091d6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	795b      	ldrb	r3, [r3, #5]
 80091bc:	b2db      	uxtb	r3, r3
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d105      	bne.n	80091ce <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2200      	movs	r2, #0
 80091c6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f7ff fc37 	bl	8008a3c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2201      	movs	r2, #1
 80091d2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80091d4:	2300      	movs	r3, #0
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3708      	adds	r7, #8
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}
	...

080091e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b089      	sub	sp, #36	; 0x24
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
 80091e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80091ea:	2300      	movs	r3, #0
 80091ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80091ee:	2300      	movs	r3, #0
 80091f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80091f2:	2300      	movs	r3, #0
 80091f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80091f6:	2300      	movs	r3, #0
 80091f8:	61fb      	str	r3, [r7, #28]
 80091fa:	e16b      	b.n	80094d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80091fc:	2201      	movs	r2, #1
 80091fe:	69fb      	ldr	r3, [r7, #28]
 8009200:	fa02 f303 	lsl.w	r3, r2, r3
 8009204:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	697a      	ldr	r2, [r7, #20]
 800920c:	4013      	ands	r3, r2
 800920e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009210:	693a      	ldr	r2, [r7, #16]
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	429a      	cmp	r2, r3
 8009216:	f040 815a 	bne.w	80094ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	2b01      	cmp	r3, #1
 8009220:	d00b      	beq.n	800923a <HAL_GPIO_Init+0x5a>
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	2b02      	cmp	r3, #2
 8009228:	d007      	beq.n	800923a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800922e:	2b11      	cmp	r3, #17
 8009230:	d003      	beq.n	800923a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	2b12      	cmp	r3, #18
 8009238:	d130      	bne.n	800929c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	689b      	ldr	r3, [r3, #8]
 800923e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009240:	69fb      	ldr	r3, [r7, #28]
 8009242:	005b      	lsls	r3, r3, #1
 8009244:	2203      	movs	r2, #3
 8009246:	fa02 f303 	lsl.w	r3, r2, r3
 800924a:	43db      	mvns	r3, r3
 800924c:	69ba      	ldr	r2, [r7, #24]
 800924e:	4013      	ands	r3, r2
 8009250:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	68da      	ldr	r2, [r3, #12]
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	005b      	lsls	r3, r3, #1
 800925a:	fa02 f303 	lsl.w	r3, r2, r3
 800925e:	69ba      	ldr	r2, [r7, #24]
 8009260:	4313      	orrs	r3, r2
 8009262:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	69ba      	ldr	r2, [r7, #24]
 8009268:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	685b      	ldr	r3, [r3, #4]
 800926e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009270:	2201      	movs	r2, #1
 8009272:	69fb      	ldr	r3, [r7, #28]
 8009274:	fa02 f303 	lsl.w	r3, r2, r3
 8009278:	43db      	mvns	r3, r3
 800927a:	69ba      	ldr	r2, [r7, #24]
 800927c:	4013      	ands	r3, r2
 800927e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	091b      	lsrs	r3, r3, #4
 8009286:	f003 0201 	and.w	r2, r3, #1
 800928a:	69fb      	ldr	r3, [r7, #28]
 800928c:	fa02 f303 	lsl.w	r3, r2, r3
 8009290:	69ba      	ldr	r2, [r7, #24]
 8009292:	4313      	orrs	r3, r2
 8009294:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	69ba      	ldr	r2, [r7, #24]
 800929a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	68db      	ldr	r3, [r3, #12]
 80092a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80092a2:	69fb      	ldr	r3, [r7, #28]
 80092a4:	005b      	lsls	r3, r3, #1
 80092a6:	2203      	movs	r2, #3
 80092a8:	fa02 f303 	lsl.w	r3, r2, r3
 80092ac:	43db      	mvns	r3, r3
 80092ae:	69ba      	ldr	r2, [r7, #24]
 80092b0:	4013      	ands	r3, r2
 80092b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	689a      	ldr	r2, [r3, #8]
 80092b8:	69fb      	ldr	r3, [r7, #28]
 80092ba:	005b      	lsls	r3, r3, #1
 80092bc:	fa02 f303 	lsl.w	r3, r2, r3
 80092c0:	69ba      	ldr	r2, [r7, #24]
 80092c2:	4313      	orrs	r3, r2
 80092c4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	69ba      	ldr	r2, [r7, #24]
 80092ca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	685b      	ldr	r3, [r3, #4]
 80092d0:	2b02      	cmp	r3, #2
 80092d2:	d003      	beq.n	80092dc <HAL_GPIO_Init+0xfc>
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	2b12      	cmp	r3, #18
 80092da:	d123      	bne.n	8009324 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80092dc:	69fb      	ldr	r3, [r7, #28]
 80092de:	08da      	lsrs	r2, r3, #3
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	3208      	adds	r2, #8
 80092e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80092ea:	69fb      	ldr	r3, [r7, #28]
 80092ec:	f003 0307 	and.w	r3, r3, #7
 80092f0:	009b      	lsls	r3, r3, #2
 80092f2:	220f      	movs	r2, #15
 80092f4:	fa02 f303 	lsl.w	r3, r2, r3
 80092f8:	43db      	mvns	r3, r3
 80092fa:	69ba      	ldr	r2, [r7, #24]
 80092fc:	4013      	ands	r3, r2
 80092fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	691a      	ldr	r2, [r3, #16]
 8009304:	69fb      	ldr	r3, [r7, #28]
 8009306:	f003 0307 	and.w	r3, r3, #7
 800930a:	009b      	lsls	r3, r3, #2
 800930c:	fa02 f303 	lsl.w	r3, r2, r3
 8009310:	69ba      	ldr	r2, [r7, #24]
 8009312:	4313      	orrs	r3, r2
 8009314:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009316:	69fb      	ldr	r3, [r7, #28]
 8009318:	08da      	lsrs	r2, r3, #3
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	3208      	adds	r2, #8
 800931e:	69b9      	ldr	r1, [r7, #24]
 8009320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800932a:	69fb      	ldr	r3, [r7, #28]
 800932c:	005b      	lsls	r3, r3, #1
 800932e:	2203      	movs	r2, #3
 8009330:	fa02 f303 	lsl.w	r3, r2, r3
 8009334:	43db      	mvns	r3, r3
 8009336:	69ba      	ldr	r2, [r7, #24]
 8009338:	4013      	ands	r3, r2
 800933a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	f003 0203 	and.w	r2, r3, #3
 8009344:	69fb      	ldr	r3, [r7, #28]
 8009346:	005b      	lsls	r3, r3, #1
 8009348:	fa02 f303 	lsl.w	r3, r2, r3
 800934c:	69ba      	ldr	r2, [r7, #24]
 800934e:	4313      	orrs	r3, r2
 8009350:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	69ba      	ldr	r2, [r7, #24]
 8009356:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009360:	2b00      	cmp	r3, #0
 8009362:	f000 80b4 	beq.w	80094ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009366:	2300      	movs	r3, #0
 8009368:	60fb      	str	r3, [r7, #12]
 800936a:	4b5f      	ldr	r3, [pc, #380]	; (80094e8 <HAL_GPIO_Init+0x308>)
 800936c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800936e:	4a5e      	ldr	r2, [pc, #376]	; (80094e8 <HAL_GPIO_Init+0x308>)
 8009370:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009374:	6453      	str	r3, [r2, #68]	; 0x44
 8009376:	4b5c      	ldr	r3, [pc, #368]	; (80094e8 <HAL_GPIO_Init+0x308>)
 8009378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800937a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800937e:	60fb      	str	r3, [r7, #12]
 8009380:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009382:	4a5a      	ldr	r2, [pc, #360]	; (80094ec <HAL_GPIO_Init+0x30c>)
 8009384:	69fb      	ldr	r3, [r7, #28]
 8009386:	089b      	lsrs	r3, r3, #2
 8009388:	3302      	adds	r3, #2
 800938a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800938e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009390:	69fb      	ldr	r3, [r7, #28]
 8009392:	f003 0303 	and.w	r3, r3, #3
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	220f      	movs	r2, #15
 800939a:	fa02 f303 	lsl.w	r3, r2, r3
 800939e:	43db      	mvns	r3, r3
 80093a0:	69ba      	ldr	r2, [r7, #24]
 80093a2:	4013      	ands	r3, r2
 80093a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	4a51      	ldr	r2, [pc, #324]	; (80094f0 <HAL_GPIO_Init+0x310>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d02b      	beq.n	8009406 <HAL_GPIO_Init+0x226>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	4a50      	ldr	r2, [pc, #320]	; (80094f4 <HAL_GPIO_Init+0x314>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d025      	beq.n	8009402 <HAL_GPIO_Init+0x222>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	4a4f      	ldr	r2, [pc, #316]	; (80094f8 <HAL_GPIO_Init+0x318>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d01f      	beq.n	80093fe <HAL_GPIO_Init+0x21e>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	4a4e      	ldr	r2, [pc, #312]	; (80094fc <HAL_GPIO_Init+0x31c>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d019      	beq.n	80093fa <HAL_GPIO_Init+0x21a>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	4a4d      	ldr	r2, [pc, #308]	; (8009500 <HAL_GPIO_Init+0x320>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d013      	beq.n	80093f6 <HAL_GPIO_Init+0x216>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	4a4c      	ldr	r2, [pc, #304]	; (8009504 <HAL_GPIO_Init+0x324>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d00d      	beq.n	80093f2 <HAL_GPIO_Init+0x212>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	4a4b      	ldr	r2, [pc, #300]	; (8009508 <HAL_GPIO_Init+0x328>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d007      	beq.n	80093ee <HAL_GPIO_Init+0x20e>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	4a4a      	ldr	r2, [pc, #296]	; (800950c <HAL_GPIO_Init+0x32c>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d101      	bne.n	80093ea <HAL_GPIO_Init+0x20a>
 80093e6:	2307      	movs	r3, #7
 80093e8:	e00e      	b.n	8009408 <HAL_GPIO_Init+0x228>
 80093ea:	2308      	movs	r3, #8
 80093ec:	e00c      	b.n	8009408 <HAL_GPIO_Init+0x228>
 80093ee:	2306      	movs	r3, #6
 80093f0:	e00a      	b.n	8009408 <HAL_GPIO_Init+0x228>
 80093f2:	2305      	movs	r3, #5
 80093f4:	e008      	b.n	8009408 <HAL_GPIO_Init+0x228>
 80093f6:	2304      	movs	r3, #4
 80093f8:	e006      	b.n	8009408 <HAL_GPIO_Init+0x228>
 80093fa:	2303      	movs	r3, #3
 80093fc:	e004      	b.n	8009408 <HAL_GPIO_Init+0x228>
 80093fe:	2302      	movs	r3, #2
 8009400:	e002      	b.n	8009408 <HAL_GPIO_Init+0x228>
 8009402:	2301      	movs	r3, #1
 8009404:	e000      	b.n	8009408 <HAL_GPIO_Init+0x228>
 8009406:	2300      	movs	r3, #0
 8009408:	69fa      	ldr	r2, [r7, #28]
 800940a:	f002 0203 	and.w	r2, r2, #3
 800940e:	0092      	lsls	r2, r2, #2
 8009410:	4093      	lsls	r3, r2
 8009412:	69ba      	ldr	r2, [r7, #24]
 8009414:	4313      	orrs	r3, r2
 8009416:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009418:	4934      	ldr	r1, [pc, #208]	; (80094ec <HAL_GPIO_Init+0x30c>)
 800941a:	69fb      	ldr	r3, [r7, #28]
 800941c:	089b      	lsrs	r3, r3, #2
 800941e:	3302      	adds	r3, #2
 8009420:	69ba      	ldr	r2, [r7, #24]
 8009422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009426:	4b3a      	ldr	r3, [pc, #232]	; (8009510 <HAL_GPIO_Init+0x330>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	43db      	mvns	r3, r3
 8009430:	69ba      	ldr	r2, [r7, #24]
 8009432:	4013      	ands	r3, r2
 8009434:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800943e:	2b00      	cmp	r3, #0
 8009440:	d003      	beq.n	800944a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8009442:	69ba      	ldr	r2, [r7, #24]
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	4313      	orrs	r3, r2
 8009448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800944a:	4a31      	ldr	r2, [pc, #196]	; (8009510 <HAL_GPIO_Init+0x330>)
 800944c:	69bb      	ldr	r3, [r7, #24]
 800944e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009450:	4b2f      	ldr	r3, [pc, #188]	; (8009510 <HAL_GPIO_Init+0x330>)
 8009452:	685b      	ldr	r3, [r3, #4]
 8009454:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	43db      	mvns	r3, r3
 800945a:	69ba      	ldr	r2, [r7, #24]
 800945c:	4013      	ands	r3, r2
 800945e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009468:	2b00      	cmp	r3, #0
 800946a:	d003      	beq.n	8009474 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800946c:	69ba      	ldr	r2, [r7, #24]
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	4313      	orrs	r3, r2
 8009472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009474:	4a26      	ldr	r2, [pc, #152]	; (8009510 <HAL_GPIO_Init+0x330>)
 8009476:	69bb      	ldr	r3, [r7, #24]
 8009478:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800947a:	4b25      	ldr	r3, [pc, #148]	; (8009510 <HAL_GPIO_Init+0x330>)
 800947c:	689b      	ldr	r3, [r3, #8]
 800947e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	43db      	mvns	r3, r3
 8009484:	69ba      	ldr	r2, [r7, #24]
 8009486:	4013      	ands	r3, r2
 8009488:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009492:	2b00      	cmp	r3, #0
 8009494:	d003      	beq.n	800949e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8009496:	69ba      	ldr	r2, [r7, #24]
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	4313      	orrs	r3, r2
 800949c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800949e:	4a1c      	ldr	r2, [pc, #112]	; (8009510 <HAL_GPIO_Init+0x330>)
 80094a0:	69bb      	ldr	r3, [r7, #24]
 80094a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80094a4:	4b1a      	ldr	r3, [pc, #104]	; (8009510 <HAL_GPIO_Init+0x330>)
 80094a6:	68db      	ldr	r3, [r3, #12]
 80094a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	43db      	mvns	r3, r3
 80094ae:	69ba      	ldr	r2, [r7, #24]
 80094b0:	4013      	ands	r3, r2
 80094b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	685b      	ldr	r3, [r3, #4]
 80094b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d003      	beq.n	80094c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80094c0:	69ba      	ldr	r2, [r7, #24]
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	4313      	orrs	r3, r2
 80094c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80094c8:	4a11      	ldr	r2, [pc, #68]	; (8009510 <HAL_GPIO_Init+0x330>)
 80094ca:	69bb      	ldr	r3, [r7, #24]
 80094cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80094ce:	69fb      	ldr	r3, [r7, #28]
 80094d0:	3301      	adds	r3, #1
 80094d2:	61fb      	str	r3, [r7, #28]
 80094d4:	69fb      	ldr	r3, [r7, #28]
 80094d6:	2b0f      	cmp	r3, #15
 80094d8:	f67f ae90 	bls.w	80091fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80094dc:	bf00      	nop
 80094de:	3724      	adds	r7, #36	; 0x24
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr
 80094e8:	40023800 	.word	0x40023800
 80094ec:	40013800 	.word	0x40013800
 80094f0:	40020000 	.word	0x40020000
 80094f4:	40020400 	.word	0x40020400
 80094f8:	40020800 	.word	0x40020800
 80094fc:	40020c00 	.word	0x40020c00
 8009500:	40021000 	.word	0x40021000
 8009504:	40021400 	.word	0x40021400
 8009508:	40021800 	.word	0x40021800
 800950c:	40021c00 	.word	0x40021c00
 8009510:	40013c00 	.word	0x40013c00

08009514 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009514:	b480      	push	{r7}
 8009516:	b083      	sub	sp, #12
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	460b      	mov	r3, r1
 800951e:	807b      	strh	r3, [r7, #2]
 8009520:	4613      	mov	r3, r2
 8009522:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009524:	787b      	ldrb	r3, [r7, #1]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d003      	beq.n	8009532 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800952a:	887a      	ldrh	r2, [r7, #2]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009530:	e003      	b.n	800953a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009532:	887b      	ldrh	r3, [r7, #2]
 8009534:	041a      	lsls	r2, r3, #16
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	619a      	str	r2, [r3, #24]
}
 800953a:	bf00      	nop
 800953c:	370c      	adds	r7, #12
 800953e:	46bd      	mov	sp, r7
 8009540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009544:	4770      	bx	lr

08009546 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009546:	b480      	push	{r7}
 8009548:	b083      	sub	sp, #12
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
 800954e:	460b      	mov	r3, r1
 8009550:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	695a      	ldr	r2, [r3, #20]
 8009556:	887b      	ldrh	r3, [r7, #2]
 8009558:	401a      	ands	r2, r3
 800955a:	887b      	ldrh	r3, [r7, #2]
 800955c:	429a      	cmp	r2, r3
 800955e:	d104      	bne.n	800956a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009560:	887b      	ldrh	r3, [r7, #2]
 8009562:	041a      	lsls	r2, r3, #16
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8009568:	e002      	b.n	8009570 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800956a:	887a      	ldrh	r2, [r7, #2]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	619a      	str	r2, [r3, #24]
}
 8009570:	bf00      	nop
 8009572:	370c      	adds	r7, #12
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr

0800957c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800957c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800957e:	b08f      	sub	sp, #60	; 0x3c
 8009580:	af0a      	add	r7, sp, #40	; 0x28
 8009582:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d101      	bne.n	800958e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800958a:	2301      	movs	r3, #1
 800958c:	e054      	b.n	8009638 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800959a:	b2db      	uxtb	r3, r3
 800959c:	2b00      	cmp	r3, #0
 800959e:	d106      	bne.n	80095ae <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2200      	movs	r2, #0
 80095a4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f005 fd07 	bl	800efbc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2203      	movs	r2, #3
 80095b2:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d102      	bne.n	80095c8 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2200      	movs	r2, #0
 80095c6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4618      	mov	r0, r3
 80095ce:	f003 fda5 	bl	800d11c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	603b      	str	r3, [r7, #0]
 80095d8:	687e      	ldr	r6, [r7, #4]
 80095da:	466d      	mov	r5, sp
 80095dc:	f106 0410 	add.w	r4, r6, #16
 80095e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80095e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80095e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80095e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80095e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80095ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80095f0:	1d33      	adds	r3, r6, #4
 80095f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80095f4:	6838      	ldr	r0, [r7, #0]
 80095f6:	f003 fd1f 	bl	800d038 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	2101      	movs	r1, #1
 8009600:	4618      	mov	r0, r3
 8009602:	f003 fd9c 	bl	800d13e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	603b      	str	r3, [r7, #0]
 800960c:	687e      	ldr	r6, [r7, #4]
 800960e:	466d      	mov	r5, sp
 8009610:	f106 0410 	add.w	r4, r6, #16
 8009614:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009616:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009618:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800961a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800961c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009620:	e885 0003 	stmia.w	r5, {r0, r1}
 8009624:	1d33      	adds	r3, r6, #4
 8009626:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009628:	6838      	ldr	r0, [r7, #0]
 800962a:	f003 feaf 	bl	800d38c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2201      	movs	r2, #1
 8009632:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8009636:	2300      	movs	r3, #0
}
 8009638:	4618      	mov	r0, r3
 800963a:	3714      	adds	r7, #20
 800963c:	46bd      	mov	sp, r7
 800963e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009640 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8009640:	b590      	push	{r4, r7, lr}
 8009642:	b089      	sub	sp, #36	; 0x24
 8009644:	af04      	add	r7, sp, #16
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	4608      	mov	r0, r1
 800964a:	4611      	mov	r1, r2
 800964c:	461a      	mov	r2, r3
 800964e:	4603      	mov	r3, r0
 8009650:	70fb      	strb	r3, [r7, #3]
 8009652:	460b      	mov	r3, r1
 8009654:	70bb      	strb	r3, [r7, #2]
 8009656:	4613      	mov	r3, r2
 8009658:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8009660:	2b01      	cmp	r3, #1
 8009662:	d101      	bne.n	8009668 <HAL_HCD_HC_Init+0x28>
 8009664:	2302      	movs	r3, #2
 8009666:	e07f      	b.n	8009768 <HAL_HCD_HC_Init+0x128>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2201      	movs	r2, #1
 800966c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8009670:	78fa      	ldrb	r2, [r7, #3]
 8009672:	6879      	ldr	r1, [r7, #4]
 8009674:	4613      	mov	r3, r2
 8009676:	009b      	lsls	r3, r3, #2
 8009678:	4413      	add	r3, r2
 800967a:	00db      	lsls	r3, r3, #3
 800967c:	440b      	add	r3, r1
 800967e:	333d      	adds	r3, #61	; 0x3d
 8009680:	2200      	movs	r2, #0
 8009682:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8009684:	78fa      	ldrb	r2, [r7, #3]
 8009686:	6879      	ldr	r1, [r7, #4]
 8009688:	4613      	mov	r3, r2
 800968a:	009b      	lsls	r3, r3, #2
 800968c:	4413      	add	r3, r2
 800968e:	00db      	lsls	r3, r3, #3
 8009690:	440b      	add	r3, r1
 8009692:	3338      	adds	r3, #56	; 0x38
 8009694:	787a      	ldrb	r2, [r7, #1]
 8009696:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8009698:	78fa      	ldrb	r2, [r7, #3]
 800969a:	6879      	ldr	r1, [r7, #4]
 800969c:	4613      	mov	r3, r2
 800969e:	009b      	lsls	r3, r3, #2
 80096a0:	4413      	add	r3, r2
 80096a2:	00db      	lsls	r3, r3, #3
 80096a4:	440b      	add	r3, r1
 80096a6:	3340      	adds	r3, #64	; 0x40
 80096a8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80096aa:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80096ac:	78fa      	ldrb	r2, [r7, #3]
 80096ae:	6879      	ldr	r1, [r7, #4]
 80096b0:	4613      	mov	r3, r2
 80096b2:	009b      	lsls	r3, r3, #2
 80096b4:	4413      	add	r3, r2
 80096b6:	00db      	lsls	r3, r3, #3
 80096b8:	440b      	add	r3, r1
 80096ba:	3339      	adds	r3, #57	; 0x39
 80096bc:	78fa      	ldrb	r2, [r7, #3]
 80096be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80096c0:	78fa      	ldrb	r2, [r7, #3]
 80096c2:	6879      	ldr	r1, [r7, #4]
 80096c4:	4613      	mov	r3, r2
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	4413      	add	r3, r2
 80096ca:	00db      	lsls	r3, r3, #3
 80096cc:	440b      	add	r3, r1
 80096ce:	333f      	adds	r3, #63	; 0x3f
 80096d0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80096d4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80096d6:	78fa      	ldrb	r2, [r7, #3]
 80096d8:	78bb      	ldrb	r3, [r7, #2]
 80096da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096de:	b2d8      	uxtb	r0, r3
 80096e0:	6879      	ldr	r1, [r7, #4]
 80096e2:	4613      	mov	r3, r2
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	4413      	add	r3, r2
 80096e8:	00db      	lsls	r3, r3, #3
 80096ea:	440b      	add	r3, r1
 80096ec:	333a      	adds	r3, #58	; 0x3a
 80096ee:	4602      	mov	r2, r0
 80096f0:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80096f2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	da0a      	bge.n	8009710 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80096fa:	78fa      	ldrb	r2, [r7, #3]
 80096fc:	6879      	ldr	r1, [r7, #4]
 80096fe:	4613      	mov	r3, r2
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	4413      	add	r3, r2
 8009704:	00db      	lsls	r3, r3, #3
 8009706:	440b      	add	r3, r1
 8009708:	333b      	adds	r3, #59	; 0x3b
 800970a:	2201      	movs	r2, #1
 800970c:	701a      	strb	r2, [r3, #0]
 800970e:	e009      	b.n	8009724 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8009710:	78fa      	ldrb	r2, [r7, #3]
 8009712:	6879      	ldr	r1, [r7, #4]
 8009714:	4613      	mov	r3, r2
 8009716:	009b      	lsls	r3, r3, #2
 8009718:	4413      	add	r3, r2
 800971a:	00db      	lsls	r3, r3, #3
 800971c:	440b      	add	r3, r1
 800971e:	333b      	adds	r3, #59	; 0x3b
 8009720:	2200      	movs	r2, #0
 8009722:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8009724:	78fa      	ldrb	r2, [r7, #3]
 8009726:	6879      	ldr	r1, [r7, #4]
 8009728:	4613      	mov	r3, r2
 800972a:	009b      	lsls	r3, r3, #2
 800972c:	4413      	add	r3, r2
 800972e:	00db      	lsls	r3, r3, #3
 8009730:	440b      	add	r3, r1
 8009732:	333c      	adds	r3, #60	; 0x3c
 8009734:	f897 2020 	ldrb.w	r2, [r7, #32]
 8009738:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6818      	ldr	r0, [r3, #0]
 800973e:	787c      	ldrb	r4, [r7, #1]
 8009740:	78ba      	ldrb	r2, [r7, #2]
 8009742:	78f9      	ldrb	r1, [r7, #3]
 8009744:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009746:	9302      	str	r3, [sp, #8]
 8009748:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800974c:	9301      	str	r3, [sp, #4]
 800974e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009752:	9300      	str	r3, [sp, #0]
 8009754:	4623      	mov	r3, r4
 8009756:	f003 ff59 	bl	800d60c <USB_HC_Init>
 800975a:	4603      	mov	r3, r0
 800975c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2200      	movs	r2, #0
 8009762:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8009766:	7bfb      	ldrb	r3, [r7, #15]
}
 8009768:	4618      	mov	r0, r3
 800976a:	3714      	adds	r7, #20
 800976c:	46bd      	mov	sp, r7
 800976e:	bd90      	pop	{r4, r7, pc}

08009770 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	460b      	mov	r3, r1
 800977a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800977c:	2300      	movs	r3, #0
 800977e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8009786:	2b01      	cmp	r3, #1
 8009788:	d101      	bne.n	800978e <HAL_HCD_HC_Halt+0x1e>
 800978a:	2302      	movs	r3, #2
 800978c:	e00f      	b.n	80097ae <HAL_HCD_HC_Halt+0x3e>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2201      	movs	r2, #1
 8009792:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	78fa      	ldrb	r2, [r7, #3]
 800979c:	4611      	mov	r1, r2
 800979e:	4618      	mov	r0, r3
 80097a0:	f004 f995 	bl	800dace <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2200      	movs	r2, #0
 80097a8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80097ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3710      	adds	r7, #16
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}
	...

080097b8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b082      	sub	sp, #8
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	4608      	mov	r0, r1
 80097c2:	4611      	mov	r1, r2
 80097c4:	461a      	mov	r2, r3
 80097c6:	4603      	mov	r3, r0
 80097c8:	70fb      	strb	r3, [r7, #3]
 80097ca:	460b      	mov	r3, r1
 80097cc:	70bb      	strb	r3, [r7, #2]
 80097ce:	4613      	mov	r3, r2
 80097d0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80097d2:	78fa      	ldrb	r2, [r7, #3]
 80097d4:	6879      	ldr	r1, [r7, #4]
 80097d6:	4613      	mov	r3, r2
 80097d8:	009b      	lsls	r3, r3, #2
 80097da:	4413      	add	r3, r2
 80097dc:	00db      	lsls	r3, r3, #3
 80097de:	440b      	add	r3, r1
 80097e0:	333b      	adds	r3, #59	; 0x3b
 80097e2:	78ba      	ldrb	r2, [r7, #2]
 80097e4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80097e6:	78fa      	ldrb	r2, [r7, #3]
 80097e8:	6879      	ldr	r1, [r7, #4]
 80097ea:	4613      	mov	r3, r2
 80097ec:	009b      	lsls	r3, r3, #2
 80097ee:	4413      	add	r3, r2
 80097f0:	00db      	lsls	r3, r3, #3
 80097f2:	440b      	add	r3, r1
 80097f4:	333f      	adds	r3, #63	; 0x3f
 80097f6:	787a      	ldrb	r2, [r7, #1]
 80097f8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80097fa:	7c3b      	ldrb	r3, [r7, #16]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d114      	bne.n	800982a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8009800:	78fa      	ldrb	r2, [r7, #3]
 8009802:	6879      	ldr	r1, [r7, #4]
 8009804:	4613      	mov	r3, r2
 8009806:	009b      	lsls	r3, r3, #2
 8009808:	4413      	add	r3, r2
 800980a:	00db      	lsls	r3, r3, #3
 800980c:	440b      	add	r3, r1
 800980e:	3342      	adds	r3, #66	; 0x42
 8009810:	2203      	movs	r2, #3
 8009812:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8009814:	78fa      	ldrb	r2, [r7, #3]
 8009816:	6879      	ldr	r1, [r7, #4]
 8009818:	4613      	mov	r3, r2
 800981a:	009b      	lsls	r3, r3, #2
 800981c:	4413      	add	r3, r2
 800981e:	00db      	lsls	r3, r3, #3
 8009820:	440b      	add	r3, r1
 8009822:	333d      	adds	r3, #61	; 0x3d
 8009824:	7f3a      	ldrb	r2, [r7, #28]
 8009826:	701a      	strb	r2, [r3, #0]
 8009828:	e009      	b.n	800983e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800982a:	78fa      	ldrb	r2, [r7, #3]
 800982c:	6879      	ldr	r1, [r7, #4]
 800982e:	4613      	mov	r3, r2
 8009830:	009b      	lsls	r3, r3, #2
 8009832:	4413      	add	r3, r2
 8009834:	00db      	lsls	r3, r3, #3
 8009836:	440b      	add	r3, r1
 8009838:	3342      	adds	r3, #66	; 0x42
 800983a:	2202      	movs	r2, #2
 800983c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800983e:	787b      	ldrb	r3, [r7, #1]
 8009840:	2b03      	cmp	r3, #3
 8009842:	f200 80d6 	bhi.w	80099f2 <HAL_HCD_HC_SubmitRequest+0x23a>
 8009846:	a201      	add	r2, pc, #4	; (adr r2, 800984c <HAL_HCD_HC_SubmitRequest+0x94>)
 8009848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800984c:	0800985d 	.word	0x0800985d
 8009850:	080099dd 	.word	0x080099dd
 8009854:	080098c9 	.word	0x080098c9
 8009858:	08009953 	.word	0x08009953
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800985c:	7c3b      	ldrb	r3, [r7, #16]
 800985e:	2b01      	cmp	r3, #1
 8009860:	f040 80c9 	bne.w	80099f6 <HAL_HCD_HC_SubmitRequest+0x23e>
 8009864:	78bb      	ldrb	r3, [r7, #2]
 8009866:	2b00      	cmp	r3, #0
 8009868:	f040 80c5 	bne.w	80099f6 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 800986c:	8b3b      	ldrh	r3, [r7, #24]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d109      	bne.n	8009886 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8009872:	78fa      	ldrb	r2, [r7, #3]
 8009874:	6879      	ldr	r1, [r7, #4]
 8009876:	4613      	mov	r3, r2
 8009878:	009b      	lsls	r3, r3, #2
 800987a:	4413      	add	r3, r2
 800987c:	00db      	lsls	r3, r3, #3
 800987e:	440b      	add	r3, r1
 8009880:	3351      	adds	r3, #81	; 0x51
 8009882:	2201      	movs	r2, #1
 8009884:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8009886:	78fa      	ldrb	r2, [r7, #3]
 8009888:	6879      	ldr	r1, [r7, #4]
 800988a:	4613      	mov	r3, r2
 800988c:	009b      	lsls	r3, r3, #2
 800988e:	4413      	add	r3, r2
 8009890:	00db      	lsls	r3, r3, #3
 8009892:	440b      	add	r3, r1
 8009894:	3351      	adds	r3, #81	; 0x51
 8009896:	781b      	ldrb	r3, [r3, #0]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d10a      	bne.n	80098b2 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800989c:	78fa      	ldrb	r2, [r7, #3]
 800989e:	6879      	ldr	r1, [r7, #4]
 80098a0:	4613      	mov	r3, r2
 80098a2:	009b      	lsls	r3, r3, #2
 80098a4:	4413      	add	r3, r2
 80098a6:	00db      	lsls	r3, r3, #3
 80098a8:	440b      	add	r3, r1
 80098aa:	3342      	adds	r3, #66	; 0x42
 80098ac:	2200      	movs	r2, #0
 80098ae:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80098b0:	e0a1      	b.n	80099f6 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80098b2:	78fa      	ldrb	r2, [r7, #3]
 80098b4:	6879      	ldr	r1, [r7, #4]
 80098b6:	4613      	mov	r3, r2
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	4413      	add	r3, r2
 80098bc:	00db      	lsls	r3, r3, #3
 80098be:	440b      	add	r3, r1
 80098c0:	3342      	adds	r3, #66	; 0x42
 80098c2:	2202      	movs	r2, #2
 80098c4:	701a      	strb	r2, [r3, #0]
      break;
 80098c6:	e096      	b.n	80099f6 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80098c8:	78bb      	ldrb	r3, [r7, #2]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d120      	bne.n	8009910 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80098ce:	78fa      	ldrb	r2, [r7, #3]
 80098d0:	6879      	ldr	r1, [r7, #4]
 80098d2:	4613      	mov	r3, r2
 80098d4:	009b      	lsls	r3, r3, #2
 80098d6:	4413      	add	r3, r2
 80098d8:	00db      	lsls	r3, r3, #3
 80098da:	440b      	add	r3, r1
 80098dc:	3351      	adds	r3, #81	; 0x51
 80098de:	781b      	ldrb	r3, [r3, #0]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d10a      	bne.n	80098fa <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80098e4:	78fa      	ldrb	r2, [r7, #3]
 80098e6:	6879      	ldr	r1, [r7, #4]
 80098e8:	4613      	mov	r3, r2
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	4413      	add	r3, r2
 80098ee:	00db      	lsls	r3, r3, #3
 80098f0:	440b      	add	r3, r1
 80098f2:	3342      	adds	r3, #66	; 0x42
 80098f4:	2200      	movs	r2, #0
 80098f6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80098f8:	e07e      	b.n	80099f8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80098fa:	78fa      	ldrb	r2, [r7, #3]
 80098fc:	6879      	ldr	r1, [r7, #4]
 80098fe:	4613      	mov	r3, r2
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	4413      	add	r3, r2
 8009904:	00db      	lsls	r3, r3, #3
 8009906:	440b      	add	r3, r1
 8009908:	3342      	adds	r3, #66	; 0x42
 800990a:	2202      	movs	r2, #2
 800990c:	701a      	strb	r2, [r3, #0]
      break;
 800990e:	e073      	b.n	80099f8 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8009910:	78fa      	ldrb	r2, [r7, #3]
 8009912:	6879      	ldr	r1, [r7, #4]
 8009914:	4613      	mov	r3, r2
 8009916:	009b      	lsls	r3, r3, #2
 8009918:	4413      	add	r3, r2
 800991a:	00db      	lsls	r3, r3, #3
 800991c:	440b      	add	r3, r1
 800991e:	3350      	adds	r3, #80	; 0x50
 8009920:	781b      	ldrb	r3, [r3, #0]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d10a      	bne.n	800993c <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009926:	78fa      	ldrb	r2, [r7, #3]
 8009928:	6879      	ldr	r1, [r7, #4]
 800992a:	4613      	mov	r3, r2
 800992c:	009b      	lsls	r3, r3, #2
 800992e:	4413      	add	r3, r2
 8009930:	00db      	lsls	r3, r3, #3
 8009932:	440b      	add	r3, r1
 8009934:	3342      	adds	r3, #66	; 0x42
 8009936:	2200      	movs	r2, #0
 8009938:	701a      	strb	r2, [r3, #0]
      break;
 800993a:	e05d      	b.n	80099f8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800993c:	78fa      	ldrb	r2, [r7, #3]
 800993e:	6879      	ldr	r1, [r7, #4]
 8009940:	4613      	mov	r3, r2
 8009942:	009b      	lsls	r3, r3, #2
 8009944:	4413      	add	r3, r2
 8009946:	00db      	lsls	r3, r3, #3
 8009948:	440b      	add	r3, r1
 800994a:	3342      	adds	r3, #66	; 0x42
 800994c:	2202      	movs	r2, #2
 800994e:	701a      	strb	r2, [r3, #0]
      break;
 8009950:	e052      	b.n	80099f8 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8009952:	78bb      	ldrb	r3, [r7, #2]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d120      	bne.n	800999a <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8009958:	78fa      	ldrb	r2, [r7, #3]
 800995a:	6879      	ldr	r1, [r7, #4]
 800995c:	4613      	mov	r3, r2
 800995e:	009b      	lsls	r3, r3, #2
 8009960:	4413      	add	r3, r2
 8009962:	00db      	lsls	r3, r3, #3
 8009964:	440b      	add	r3, r1
 8009966:	3351      	adds	r3, #81	; 0x51
 8009968:	781b      	ldrb	r3, [r3, #0]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d10a      	bne.n	8009984 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800996e:	78fa      	ldrb	r2, [r7, #3]
 8009970:	6879      	ldr	r1, [r7, #4]
 8009972:	4613      	mov	r3, r2
 8009974:	009b      	lsls	r3, r3, #2
 8009976:	4413      	add	r3, r2
 8009978:	00db      	lsls	r3, r3, #3
 800997a:	440b      	add	r3, r1
 800997c:	3342      	adds	r3, #66	; 0x42
 800997e:	2200      	movs	r2, #0
 8009980:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8009982:	e039      	b.n	80099f8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009984:	78fa      	ldrb	r2, [r7, #3]
 8009986:	6879      	ldr	r1, [r7, #4]
 8009988:	4613      	mov	r3, r2
 800998a:	009b      	lsls	r3, r3, #2
 800998c:	4413      	add	r3, r2
 800998e:	00db      	lsls	r3, r3, #3
 8009990:	440b      	add	r3, r1
 8009992:	3342      	adds	r3, #66	; 0x42
 8009994:	2202      	movs	r2, #2
 8009996:	701a      	strb	r2, [r3, #0]
      break;
 8009998:	e02e      	b.n	80099f8 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800999a:	78fa      	ldrb	r2, [r7, #3]
 800999c:	6879      	ldr	r1, [r7, #4]
 800999e:	4613      	mov	r3, r2
 80099a0:	009b      	lsls	r3, r3, #2
 80099a2:	4413      	add	r3, r2
 80099a4:	00db      	lsls	r3, r3, #3
 80099a6:	440b      	add	r3, r1
 80099a8:	3350      	adds	r3, #80	; 0x50
 80099aa:	781b      	ldrb	r3, [r3, #0]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d10a      	bne.n	80099c6 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80099b0:	78fa      	ldrb	r2, [r7, #3]
 80099b2:	6879      	ldr	r1, [r7, #4]
 80099b4:	4613      	mov	r3, r2
 80099b6:	009b      	lsls	r3, r3, #2
 80099b8:	4413      	add	r3, r2
 80099ba:	00db      	lsls	r3, r3, #3
 80099bc:	440b      	add	r3, r1
 80099be:	3342      	adds	r3, #66	; 0x42
 80099c0:	2200      	movs	r2, #0
 80099c2:	701a      	strb	r2, [r3, #0]
      break;
 80099c4:	e018      	b.n	80099f8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80099c6:	78fa      	ldrb	r2, [r7, #3]
 80099c8:	6879      	ldr	r1, [r7, #4]
 80099ca:	4613      	mov	r3, r2
 80099cc:	009b      	lsls	r3, r3, #2
 80099ce:	4413      	add	r3, r2
 80099d0:	00db      	lsls	r3, r3, #3
 80099d2:	440b      	add	r3, r1
 80099d4:	3342      	adds	r3, #66	; 0x42
 80099d6:	2202      	movs	r2, #2
 80099d8:	701a      	strb	r2, [r3, #0]
      break;
 80099da:	e00d      	b.n	80099f8 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80099dc:	78fa      	ldrb	r2, [r7, #3]
 80099de:	6879      	ldr	r1, [r7, #4]
 80099e0:	4613      	mov	r3, r2
 80099e2:	009b      	lsls	r3, r3, #2
 80099e4:	4413      	add	r3, r2
 80099e6:	00db      	lsls	r3, r3, #3
 80099e8:	440b      	add	r3, r1
 80099ea:	3342      	adds	r3, #66	; 0x42
 80099ec:	2200      	movs	r2, #0
 80099ee:	701a      	strb	r2, [r3, #0]
      break;
 80099f0:	e002      	b.n	80099f8 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 80099f2:	bf00      	nop
 80099f4:	e000      	b.n	80099f8 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 80099f6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80099f8:	78fa      	ldrb	r2, [r7, #3]
 80099fa:	6879      	ldr	r1, [r7, #4]
 80099fc:	4613      	mov	r3, r2
 80099fe:	009b      	lsls	r3, r3, #2
 8009a00:	4413      	add	r3, r2
 8009a02:	00db      	lsls	r3, r3, #3
 8009a04:	440b      	add	r3, r1
 8009a06:	3344      	adds	r3, #68	; 0x44
 8009a08:	697a      	ldr	r2, [r7, #20]
 8009a0a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8009a0c:	78fa      	ldrb	r2, [r7, #3]
 8009a0e:	8b39      	ldrh	r1, [r7, #24]
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	4613      	mov	r3, r2
 8009a14:	009b      	lsls	r3, r3, #2
 8009a16:	4413      	add	r3, r2
 8009a18:	00db      	lsls	r3, r3, #3
 8009a1a:	4403      	add	r3, r0
 8009a1c:	3348      	adds	r3, #72	; 0x48
 8009a1e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8009a20:	78fa      	ldrb	r2, [r7, #3]
 8009a22:	6879      	ldr	r1, [r7, #4]
 8009a24:	4613      	mov	r3, r2
 8009a26:	009b      	lsls	r3, r3, #2
 8009a28:	4413      	add	r3, r2
 8009a2a:	00db      	lsls	r3, r3, #3
 8009a2c:	440b      	add	r3, r1
 8009a2e:	335c      	adds	r3, #92	; 0x5c
 8009a30:	2200      	movs	r2, #0
 8009a32:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8009a34:	78fa      	ldrb	r2, [r7, #3]
 8009a36:	6879      	ldr	r1, [r7, #4]
 8009a38:	4613      	mov	r3, r2
 8009a3a:	009b      	lsls	r3, r3, #2
 8009a3c:	4413      	add	r3, r2
 8009a3e:	00db      	lsls	r3, r3, #3
 8009a40:	440b      	add	r3, r1
 8009a42:	334c      	adds	r3, #76	; 0x4c
 8009a44:	2200      	movs	r2, #0
 8009a46:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8009a48:	78fa      	ldrb	r2, [r7, #3]
 8009a4a:	6879      	ldr	r1, [r7, #4]
 8009a4c:	4613      	mov	r3, r2
 8009a4e:	009b      	lsls	r3, r3, #2
 8009a50:	4413      	add	r3, r2
 8009a52:	00db      	lsls	r3, r3, #3
 8009a54:	440b      	add	r3, r1
 8009a56:	3339      	adds	r3, #57	; 0x39
 8009a58:	78fa      	ldrb	r2, [r7, #3]
 8009a5a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8009a5c:	78fa      	ldrb	r2, [r7, #3]
 8009a5e:	6879      	ldr	r1, [r7, #4]
 8009a60:	4613      	mov	r3, r2
 8009a62:	009b      	lsls	r3, r3, #2
 8009a64:	4413      	add	r3, r2
 8009a66:	00db      	lsls	r3, r3, #3
 8009a68:	440b      	add	r3, r1
 8009a6a:	335d      	adds	r3, #93	; 0x5d
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6818      	ldr	r0, [r3, #0]
 8009a74:	78fa      	ldrb	r2, [r7, #3]
 8009a76:	4613      	mov	r3, r2
 8009a78:	009b      	lsls	r3, r3, #2
 8009a7a:	4413      	add	r3, r2
 8009a7c:	00db      	lsls	r3, r3, #3
 8009a7e:	3338      	adds	r3, #56	; 0x38
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	18d1      	adds	r1, r2, r3
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	691b      	ldr	r3, [r3, #16]
 8009a88:	b2db      	uxtb	r3, r3
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	f003 fec8 	bl	800d820 <USB_HC_StartXfer>
 8009a90:	4603      	mov	r3, r0
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3708      	adds	r7, #8
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}
 8009a9a:	bf00      	nop

08009a9c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b086      	sub	sp, #24
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f003 fc27 	bl	800d306 <USB_GetMode>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	f040 80ef 	bne.w	8009c9e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f003 fc0b 	bl	800d2e0 <USB_ReadInterrupts>
 8009aca:	4603      	mov	r3, r0
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	f000 80e5 	beq.w	8009c9c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f003 fc02 	bl	800d2e0 <USB_ReadInterrupts>
 8009adc:	4603      	mov	r3, r0
 8009ade:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009ae2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009ae6:	d104      	bne.n	8009af2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009af0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4618      	mov	r0, r3
 8009af8:	f003 fbf2 	bl	800d2e0 <USB_ReadInterrupts>
 8009afc:	4603      	mov	r3, r0
 8009afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009b02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b06:	d104      	bne.n	8009b12 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009b10:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	4618      	mov	r0, r3
 8009b18:	f003 fbe2 	bl	800d2e0 <USB_ReadInterrupts>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009b22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009b26:	d104      	bne.n	8009b32 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8009b30:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4618      	mov	r0, r3
 8009b38:	f003 fbd2 	bl	800d2e0 <USB_ReadInterrupts>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	f003 0302 	and.w	r3, r3, #2
 8009b42:	2b02      	cmp	r3, #2
 8009b44:	d103      	bne.n	8009b4e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	2202      	movs	r2, #2
 8009b4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	4618      	mov	r0, r3
 8009b54:	f003 fbc4 	bl	800d2e0 <USB_ReadInterrupts>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b62:	d115      	bne.n	8009b90 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8009b6c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f003 0301 	and.w	r3, r3, #1
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d108      	bne.n	8009b90 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f005 fa9a 	bl	800f0b8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	2101      	movs	r1, #1
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f003 fcba 	bl	800d504 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	4618      	mov	r0, r3
 8009b96:	f003 fba3 	bl	800d2e0 <USB_ReadInterrupts>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009ba0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009ba4:	d102      	bne.n	8009bac <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f001 f94a 	bl	800ae40 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f003 fb95 	bl	800d2e0 <USB_ReadInterrupts>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	f003 0308 	and.w	r3, r3, #8
 8009bbc:	2b08      	cmp	r3, #8
 8009bbe:	d106      	bne.n	8009bce <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f005 fa5d 	bl	800f080 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	2208      	movs	r2, #8
 8009bcc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f003 fb84 	bl	800d2e0 <USB_ReadInterrupts>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009bde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009be2:	d138      	bne.n	8009c56 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4618      	mov	r0, r3
 8009bea:	f003 ff5f 	bl	800daac <USB_HC_ReadInterrupt>
 8009bee:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	617b      	str	r3, [r7, #20]
 8009bf4:	e025      	b.n	8009c42 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	f003 030f 	and.w	r3, r3, #15
 8009bfc:	68ba      	ldr	r2, [r7, #8]
 8009bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8009c02:	f003 0301 	and.w	r3, r3, #1
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d018      	beq.n	8009c3c <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	015a      	lsls	r2, r3, #5
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	4413      	add	r3, r2
 8009c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c20:	d106      	bne.n	8009c30 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	b2db      	uxtb	r3, r3
 8009c26:	4619      	mov	r1, r3
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f000 f8b3 	bl	8009d94 <HCD_HC_IN_IRQHandler>
 8009c2e:	e005      	b.n	8009c3c <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	b2db      	uxtb	r3, r3
 8009c34:	4619      	mov	r1, r3
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f000 fce1 	bl	800a5fe <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	3301      	adds	r3, #1
 8009c40:	617b      	str	r3, [r7, #20]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	689b      	ldr	r3, [r3, #8]
 8009c46:	697a      	ldr	r2, [r7, #20]
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	d3d4      	bcc.n	8009bf6 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009c54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f003 fb40 	bl	800d2e0 <USB_ReadInterrupts>
 8009c60:	4603      	mov	r3, r0
 8009c62:	f003 0310 	and.w	r3, r3, #16
 8009c66:	2b10      	cmp	r3, #16
 8009c68:	d101      	bne.n	8009c6e <HAL_HCD_IRQHandler+0x1d2>
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	e000      	b.n	8009c70 <HAL_HCD_IRQHandler+0x1d4>
 8009c6e:	2300      	movs	r3, #0
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d014      	beq.n	8009c9e <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	699a      	ldr	r2, [r3, #24]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f022 0210 	bic.w	r2, r2, #16
 8009c82:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f001 f82f 	bl	800ace8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	699a      	ldr	r2, [r3, #24]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f042 0210 	orr.w	r2, r2, #16
 8009c98:	619a      	str	r2, [r3, #24]
 8009c9a:	e000      	b.n	8009c9e <HAL_HCD_IRQHandler+0x202>
      return;
 8009c9c:	bf00      	nop
    }
  }
}
 8009c9e:	3718      	adds	r7, #24
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b082      	sub	sp, #8
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d101      	bne.n	8009cba <HAL_HCD_Start+0x16>
 8009cb6:	2302      	movs	r3, #2
 8009cb8:	e013      	b.n	8009ce2 <HAL_HCD_Start+0x3e>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2201      	movs	r2, #1
 8009cbe:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f003 fa17 	bl	800d0fa <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	2101      	movs	r1, #1
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f003 fc50 	bl	800d578 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8009ce0:	2300      	movs	r3, #0
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3708      	adds	r7, #8
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}

08009cea <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8009cea:	b580      	push	{r7, lr}
 8009cec:	b082      	sub	sp, #8
 8009cee:	af00      	add	r7, sp, #0
 8009cf0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8009cf8:	2b01      	cmp	r3, #1
 8009cfa:	d101      	bne.n	8009d00 <HAL_HCD_Stop+0x16>
 8009cfc:	2302      	movs	r3, #2
 8009cfe:	e00d      	b.n	8009d1c <HAL_HCD_Stop+0x32>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2201      	movs	r2, #1
 8009d04:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f004 f819 	bl	800dd44 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2200      	movs	r2, #0
 8009d16:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8009d1a:	2300      	movs	r3, #0
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3708      	adds	r7, #8
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b083      	sub	sp, #12
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
 8009d2c:	460b      	mov	r3, r1
 8009d2e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8009d30:	78fa      	ldrb	r2, [r7, #3]
 8009d32:	6879      	ldr	r1, [r7, #4]
 8009d34:	4613      	mov	r3, r2
 8009d36:	009b      	lsls	r3, r3, #2
 8009d38:	4413      	add	r3, r2
 8009d3a:	00db      	lsls	r3, r3, #3
 8009d3c:	440b      	add	r3, r1
 8009d3e:	335c      	adds	r3, #92	; 0x5c
 8009d40:	781b      	ldrb	r3, [r3, #0]
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	370c      	adds	r7, #12
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr

08009d4e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009d4e:	b480      	push	{r7}
 8009d50:	b083      	sub	sp, #12
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	6078      	str	r0, [r7, #4]
 8009d56:	460b      	mov	r3, r1
 8009d58:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8009d5a:	78fa      	ldrb	r2, [r7, #3]
 8009d5c:	6879      	ldr	r1, [r7, #4]
 8009d5e:	4613      	mov	r3, r2
 8009d60:	009b      	lsls	r3, r3, #2
 8009d62:	4413      	add	r3, r2
 8009d64:	00db      	lsls	r3, r3, #3
 8009d66:	440b      	add	r3, r1
 8009d68:	334c      	adds	r3, #76	; 0x4c
 8009d6a:	681b      	ldr	r3, [r3, #0]
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	370c      	adds	r7, #12
 8009d70:	46bd      	mov	sp, r7
 8009d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d76:	4770      	bx	lr

08009d78 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b082      	sub	sp, #8
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4618      	mov	r0, r3
 8009d86:	f003 fc30 	bl	800d5ea <USB_GetCurrentFrame>
 8009d8a:	4603      	mov	r3, r0
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3708      	adds	r7, #8
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b086      	sub	sp, #24
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	460b      	mov	r3, r1
 8009d9e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8009daa:	78fb      	ldrb	r3, [r7, #3]
 8009dac:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	015a      	lsls	r2, r3, #5
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	4413      	add	r3, r2
 8009db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dba:	689b      	ldr	r3, [r3, #8]
 8009dbc:	f003 0304 	and.w	r3, r3, #4
 8009dc0:	2b04      	cmp	r3, #4
 8009dc2:	d119      	bne.n	8009df8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	015a      	lsls	r2, r3, #5
 8009dc8:	693b      	ldr	r3, [r7, #16]
 8009dca:	4413      	add	r3, r2
 8009dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dd0:	461a      	mov	r2, r3
 8009dd2:	2304      	movs	r3, #4
 8009dd4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	015a      	lsls	r2, r3, #5
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	4413      	add	r3, r2
 8009dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009de2:	68db      	ldr	r3, [r3, #12]
 8009de4:	68fa      	ldr	r2, [r7, #12]
 8009de6:	0151      	lsls	r1, r2, #5
 8009de8:	693a      	ldr	r2, [r7, #16]
 8009dea:	440a      	add	r2, r1
 8009dec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009df0:	f043 0302 	orr.w	r3, r3, #2
 8009df4:	60d3      	str	r3, [r2, #12]
 8009df6:	e0ce      	b.n	8009f96 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	015a      	lsls	r2, r3, #5
 8009dfc:	693b      	ldr	r3, [r7, #16]
 8009dfe:	4413      	add	r3, r2
 8009e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e04:	689b      	ldr	r3, [r3, #8]
 8009e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e0e:	d12c      	bne.n	8009e6a <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	015a      	lsls	r2, r3, #5
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	4413      	add	r3, r2
 8009e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e22:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8009e24:	6879      	ldr	r1, [r7, #4]
 8009e26:	68fa      	ldr	r2, [r7, #12]
 8009e28:	4613      	mov	r3, r2
 8009e2a:	009b      	lsls	r3, r3, #2
 8009e2c:	4413      	add	r3, r2
 8009e2e:	00db      	lsls	r3, r3, #3
 8009e30:	440b      	add	r3, r1
 8009e32:	335d      	adds	r3, #93	; 0x5d
 8009e34:	2207      	movs	r2, #7
 8009e36:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	015a      	lsls	r2, r3, #5
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	4413      	add	r3, r2
 8009e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e44:	68db      	ldr	r3, [r3, #12]
 8009e46:	68fa      	ldr	r2, [r7, #12]
 8009e48:	0151      	lsls	r1, r2, #5
 8009e4a:	693a      	ldr	r2, [r7, #16]
 8009e4c:	440a      	add	r2, r1
 8009e4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e52:	f043 0302 	orr.w	r3, r3, #2
 8009e56:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	68fa      	ldr	r2, [r7, #12]
 8009e5e:	b2d2      	uxtb	r2, r2
 8009e60:	4611      	mov	r1, r2
 8009e62:	4618      	mov	r0, r3
 8009e64:	f003 fe33 	bl	800dace <USB_HC_Halt>
 8009e68:	e095      	b.n	8009f96 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	015a      	lsls	r2, r3, #5
 8009e6e:	693b      	ldr	r3, [r7, #16]
 8009e70:	4413      	add	r3, r2
 8009e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e76:	689b      	ldr	r3, [r3, #8]
 8009e78:	f003 0320 	and.w	r3, r3, #32
 8009e7c:	2b20      	cmp	r3, #32
 8009e7e:	d109      	bne.n	8009e94 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	015a      	lsls	r2, r3, #5
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	4413      	add	r3, r2
 8009e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e8c:	461a      	mov	r2, r3
 8009e8e:	2320      	movs	r3, #32
 8009e90:	6093      	str	r3, [r2, #8]
 8009e92:	e080      	b.n	8009f96 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	015a      	lsls	r2, r3, #5
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	4413      	add	r3, r2
 8009e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ea0:	689b      	ldr	r3, [r3, #8]
 8009ea2:	f003 0308 	and.w	r3, r3, #8
 8009ea6:	2b08      	cmp	r3, #8
 8009ea8:	d134      	bne.n	8009f14 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	015a      	lsls	r2, r3, #5
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	4413      	add	r3, r2
 8009eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009eb6:	68db      	ldr	r3, [r3, #12]
 8009eb8:	68fa      	ldr	r2, [r7, #12]
 8009eba:	0151      	lsls	r1, r2, #5
 8009ebc:	693a      	ldr	r2, [r7, #16]
 8009ebe:	440a      	add	r2, r1
 8009ec0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ec4:	f043 0302 	orr.w	r3, r3, #2
 8009ec8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8009eca:	6879      	ldr	r1, [r7, #4]
 8009ecc:	68fa      	ldr	r2, [r7, #12]
 8009ece:	4613      	mov	r3, r2
 8009ed0:	009b      	lsls	r3, r3, #2
 8009ed2:	4413      	add	r3, r2
 8009ed4:	00db      	lsls	r3, r3, #3
 8009ed6:	440b      	add	r3, r1
 8009ed8:	335d      	adds	r3, #93	; 0x5d
 8009eda:	2205      	movs	r2, #5
 8009edc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	015a      	lsls	r2, r3, #5
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	4413      	add	r3, r2
 8009ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009eea:	461a      	mov	r2, r3
 8009eec:	2310      	movs	r3, #16
 8009eee:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	015a      	lsls	r2, r3, #5
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	4413      	add	r3, r2
 8009ef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009efc:	461a      	mov	r2, r3
 8009efe:	2308      	movs	r3, #8
 8009f00:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	68fa      	ldr	r2, [r7, #12]
 8009f08:	b2d2      	uxtb	r2, r2
 8009f0a:	4611      	mov	r1, r2
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f003 fdde 	bl	800dace <USB_HC_Halt>
 8009f12:	e040      	b.n	8009f96 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	015a      	lsls	r2, r3, #5
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	4413      	add	r3, r2
 8009f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f20:	689b      	ldr	r3, [r3, #8]
 8009f22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f2a:	d134      	bne.n	8009f96 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	015a      	lsls	r2, r3, #5
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	4413      	add	r3, r2
 8009f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f38:	68db      	ldr	r3, [r3, #12]
 8009f3a:	68fa      	ldr	r2, [r7, #12]
 8009f3c:	0151      	lsls	r1, r2, #5
 8009f3e:	693a      	ldr	r2, [r7, #16]
 8009f40:	440a      	add	r2, r1
 8009f42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f46:	f043 0302 	orr.w	r3, r3, #2
 8009f4a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	68fa      	ldr	r2, [r7, #12]
 8009f52:	b2d2      	uxtb	r2, r2
 8009f54:	4611      	mov	r1, r2
 8009f56:	4618      	mov	r0, r3
 8009f58:	f003 fdb9 	bl	800dace <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	015a      	lsls	r2, r3, #5
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	4413      	add	r3, r2
 8009f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f68:	461a      	mov	r2, r3
 8009f6a:	2310      	movs	r3, #16
 8009f6c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8009f6e:	6879      	ldr	r1, [r7, #4]
 8009f70:	68fa      	ldr	r2, [r7, #12]
 8009f72:	4613      	mov	r3, r2
 8009f74:	009b      	lsls	r3, r3, #2
 8009f76:	4413      	add	r3, r2
 8009f78:	00db      	lsls	r3, r3, #3
 8009f7a:	440b      	add	r3, r1
 8009f7c:	335d      	adds	r3, #93	; 0x5d
 8009f7e:	2208      	movs	r2, #8
 8009f80:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	015a      	lsls	r2, r3, #5
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	4413      	add	r3, r2
 8009f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f8e:	461a      	mov	r2, r3
 8009f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f94:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	015a      	lsls	r2, r3, #5
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	4413      	add	r3, r2
 8009f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fa2:	689b      	ldr	r3, [r3, #8]
 8009fa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009fa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fac:	d122      	bne.n	8009ff4 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	015a      	lsls	r2, r3, #5
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	4413      	add	r3, r2
 8009fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fba:	68db      	ldr	r3, [r3, #12]
 8009fbc:	68fa      	ldr	r2, [r7, #12]
 8009fbe:	0151      	lsls	r1, r2, #5
 8009fc0:	693a      	ldr	r2, [r7, #16]
 8009fc2:	440a      	add	r2, r1
 8009fc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009fc8:	f043 0302 	orr.w	r3, r3, #2
 8009fcc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	68fa      	ldr	r2, [r7, #12]
 8009fd4:	b2d2      	uxtb	r2, r2
 8009fd6:	4611      	mov	r1, r2
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f003 fd78 	bl	800dace <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	015a      	lsls	r2, r3, #5
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	4413      	add	r3, r2
 8009fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fea:	461a      	mov	r2, r3
 8009fec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ff0:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8009ff2:	e300      	b.n	800a5f6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	015a      	lsls	r2, r3, #5
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	4413      	add	r3, r2
 8009ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a000:	689b      	ldr	r3, [r3, #8]
 800a002:	f003 0301 	and.w	r3, r3, #1
 800a006:	2b01      	cmp	r3, #1
 800a008:	f040 80fd 	bne.w	800a206 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	691b      	ldr	r3, [r3, #16]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d01b      	beq.n	800a04c <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800a014:	6879      	ldr	r1, [r7, #4]
 800a016:	68fa      	ldr	r2, [r7, #12]
 800a018:	4613      	mov	r3, r2
 800a01a:	009b      	lsls	r3, r3, #2
 800a01c:	4413      	add	r3, r2
 800a01e:	00db      	lsls	r3, r3, #3
 800a020:	440b      	add	r3, r1
 800a022:	3348      	adds	r3, #72	; 0x48
 800a024:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	0159      	lsls	r1, r3, #5
 800a02a:	693b      	ldr	r3, [r7, #16]
 800a02c:	440b      	add	r3, r1
 800a02e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a032:	691b      	ldr	r3, [r3, #16]
 800a034:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800a038:	1ad1      	subs	r1, r2, r3
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	68fa      	ldr	r2, [r7, #12]
 800a03e:	4613      	mov	r3, r2
 800a040:	009b      	lsls	r3, r3, #2
 800a042:	4413      	add	r3, r2
 800a044:	00db      	lsls	r3, r3, #3
 800a046:	4403      	add	r3, r0
 800a048:	334c      	adds	r3, #76	; 0x4c
 800a04a:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800a04c:	6879      	ldr	r1, [r7, #4]
 800a04e:	68fa      	ldr	r2, [r7, #12]
 800a050:	4613      	mov	r3, r2
 800a052:	009b      	lsls	r3, r3, #2
 800a054:	4413      	add	r3, r2
 800a056:	00db      	lsls	r3, r3, #3
 800a058:	440b      	add	r3, r1
 800a05a:	335d      	adds	r3, #93	; 0x5d
 800a05c:	2201      	movs	r2, #1
 800a05e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800a060:	6879      	ldr	r1, [r7, #4]
 800a062:	68fa      	ldr	r2, [r7, #12]
 800a064:	4613      	mov	r3, r2
 800a066:	009b      	lsls	r3, r3, #2
 800a068:	4413      	add	r3, r2
 800a06a:	00db      	lsls	r3, r3, #3
 800a06c:	440b      	add	r3, r1
 800a06e:	3358      	adds	r3, #88	; 0x58
 800a070:	2200      	movs	r2, #0
 800a072:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	015a      	lsls	r2, r3, #5
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	4413      	add	r3, r2
 800a07c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a080:	461a      	mov	r2, r3
 800a082:	2301      	movs	r3, #1
 800a084:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800a086:	6879      	ldr	r1, [r7, #4]
 800a088:	68fa      	ldr	r2, [r7, #12]
 800a08a:	4613      	mov	r3, r2
 800a08c:	009b      	lsls	r3, r3, #2
 800a08e:	4413      	add	r3, r2
 800a090:	00db      	lsls	r3, r3, #3
 800a092:	440b      	add	r3, r1
 800a094:	333f      	adds	r3, #63	; 0x3f
 800a096:	781b      	ldrb	r3, [r3, #0]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d00a      	beq.n	800a0b2 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800a09c:	6879      	ldr	r1, [r7, #4]
 800a09e:	68fa      	ldr	r2, [r7, #12]
 800a0a0:	4613      	mov	r3, r2
 800a0a2:	009b      	lsls	r3, r3, #2
 800a0a4:	4413      	add	r3, r2
 800a0a6:	00db      	lsls	r3, r3, #3
 800a0a8:	440b      	add	r3, r1
 800a0aa:	333f      	adds	r3, #63	; 0x3f
 800a0ac:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800a0ae:	2b02      	cmp	r3, #2
 800a0b0:	d121      	bne.n	800a0f6 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	015a      	lsls	r2, r3, #5
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	4413      	add	r3, r2
 800a0ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0be:	68db      	ldr	r3, [r3, #12]
 800a0c0:	68fa      	ldr	r2, [r7, #12]
 800a0c2:	0151      	lsls	r1, r2, #5
 800a0c4:	693a      	ldr	r2, [r7, #16]
 800a0c6:	440a      	add	r2, r1
 800a0c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a0cc:	f043 0302 	orr.w	r3, r3, #2
 800a0d0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	68fa      	ldr	r2, [r7, #12]
 800a0d8:	b2d2      	uxtb	r2, r2
 800a0da:	4611      	mov	r1, r2
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f003 fcf6 	bl	800dace <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	015a      	lsls	r2, r3, #5
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	4413      	add	r3, r2
 800a0ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0ee:	461a      	mov	r2, r3
 800a0f0:	2310      	movs	r3, #16
 800a0f2:	6093      	str	r3, [r2, #8]
 800a0f4:	e070      	b.n	800a1d8 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800a0f6:	6879      	ldr	r1, [r7, #4]
 800a0f8:	68fa      	ldr	r2, [r7, #12]
 800a0fa:	4613      	mov	r3, r2
 800a0fc:	009b      	lsls	r3, r3, #2
 800a0fe:	4413      	add	r3, r2
 800a100:	00db      	lsls	r3, r3, #3
 800a102:	440b      	add	r3, r1
 800a104:	333f      	adds	r3, #63	; 0x3f
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	2b03      	cmp	r3, #3
 800a10a:	d12a      	bne.n	800a162 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	015a      	lsls	r2, r3, #5
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	4413      	add	r3, r2
 800a114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	68fa      	ldr	r2, [r7, #12]
 800a11c:	0151      	lsls	r1, r2, #5
 800a11e:	693a      	ldr	r2, [r7, #16]
 800a120:	440a      	add	r2, r1
 800a122:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a126:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a12a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800a12c:	6879      	ldr	r1, [r7, #4]
 800a12e:	68fa      	ldr	r2, [r7, #12]
 800a130:	4613      	mov	r3, r2
 800a132:	009b      	lsls	r3, r3, #2
 800a134:	4413      	add	r3, r2
 800a136:	00db      	lsls	r3, r3, #3
 800a138:	440b      	add	r3, r1
 800a13a:	335c      	adds	r3, #92	; 0x5c
 800a13c:	2201      	movs	r2, #1
 800a13e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	b2d8      	uxtb	r0, r3
 800a144:	6879      	ldr	r1, [r7, #4]
 800a146:	68fa      	ldr	r2, [r7, #12]
 800a148:	4613      	mov	r3, r2
 800a14a:	009b      	lsls	r3, r3, #2
 800a14c:	4413      	add	r3, r2
 800a14e:	00db      	lsls	r3, r3, #3
 800a150:	440b      	add	r3, r1
 800a152:	335c      	adds	r3, #92	; 0x5c
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	461a      	mov	r2, r3
 800a158:	4601      	mov	r1, r0
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f004 ffba 	bl	800f0d4 <HAL_HCD_HC_NotifyURBChange_Callback>
 800a160:	e03a      	b.n	800a1d8 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800a162:	6879      	ldr	r1, [r7, #4]
 800a164:	68fa      	ldr	r2, [r7, #12]
 800a166:	4613      	mov	r3, r2
 800a168:	009b      	lsls	r3, r3, #2
 800a16a:	4413      	add	r3, r2
 800a16c:	00db      	lsls	r3, r3, #3
 800a16e:	440b      	add	r3, r1
 800a170:	333f      	adds	r3, #63	; 0x3f
 800a172:	781b      	ldrb	r3, [r3, #0]
 800a174:	2b01      	cmp	r3, #1
 800a176:	d12f      	bne.n	800a1d8 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800a178:	6879      	ldr	r1, [r7, #4]
 800a17a:	68fa      	ldr	r2, [r7, #12]
 800a17c:	4613      	mov	r3, r2
 800a17e:	009b      	lsls	r3, r3, #2
 800a180:	4413      	add	r3, r2
 800a182:	00db      	lsls	r3, r3, #3
 800a184:	440b      	add	r3, r1
 800a186:	335c      	adds	r3, #92	; 0x5c
 800a188:	2201      	movs	r2, #1
 800a18a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800a18c:	6879      	ldr	r1, [r7, #4]
 800a18e:	68fa      	ldr	r2, [r7, #12]
 800a190:	4613      	mov	r3, r2
 800a192:	009b      	lsls	r3, r3, #2
 800a194:	4413      	add	r3, r2
 800a196:	00db      	lsls	r3, r3, #3
 800a198:	440b      	add	r3, r1
 800a19a:	3350      	adds	r3, #80	; 0x50
 800a19c:	781b      	ldrb	r3, [r3, #0]
 800a19e:	f083 0301 	eor.w	r3, r3, #1
 800a1a2:	b2d8      	uxtb	r0, r3
 800a1a4:	6879      	ldr	r1, [r7, #4]
 800a1a6:	68fa      	ldr	r2, [r7, #12]
 800a1a8:	4613      	mov	r3, r2
 800a1aa:	009b      	lsls	r3, r3, #2
 800a1ac:	4413      	add	r3, r2
 800a1ae:	00db      	lsls	r3, r3, #3
 800a1b0:	440b      	add	r3, r1
 800a1b2:	3350      	adds	r3, #80	; 0x50
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	b2d8      	uxtb	r0, r3
 800a1bc:	6879      	ldr	r1, [r7, #4]
 800a1be:	68fa      	ldr	r2, [r7, #12]
 800a1c0:	4613      	mov	r3, r2
 800a1c2:	009b      	lsls	r3, r3, #2
 800a1c4:	4413      	add	r3, r2
 800a1c6:	00db      	lsls	r3, r3, #3
 800a1c8:	440b      	add	r3, r1
 800a1ca:	335c      	adds	r3, #92	; 0x5c
 800a1cc:	781b      	ldrb	r3, [r3, #0]
 800a1ce:	461a      	mov	r2, r3
 800a1d0:	4601      	mov	r1, r0
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f004 ff7e 	bl	800f0d4 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800a1d8:	6879      	ldr	r1, [r7, #4]
 800a1da:	68fa      	ldr	r2, [r7, #12]
 800a1dc:	4613      	mov	r3, r2
 800a1de:	009b      	lsls	r3, r3, #2
 800a1e0:	4413      	add	r3, r2
 800a1e2:	00db      	lsls	r3, r3, #3
 800a1e4:	440b      	add	r3, r1
 800a1e6:	3350      	adds	r3, #80	; 0x50
 800a1e8:	781b      	ldrb	r3, [r3, #0]
 800a1ea:	f083 0301 	eor.w	r3, r3, #1
 800a1ee:	b2d8      	uxtb	r0, r3
 800a1f0:	6879      	ldr	r1, [r7, #4]
 800a1f2:	68fa      	ldr	r2, [r7, #12]
 800a1f4:	4613      	mov	r3, r2
 800a1f6:	009b      	lsls	r3, r3, #2
 800a1f8:	4413      	add	r3, r2
 800a1fa:	00db      	lsls	r3, r3, #3
 800a1fc:	440b      	add	r3, r1
 800a1fe:	3350      	adds	r3, #80	; 0x50
 800a200:	4602      	mov	r2, r0
 800a202:	701a      	strb	r2, [r3, #0]
}
 800a204:	e1f7      	b.n	800a5f6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	015a      	lsls	r2, r3, #5
 800a20a:	693b      	ldr	r3, [r7, #16]
 800a20c:	4413      	add	r3, r2
 800a20e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a212:	689b      	ldr	r3, [r3, #8]
 800a214:	f003 0302 	and.w	r3, r3, #2
 800a218:	2b02      	cmp	r3, #2
 800a21a:	f040 811a 	bne.w	800a452 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	015a      	lsls	r2, r3, #5
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	4413      	add	r3, r2
 800a226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a22a:	68db      	ldr	r3, [r3, #12]
 800a22c:	68fa      	ldr	r2, [r7, #12]
 800a22e:	0151      	lsls	r1, r2, #5
 800a230:	693a      	ldr	r2, [r7, #16]
 800a232:	440a      	add	r2, r1
 800a234:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a238:	f023 0302 	bic.w	r3, r3, #2
 800a23c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800a23e:	6879      	ldr	r1, [r7, #4]
 800a240:	68fa      	ldr	r2, [r7, #12]
 800a242:	4613      	mov	r3, r2
 800a244:	009b      	lsls	r3, r3, #2
 800a246:	4413      	add	r3, r2
 800a248:	00db      	lsls	r3, r3, #3
 800a24a:	440b      	add	r3, r1
 800a24c:	335d      	adds	r3, #93	; 0x5d
 800a24e:	781b      	ldrb	r3, [r3, #0]
 800a250:	2b01      	cmp	r3, #1
 800a252:	d10a      	bne.n	800a26a <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800a254:	6879      	ldr	r1, [r7, #4]
 800a256:	68fa      	ldr	r2, [r7, #12]
 800a258:	4613      	mov	r3, r2
 800a25a:	009b      	lsls	r3, r3, #2
 800a25c:	4413      	add	r3, r2
 800a25e:	00db      	lsls	r3, r3, #3
 800a260:	440b      	add	r3, r1
 800a262:	335c      	adds	r3, #92	; 0x5c
 800a264:	2201      	movs	r2, #1
 800a266:	701a      	strb	r2, [r3, #0]
 800a268:	e0d9      	b.n	800a41e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800a26a:	6879      	ldr	r1, [r7, #4]
 800a26c:	68fa      	ldr	r2, [r7, #12]
 800a26e:	4613      	mov	r3, r2
 800a270:	009b      	lsls	r3, r3, #2
 800a272:	4413      	add	r3, r2
 800a274:	00db      	lsls	r3, r3, #3
 800a276:	440b      	add	r3, r1
 800a278:	335d      	adds	r3, #93	; 0x5d
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	2b05      	cmp	r3, #5
 800a27e:	d10a      	bne.n	800a296 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800a280:	6879      	ldr	r1, [r7, #4]
 800a282:	68fa      	ldr	r2, [r7, #12]
 800a284:	4613      	mov	r3, r2
 800a286:	009b      	lsls	r3, r3, #2
 800a288:	4413      	add	r3, r2
 800a28a:	00db      	lsls	r3, r3, #3
 800a28c:	440b      	add	r3, r1
 800a28e:	335c      	adds	r3, #92	; 0x5c
 800a290:	2205      	movs	r2, #5
 800a292:	701a      	strb	r2, [r3, #0]
 800a294:	e0c3      	b.n	800a41e <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800a296:	6879      	ldr	r1, [r7, #4]
 800a298:	68fa      	ldr	r2, [r7, #12]
 800a29a:	4613      	mov	r3, r2
 800a29c:	009b      	lsls	r3, r3, #2
 800a29e:	4413      	add	r3, r2
 800a2a0:	00db      	lsls	r3, r3, #3
 800a2a2:	440b      	add	r3, r1
 800a2a4:	335d      	adds	r3, #93	; 0x5d
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	2b06      	cmp	r3, #6
 800a2aa:	d00a      	beq.n	800a2c2 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800a2ac:	6879      	ldr	r1, [r7, #4]
 800a2ae:	68fa      	ldr	r2, [r7, #12]
 800a2b0:	4613      	mov	r3, r2
 800a2b2:	009b      	lsls	r3, r3, #2
 800a2b4:	4413      	add	r3, r2
 800a2b6:	00db      	lsls	r3, r3, #3
 800a2b8:	440b      	add	r3, r1
 800a2ba:	335d      	adds	r3, #93	; 0x5d
 800a2bc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800a2be:	2b08      	cmp	r3, #8
 800a2c0:	d156      	bne.n	800a370 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 800a2c2:	6879      	ldr	r1, [r7, #4]
 800a2c4:	68fa      	ldr	r2, [r7, #12]
 800a2c6:	4613      	mov	r3, r2
 800a2c8:	009b      	lsls	r3, r3, #2
 800a2ca:	4413      	add	r3, r2
 800a2cc:	00db      	lsls	r3, r3, #3
 800a2ce:	440b      	add	r3, r1
 800a2d0:	3358      	adds	r3, #88	; 0x58
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	1c59      	adds	r1, r3, #1
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	68fa      	ldr	r2, [r7, #12]
 800a2da:	4613      	mov	r3, r2
 800a2dc:	009b      	lsls	r3, r3, #2
 800a2de:	4413      	add	r3, r2
 800a2e0:	00db      	lsls	r3, r3, #3
 800a2e2:	4403      	add	r3, r0
 800a2e4:	3358      	adds	r3, #88	; 0x58
 800a2e6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800a2e8:	6879      	ldr	r1, [r7, #4]
 800a2ea:	68fa      	ldr	r2, [r7, #12]
 800a2ec:	4613      	mov	r3, r2
 800a2ee:	009b      	lsls	r3, r3, #2
 800a2f0:	4413      	add	r3, r2
 800a2f2:	00db      	lsls	r3, r3, #3
 800a2f4:	440b      	add	r3, r1
 800a2f6:	3358      	adds	r3, #88	; 0x58
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	2b03      	cmp	r3, #3
 800a2fc:	d914      	bls.n	800a328 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800a2fe:	6879      	ldr	r1, [r7, #4]
 800a300:	68fa      	ldr	r2, [r7, #12]
 800a302:	4613      	mov	r3, r2
 800a304:	009b      	lsls	r3, r3, #2
 800a306:	4413      	add	r3, r2
 800a308:	00db      	lsls	r3, r3, #3
 800a30a:	440b      	add	r3, r1
 800a30c:	3358      	adds	r3, #88	; 0x58
 800a30e:	2200      	movs	r2, #0
 800a310:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800a312:	6879      	ldr	r1, [r7, #4]
 800a314:	68fa      	ldr	r2, [r7, #12]
 800a316:	4613      	mov	r3, r2
 800a318:	009b      	lsls	r3, r3, #2
 800a31a:	4413      	add	r3, r2
 800a31c:	00db      	lsls	r3, r3, #3
 800a31e:	440b      	add	r3, r1
 800a320:	335c      	adds	r3, #92	; 0x5c
 800a322:	2204      	movs	r2, #4
 800a324:	701a      	strb	r2, [r3, #0]
 800a326:	e009      	b.n	800a33c <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800a328:	6879      	ldr	r1, [r7, #4]
 800a32a:	68fa      	ldr	r2, [r7, #12]
 800a32c:	4613      	mov	r3, r2
 800a32e:	009b      	lsls	r3, r3, #2
 800a330:	4413      	add	r3, r2
 800a332:	00db      	lsls	r3, r3, #3
 800a334:	440b      	add	r3, r1
 800a336:	335c      	adds	r3, #92	; 0x5c
 800a338:	2202      	movs	r2, #2
 800a33a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	015a      	lsls	r2, r3, #5
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	4413      	add	r3, r2
 800a344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a352:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a35a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	015a      	lsls	r2, r3, #5
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	4413      	add	r3, r2
 800a364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a368:	461a      	mov	r2, r3
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	6013      	str	r3, [r2, #0]
 800a36e:	e056      	b.n	800a41e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800a370:	6879      	ldr	r1, [r7, #4]
 800a372:	68fa      	ldr	r2, [r7, #12]
 800a374:	4613      	mov	r3, r2
 800a376:	009b      	lsls	r3, r3, #2
 800a378:	4413      	add	r3, r2
 800a37a:	00db      	lsls	r3, r3, #3
 800a37c:	440b      	add	r3, r1
 800a37e:	335d      	adds	r3, #93	; 0x5d
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	2b03      	cmp	r3, #3
 800a384:	d123      	bne.n	800a3ce <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800a386:	6879      	ldr	r1, [r7, #4]
 800a388:	68fa      	ldr	r2, [r7, #12]
 800a38a:	4613      	mov	r3, r2
 800a38c:	009b      	lsls	r3, r3, #2
 800a38e:	4413      	add	r3, r2
 800a390:	00db      	lsls	r3, r3, #3
 800a392:	440b      	add	r3, r1
 800a394:	335c      	adds	r3, #92	; 0x5c
 800a396:	2202      	movs	r2, #2
 800a398:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	015a      	lsls	r2, r3, #5
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	4413      	add	r3, r2
 800a3a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a3b0:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a3b8:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	015a      	lsls	r2, r3, #5
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	4413      	add	r3, r2
 800a3c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3c6:	461a      	mov	r2, r3
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	6013      	str	r3, [r2, #0]
 800a3cc:	e027      	b.n	800a41e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800a3ce:	6879      	ldr	r1, [r7, #4]
 800a3d0:	68fa      	ldr	r2, [r7, #12]
 800a3d2:	4613      	mov	r3, r2
 800a3d4:	009b      	lsls	r3, r3, #2
 800a3d6:	4413      	add	r3, r2
 800a3d8:	00db      	lsls	r3, r3, #3
 800a3da:	440b      	add	r3, r1
 800a3dc:	335d      	adds	r3, #93	; 0x5d
 800a3de:	781b      	ldrb	r3, [r3, #0]
 800a3e0:	2b07      	cmp	r3, #7
 800a3e2:	d11c      	bne.n	800a41e <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 800a3e4:	6879      	ldr	r1, [r7, #4]
 800a3e6:	68fa      	ldr	r2, [r7, #12]
 800a3e8:	4613      	mov	r3, r2
 800a3ea:	009b      	lsls	r3, r3, #2
 800a3ec:	4413      	add	r3, r2
 800a3ee:	00db      	lsls	r3, r3, #3
 800a3f0:	440b      	add	r3, r1
 800a3f2:	3358      	adds	r3, #88	; 0x58
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	1c59      	adds	r1, r3, #1
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	68fa      	ldr	r2, [r7, #12]
 800a3fc:	4613      	mov	r3, r2
 800a3fe:	009b      	lsls	r3, r3, #2
 800a400:	4413      	add	r3, r2
 800a402:	00db      	lsls	r3, r3, #3
 800a404:	4403      	add	r3, r0
 800a406:	3358      	adds	r3, #88	; 0x58
 800a408:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800a40a:	6879      	ldr	r1, [r7, #4]
 800a40c:	68fa      	ldr	r2, [r7, #12]
 800a40e:	4613      	mov	r3, r2
 800a410:	009b      	lsls	r3, r3, #2
 800a412:	4413      	add	r3, r2
 800a414:	00db      	lsls	r3, r3, #3
 800a416:	440b      	add	r3, r1
 800a418:	335c      	adds	r3, #92	; 0x5c
 800a41a:	2204      	movs	r2, #4
 800a41c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	015a      	lsls	r2, r3, #5
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	4413      	add	r3, r2
 800a426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a42a:	461a      	mov	r2, r3
 800a42c:	2302      	movs	r3, #2
 800a42e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	b2d8      	uxtb	r0, r3
 800a434:	6879      	ldr	r1, [r7, #4]
 800a436:	68fa      	ldr	r2, [r7, #12]
 800a438:	4613      	mov	r3, r2
 800a43a:	009b      	lsls	r3, r3, #2
 800a43c:	4413      	add	r3, r2
 800a43e:	00db      	lsls	r3, r3, #3
 800a440:	440b      	add	r3, r1
 800a442:	335c      	adds	r3, #92	; 0x5c
 800a444:	781b      	ldrb	r3, [r3, #0]
 800a446:	461a      	mov	r2, r3
 800a448:	4601      	mov	r1, r0
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f004 fe42 	bl	800f0d4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800a450:	e0d1      	b.n	800a5f6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	015a      	lsls	r2, r3, #5
 800a456:	693b      	ldr	r3, [r7, #16]
 800a458:	4413      	add	r3, r2
 800a45a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a45e:	689b      	ldr	r3, [r3, #8]
 800a460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a464:	2b80      	cmp	r3, #128	; 0x80
 800a466:	d13e      	bne.n	800a4e6 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	015a      	lsls	r2, r3, #5
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	4413      	add	r3, r2
 800a470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a474:	68db      	ldr	r3, [r3, #12]
 800a476:	68fa      	ldr	r2, [r7, #12]
 800a478:	0151      	lsls	r1, r2, #5
 800a47a:	693a      	ldr	r2, [r7, #16]
 800a47c:	440a      	add	r2, r1
 800a47e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a482:	f043 0302 	orr.w	r3, r3, #2
 800a486:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800a488:	6879      	ldr	r1, [r7, #4]
 800a48a:	68fa      	ldr	r2, [r7, #12]
 800a48c:	4613      	mov	r3, r2
 800a48e:	009b      	lsls	r3, r3, #2
 800a490:	4413      	add	r3, r2
 800a492:	00db      	lsls	r3, r3, #3
 800a494:	440b      	add	r3, r1
 800a496:	3358      	adds	r3, #88	; 0x58
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	1c59      	adds	r1, r3, #1
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	68fa      	ldr	r2, [r7, #12]
 800a4a0:	4613      	mov	r3, r2
 800a4a2:	009b      	lsls	r3, r3, #2
 800a4a4:	4413      	add	r3, r2
 800a4a6:	00db      	lsls	r3, r3, #3
 800a4a8:	4403      	add	r3, r0
 800a4aa:	3358      	adds	r3, #88	; 0x58
 800a4ac:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800a4ae:	6879      	ldr	r1, [r7, #4]
 800a4b0:	68fa      	ldr	r2, [r7, #12]
 800a4b2:	4613      	mov	r3, r2
 800a4b4:	009b      	lsls	r3, r3, #2
 800a4b6:	4413      	add	r3, r2
 800a4b8:	00db      	lsls	r3, r3, #3
 800a4ba:	440b      	add	r3, r1
 800a4bc:	335d      	adds	r3, #93	; 0x5d
 800a4be:	2206      	movs	r2, #6
 800a4c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	68fa      	ldr	r2, [r7, #12]
 800a4c8:	b2d2      	uxtb	r2, r2
 800a4ca:	4611      	mov	r1, r2
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f003 fafe 	bl	800dace <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	015a      	lsls	r2, r3, #5
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	4413      	add	r3, r2
 800a4da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4de:	461a      	mov	r2, r3
 800a4e0:	2380      	movs	r3, #128	; 0x80
 800a4e2:	6093      	str	r3, [r2, #8]
}
 800a4e4:	e087      	b.n	800a5f6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	015a      	lsls	r2, r3, #5
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	4413      	add	r3, r2
 800a4ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4f2:	689b      	ldr	r3, [r3, #8]
 800a4f4:	f003 0310 	and.w	r3, r3, #16
 800a4f8:	2b10      	cmp	r3, #16
 800a4fa:	d17c      	bne.n	800a5f6 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800a4fc:	6879      	ldr	r1, [r7, #4]
 800a4fe:	68fa      	ldr	r2, [r7, #12]
 800a500:	4613      	mov	r3, r2
 800a502:	009b      	lsls	r3, r3, #2
 800a504:	4413      	add	r3, r2
 800a506:	00db      	lsls	r3, r3, #3
 800a508:	440b      	add	r3, r1
 800a50a:	333f      	adds	r3, #63	; 0x3f
 800a50c:	781b      	ldrb	r3, [r3, #0]
 800a50e:	2b03      	cmp	r3, #3
 800a510:	d122      	bne.n	800a558 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800a512:	6879      	ldr	r1, [r7, #4]
 800a514:	68fa      	ldr	r2, [r7, #12]
 800a516:	4613      	mov	r3, r2
 800a518:	009b      	lsls	r3, r3, #2
 800a51a:	4413      	add	r3, r2
 800a51c:	00db      	lsls	r3, r3, #3
 800a51e:	440b      	add	r3, r1
 800a520:	3358      	adds	r3, #88	; 0x58
 800a522:	2200      	movs	r2, #0
 800a524:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	015a      	lsls	r2, r3, #5
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	4413      	add	r3, r2
 800a52e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a532:	68db      	ldr	r3, [r3, #12]
 800a534:	68fa      	ldr	r2, [r7, #12]
 800a536:	0151      	lsls	r1, r2, #5
 800a538:	693a      	ldr	r2, [r7, #16]
 800a53a:	440a      	add	r2, r1
 800a53c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a540:	f043 0302 	orr.w	r3, r3, #2
 800a544:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	68fa      	ldr	r2, [r7, #12]
 800a54c:	b2d2      	uxtb	r2, r2
 800a54e:	4611      	mov	r1, r2
 800a550:	4618      	mov	r0, r3
 800a552:	f003 fabc 	bl	800dace <USB_HC_Halt>
 800a556:	e045      	b.n	800a5e4 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800a558:	6879      	ldr	r1, [r7, #4]
 800a55a:	68fa      	ldr	r2, [r7, #12]
 800a55c:	4613      	mov	r3, r2
 800a55e:	009b      	lsls	r3, r3, #2
 800a560:	4413      	add	r3, r2
 800a562:	00db      	lsls	r3, r3, #3
 800a564:	440b      	add	r3, r1
 800a566:	333f      	adds	r3, #63	; 0x3f
 800a568:	781b      	ldrb	r3, [r3, #0]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d00a      	beq.n	800a584 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800a56e:	6879      	ldr	r1, [r7, #4]
 800a570:	68fa      	ldr	r2, [r7, #12]
 800a572:	4613      	mov	r3, r2
 800a574:	009b      	lsls	r3, r3, #2
 800a576:	4413      	add	r3, r2
 800a578:	00db      	lsls	r3, r3, #3
 800a57a:	440b      	add	r3, r1
 800a57c:	333f      	adds	r3, #63	; 0x3f
 800a57e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800a580:	2b02      	cmp	r3, #2
 800a582:	d12f      	bne.n	800a5e4 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800a584:	6879      	ldr	r1, [r7, #4]
 800a586:	68fa      	ldr	r2, [r7, #12]
 800a588:	4613      	mov	r3, r2
 800a58a:	009b      	lsls	r3, r3, #2
 800a58c:	4413      	add	r3, r2
 800a58e:	00db      	lsls	r3, r3, #3
 800a590:	440b      	add	r3, r1
 800a592:	3358      	adds	r3, #88	; 0x58
 800a594:	2200      	movs	r2, #0
 800a596:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	691b      	ldr	r3, [r3, #16]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d121      	bne.n	800a5e4 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 800a5a0:	6879      	ldr	r1, [r7, #4]
 800a5a2:	68fa      	ldr	r2, [r7, #12]
 800a5a4:	4613      	mov	r3, r2
 800a5a6:	009b      	lsls	r3, r3, #2
 800a5a8:	4413      	add	r3, r2
 800a5aa:	00db      	lsls	r3, r3, #3
 800a5ac:	440b      	add	r3, r1
 800a5ae:	335d      	adds	r3, #93	; 0x5d
 800a5b0:	2203      	movs	r2, #3
 800a5b2:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	015a      	lsls	r2, r3, #5
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	4413      	add	r3, r2
 800a5bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5c0:	68db      	ldr	r3, [r3, #12]
 800a5c2:	68fa      	ldr	r2, [r7, #12]
 800a5c4:	0151      	lsls	r1, r2, #5
 800a5c6:	693a      	ldr	r2, [r7, #16]
 800a5c8:	440a      	add	r2, r1
 800a5ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a5ce:	f043 0302 	orr.w	r3, r3, #2
 800a5d2:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	68fa      	ldr	r2, [r7, #12]
 800a5da:	b2d2      	uxtb	r2, r2
 800a5dc:	4611      	mov	r1, r2
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f003 fa75 	bl	800dace <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	015a      	lsls	r2, r3, #5
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	4413      	add	r3, r2
 800a5ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5f0:	461a      	mov	r2, r3
 800a5f2:	2310      	movs	r3, #16
 800a5f4:	6093      	str	r3, [r2, #8]
}
 800a5f6:	bf00      	nop
 800a5f8:	3718      	adds	r7, #24
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}

0800a5fe <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800a5fe:	b580      	push	{r7, lr}
 800a600:	b086      	sub	sp, #24
 800a602:	af00      	add	r7, sp, #0
 800a604:	6078      	str	r0, [r7, #4]
 800a606:	460b      	mov	r3, r1
 800a608:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800a614:	78fb      	ldrb	r3, [r7, #3]
 800a616:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	015a      	lsls	r2, r3, #5
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	4413      	add	r3, r2
 800a620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a624:	689b      	ldr	r3, [r3, #8]
 800a626:	f003 0304 	and.w	r3, r3, #4
 800a62a:	2b04      	cmp	r3, #4
 800a62c:	d119      	bne.n	800a662 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	015a      	lsls	r2, r3, #5
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	4413      	add	r3, r2
 800a636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a63a:	461a      	mov	r2, r3
 800a63c:	2304      	movs	r3, #4
 800a63e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	015a      	lsls	r2, r3, #5
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	4413      	add	r3, r2
 800a648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a64c:	68db      	ldr	r3, [r3, #12]
 800a64e:	68fa      	ldr	r2, [r7, #12]
 800a650:	0151      	lsls	r1, r2, #5
 800a652:	693a      	ldr	r2, [r7, #16]
 800a654:	440a      	add	r2, r1
 800a656:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a65a:	f043 0302 	orr.w	r3, r3, #2
 800a65e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800a660:	e33e      	b.n	800ace0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	015a      	lsls	r2, r3, #5
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	4413      	add	r3, r2
 800a66a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a66e:	689b      	ldr	r3, [r3, #8]
 800a670:	f003 0320 	and.w	r3, r3, #32
 800a674:	2b20      	cmp	r3, #32
 800a676:	d141      	bne.n	800a6fc <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	015a      	lsls	r2, r3, #5
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	4413      	add	r3, r2
 800a680:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a684:	461a      	mov	r2, r3
 800a686:	2320      	movs	r3, #32
 800a688:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800a68a:	6879      	ldr	r1, [r7, #4]
 800a68c:	68fa      	ldr	r2, [r7, #12]
 800a68e:	4613      	mov	r3, r2
 800a690:	009b      	lsls	r3, r3, #2
 800a692:	4413      	add	r3, r2
 800a694:	00db      	lsls	r3, r3, #3
 800a696:	440b      	add	r3, r1
 800a698:	333d      	adds	r3, #61	; 0x3d
 800a69a:	781b      	ldrb	r3, [r3, #0]
 800a69c:	2b01      	cmp	r3, #1
 800a69e:	f040 831f 	bne.w	800ace0 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800a6a2:	6879      	ldr	r1, [r7, #4]
 800a6a4:	68fa      	ldr	r2, [r7, #12]
 800a6a6:	4613      	mov	r3, r2
 800a6a8:	009b      	lsls	r3, r3, #2
 800a6aa:	4413      	add	r3, r2
 800a6ac:	00db      	lsls	r3, r3, #3
 800a6ae:	440b      	add	r3, r1
 800a6b0:	333d      	adds	r3, #61	; 0x3d
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800a6b6:	6879      	ldr	r1, [r7, #4]
 800a6b8:	68fa      	ldr	r2, [r7, #12]
 800a6ba:	4613      	mov	r3, r2
 800a6bc:	009b      	lsls	r3, r3, #2
 800a6be:	4413      	add	r3, r2
 800a6c0:	00db      	lsls	r3, r3, #3
 800a6c2:	440b      	add	r3, r1
 800a6c4:	335c      	adds	r3, #92	; 0x5c
 800a6c6:	2202      	movs	r2, #2
 800a6c8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	015a      	lsls	r2, r3, #5
 800a6ce:	693b      	ldr	r3, [r7, #16]
 800a6d0:	4413      	add	r3, r2
 800a6d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6d6:	68db      	ldr	r3, [r3, #12]
 800a6d8:	68fa      	ldr	r2, [r7, #12]
 800a6da:	0151      	lsls	r1, r2, #5
 800a6dc:	693a      	ldr	r2, [r7, #16]
 800a6de:	440a      	add	r2, r1
 800a6e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a6e4:	f043 0302 	orr.w	r3, r3, #2
 800a6e8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	68fa      	ldr	r2, [r7, #12]
 800a6f0:	b2d2      	uxtb	r2, r2
 800a6f2:	4611      	mov	r1, r2
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f003 f9ea 	bl	800dace <USB_HC_Halt>
}
 800a6fa:	e2f1      	b.n	800ace0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	015a      	lsls	r2, r3, #5
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	4413      	add	r3, r2
 800a704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a708:	689b      	ldr	r3, [r3, #8]
 800a70a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a70e:	2b40      	cmp	r3, #64	; 0x40
 800a710:	d13f      	bne.n	800a792 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800a712:	6879      	ldr	r1, [r7, #4]
 800a714:	68fa      	ldr	r2, [r7, #12]
 800a716:	4613      	mov	r3, r2
 800a718:	009b      	lsls	r3, r3, #2
 800a71a:	4413      	add	r3, r2
 800a71c:	00db      	lsls	r3, r3, #3
 800a71e:	440b      	add	r3, r1
 800a720:	335d      	adds	r3, #93	; 0x5d
 800a722:	2204      	movs	r2, #4
 800a724:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800a726:	6879      	ldr	r1, [r7, #4]
 800a728:	68fa      	ldr	r2, [r7, #12]
 800a72a:	4613      	mov	r3, r2
 800a72c:	009b      	lsls	r3, r3, #2
 800a72e:	4413      	add	r3, r2
 800a730:	00db      	lsls	r3, r3, #3
 800a732:	440b      	add	r3, r1
 800a734:	333d      	adds	r3, #61	; 0x3d
 800a736:	2201      	movs	r2, #1
 800a738:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800a73a:	6879      	ldr	r1, [r7, #4]
 800a73c:	68fa      	ldr	r2, [r7, #12]
 800a73e:	4613      	mov	r3, r2
 800a740:	009b      	lsls	r3, r3, #2
 800a742:	4413      	add	r3, r2
 800a744:	00db      	lsls	r3, r3, #3
 800a746:	440b      	add	r3, r1
 800a748:	3358      	adds	r3, #88	; 0x58
 800a74a:	2200      	movs	r2, #0
 800a74c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	015a      	lsls	r2, r3, #5
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	4413      	add	r3, r2
 800a756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a75a:	68db      	ldr	r3, [r3, #12]
 800a75c:	68fa      	ldr	r2, [r7, #12]
 800a75e:	0151      	lsls	r1, r2, #5
 800a760:	693a      	ldr	r2, [r7, #16]
 800a762:	440a      	add	r2, r1
 800a764:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a768:	f043 0302 	orr.w	r3, r3, #2
 800a76c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	68fa      	ldr	r2, [r7, #12]
 800a774:	b2d2      	uxtb	r2, r2
 800a776:	4611      	mov	r1, r2
 800a778:	4618      	mov	r0, r3
 800a77a:	f003 f9a8 	bl	800dace <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	015a      	lsls	r2, r3, #5
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	4413      	add	r3, r2
 800a786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a78a:	461a      	mov	r2, r3
 800a78c:	2340      	movs	r3, #64	; 0x40
 800a78e:	6093      	str	r3, [r2, #8]
}
 800a790:	e2a6      	b.n	800ace0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	015a      	lsls	r2, r3, #5
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	4413      	add	r3, r2
 800a79a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a79e:	689b      	ldr	r3, [r3, #8]
 800a7a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a7a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7a8:	d122      	bne.n	800a7f0 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	015a      	lsls	r2, r3, #5
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	4413      	add	r3, r2
 800a7b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7b6:	68db      	ldr	r3, [r3, #12]
 800a7b8:	68fa      	ldr	r2, [r7, #12]
 800a7ba:	0151      	lsls	r1, r2, #5
 800a7bc:	693a      	ldr	r2, [r7, #16]
 800a7be:	440a      	add	r2, r1
 800a7c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a7c4:	f043 0302 	orr.w	r3, r3, #2
 800a7c8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	68fa      	ldr	r2, [r7, #12]
 800a7d0:	b2d2      	uxtb	r2, r2
 800a7d2:	4611      	mov	r1, r2
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f003 f97a 	bl	800dace <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	015a      	lsls	r2, r3, #5
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	4413      	add	r3, r2
 800a7e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7e6:	461a      	mov	r2, r3
 800a7e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a7ec:	6093      	str	r3, [r2, #8]
}
 800a7ee:	e277      	b.n	800ace0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	015a      	lsls	r2, r3, #5
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	4413      	add	r3, r2
 800a7f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7fc:	689b      	ldr	r3, [r3, #8]
 800a7fe:	f003 0301 	and.w	r3, r3, #1
 800a802:	2b01      	cmp	r3, #1
 800a804:	d135      	bne.n	800a872 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800a806:	6879      	ldr	r1, [r7, #4]
 800a808:	68fa      	ldr	r2, [r7, #12]
 800a80a:	4613      	mov	r3, r2
 800a80c:	009b      	lsls	r3, r3, #2
 800a80e:	4413      	add	r3, r2
 800a810:	00db      	lsls	r3, r3, #3
 800a812:	440b      	add	r3, r1
 800a814:	3358      	adds	r3, #88	; 0x58
 800a816:	2200      	movs	r2, #0
 800a818:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	015a      	lsls	r2, r3, #5
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	4413      	add	r3, r2
 800a822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a826:	68db      	ldr	r3, [r3, #12]
 800a828:	68fa      	ldr	r2, [r7, #12]
 800a82a:	0151      	lsls	r1, r2, #5
 800a82c:	693a      	ldr	r2, [r7, #16]
 800a82e:	440a      	add	r2, r1
 800a830:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a834:	f043 0302 	orr.w	r3, r3, #2
 800a838:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	68fa      	ldr	r2, [r7, #12]
 800a840:	b2d2      	uxtb	r2, r2
 800a842:	4611      	mov	r1, r2
 800a844:	4618      	mov	r0, r3
 800a846:	f003 f942 	bl	800dace <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	015a      	lsls	r2, r3, #5
 800a84e:	693b      	ldr	r3, [r7, #16]
 800a850:	4413      	add	r3, r2
 800a852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a856:	461a      	mov	r2, r3
 800a858:	2301      	movs	r3, #1
 800a85a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800a85c:	6879      	ldr	r1, [r7, #4]
 800a85e:	68fa      	ldr	r2, [r7, #12]
 800a860:	4613      	mov	r3, r2
 800a862:	009b      	lsls	r3, r3, #2
 800a864:	4413      	add	r3, r2
 800a866:	00db      	lsls	r3, r3, #3
 800a868:	440b      	add	r3, r1
 800a86a:	335d      	adds	r3, #93	; 0x5d
 800a86c:	2201      	movs	r2, #1
 800a86e:	701a      	strb	r2, [r3, #0]
}
 800a870:	e236      	b.n	800ace0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	015a      	lsls	r2, r3, #5
 800a876:	693b      	ldr	r3, [r7, #16]
 800a878:	4413      	add	r3, r2
 800a87a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a87e:	689b      	ldr	r3, [r3, #8]
 800a880:	f003 0308 	and.w	r3, r3, #8
 800a884:	2b08      	cmp	r3, #8
 800a886:	d12b      	bne.n	800a8e0 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	015a      	lsls	r2, r3, #5
 800a88c:	693b      	ldr	r3, [r7, #16]
 800a88e:	4413      	add	r3, r2
 800a890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a894:	461a      	mov	r2, r3
 800a896:	2308      	movs	r3, #8
 800a898:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	015a      	lsls	r2, r3, #5
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	4413      	add	r3, r2
 800a8a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8a6:	68db      	ldr	r3, [r3, #12]
 800a8a8:	68fa      	ldr	r2, [r7, #12]
 800a8aa:	0151      	lsls	r1, r2, #5
 800a8ac:	693a      	ldr	r2, [r7, #16]
 800a8ae:	440a      	add	r2, r1
 800a8b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a8b4:	f043 0302 	orr.w	r3, r3, #2
 800a8b8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	68fa      	ldr	r2, [r7, #12]
 800a8c0:	b2d2      	uxtb	r2, r2
 800a8c2:	4611      	mov	r1, r2
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f003 f902 	bl	800dace <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800a8ca:	6879      	ldr	r1, [r7, #4]
 800a8cc:	68fa      	ldr	r2, [r7, #12]
 800a8ce:	4613      	mov	r3, r2
 800a8d0:	009b      	lsls	r3, r3, #2
 800a8d2:	4413      	add	r3, r2
 800a8d4:	00db      	lsls	r3, r3, #3
 800a8d6:	440b      	add	r3, r1
 800a8d8:	335d      	adds	r3, #93	; 0x5d
 800a8da:	2205      	movs	r2, #5
 800a8dc:	701a      	strb	r2, [r3, #0]
}
 800a8de:	e1ff      	b.n	800ace0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	015a      	lsls	r2, r3, #5
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	4413      	add	r3, r2
 800a8e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8ec:	689b      	ldr	r3, [r3, #8]
 800a8ee:	f003 0310 	and.w	r3, r3, #16
 800a8f2:	2b10      	cmp	r3, #16
 800a8f4:	d155      	bne.n	800a9a2 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800a8f6:	6879      	ldr	r1, [r7, #4]
 800a8f8:	68fa      	ldr	r2, [r7, #12]
 800a8fa:	4613      	mov	r3, r2
 800a8fc:	009b      	lsls	r3, r3, #2
 800a8fe:	4413      	add	r3, r2
 800a900:	00db      	lsls	r3, r3, #3
 800a902:	440b      	add	r3, r1
 800a904:	3358      	adds	r3, #88	; 0x58
 800a906:	2200      	movs	r2, #0
 800a908:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800a90a:	6879      	ldr	r1, [r7, #4]
 800a90c:	68fa      	ldr	r2, [r7, #12]
 800a90e:	4613      	mov	r3, r2
 800a910:	009b      	lsls	r3, r3, #2
 800a912:	4413      	add	r3, r2
 800a914:	00db      	lsls	r3, r3, #3
 800a916:	440b      	add	r3, r1
 800a918:	335d      	adds	r3, #93	; 0x5d
 800a91a:	2203      	movs	r2, #3
 800a91c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800a91e:	6879      	ldr	r1, [r7, #4]
 800a920:	68fa      	ldr	r2, [r7, #12]
 800a922:	4613      	mov	r3, r2
 800a924:	009b      	lsls	r3, r3, #2
 800a926:	4413      	add	r3, r2
 800a928:	00db      	lsls	r3, r3, #3
 800a92a:	440b      	add	r3, r1
 800a92c:	333d      	adds	r3, #61	; 0x3d
 800a92e:	781b      	ldrb	r3, [r3, #0]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d114      	bne.n	800a95e <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 800a934:	6879      	ldr	r1, [r7, #4]
 800a936:	68fa      	ldr	r2, [r7, #12]
 800a938:	4613      	mov	r3, r2
 800a93a:	009b      	lsls	r3, r3, #2
 800a93c:	4413      	add	r3, r2
 800a93e:	00db      	lsls	r3, r3, #3
 800a940:	440b      	add	r3, r1
 800a942:	333c      	adds	r3, #60	; 0x3c
 800a944:	781b      	ldrb	r3, [r3, #0]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d109      	bne.n	800a95e <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800a94a:	6879      	ldr	r1, [r7, #4]
 800a94c:	68fa      	ldr	r2, [r7, #12]
 800a94e:	4613      	mov	r3, r2
 800a950:	009b      	lsls	r3, r3, #2
 800a952:	4413      	add	r3, r2
 800a954:	00db      	lsls	r3, r3, #3
 800a956:	440b      	add	r3, r1
 800a958:	333d      	adds	r3, #61	; 0x3d
 800a95a:	2201      	movs	r2, #1
 800a95c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	015a      	lsls	r2, r3, #5
 800a962:	693b      	ldr	r3, [r7, #16]
 800a964:	4413      	add	r3, r2
 800a966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a96a:	68db      	ldr	r3, [r3, #12]
 800a96c:	68fa      	ldr	r2, [r7, #12]
 800a96e:	0151      	lsls	r1, r2, #5
 800a970:	693a      	ldr	r2, [r7, #16]
 800a972:	440a      	add	r2, r1
 800a974:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a978:	f043 0302 	orr.w	r3, r3, #2
 800a97c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	68fa      	ldr	r2, [r7, #12]
 800a984:	b2d2      	uxtb	r2, r2
 800a986:	4611      	mov	r1, r2
 800a988:	4618      	mov	r0, r3
 800a98a:	f003 f8a0 	bl	800dace <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	015a      	lsls	r2, r3, #5
 800a992:	693b      	ldr	r3, [r7, #16]
 800a994:	4413      	add	r3, r2
 800a996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a99a:	461a      	mov	r2, r3
 800a99c:	2310      	movs	r3, #16
 800a99e:	6093      	str	r3, [r2, #8]
}
 800a9a0:	e19e      	b.n	800ace0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	015a      	lsls	r2, r3, #5
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	4413      	add	r3, r2
 800a9aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9ae:	689b      	ldr	r3, [r3, #8]
 800a9b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9b4:	2b80      	cmp	r3, #128	; 0x80
 800a9b6:	d12b      	bne.n	800aa10 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	015a      	lsls	r2, r3, #5
 800a9bc:	693b      	ldr	r3, [r7, #16]
 800a9be:	4413      	add	r3, r2
 800a9c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9c4:	68db      	ldr	r3, [r3, #12]
 800a9c6:	68fa      	ldr	r2, [r7, #12]
 800a9c8:	0151      	lsls	r1, r2, #5
 800a9ca:	693a      	ldr	r2, [r7, #16]
 800a9cc:	440a      	add	r2, r1
 800a9ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a9d2:	f043 0302 	orr.w	r3, r3, #2
 800a9d6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	68fa      	ldr	r2, [r7, #12]
 800a9de:	b2d2      	uxtb	r2, r2
 800a9e0:	4611      	mov	r1, r2
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f003 f873 	bl	800dace <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800a9e8:	6879      	ldr	r1, [r7, #4]
 800a9ea:	68fa      	ldr	r2, [r7, #12]
 800a9ec:	4613      	mov	r3, r2
 800a9ee:	009b      	lsls	r3, r3, #2
 800a9f0:	4413      	add	r3, r2
 800a9f2:	00db      	lsls	r3, r3, #3
 800a9f4:	440b      	add	r3, r1
 800a9f6:	335d      	adds	r3, #93	; 0x5d
 800a9f8:	2206      	movs	r2, #6
 800a9fa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	015a      	lsls	r2, r3, #5
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	4413      	add	r3, r2
 800aa04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa08:	461a      	mov	r2, r3
 800aa0a:	2380      	movs	r3, #128	; 0x80
 800aa0c:	6093      	str	r3, [r2, #8]
}
 800aa0e:	e167      	b.n	800ace0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	015a      	lsls	r2, r3, #5
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	4413      	add	r3, r2
 800aa18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa1c:	689b      	ldr	r3, [r3, #8]
 800aa1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa26:	d135      	bne.n	800aa94 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	015a      	lsls	r2, r3, #5
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	4413      	add	r3, r2
 800aa30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa34:	68db      	ldr	r3, [r3, #12]
 800aa36:	68fa      	ldr	r2, [r7, #12]
 800aa38:	0151      	lsls	r1, r2, #5
 800aa3a:	693a      	ldr	r2, [r7, #16]
 800aa3c:	440a      	add	r2, r1
 800aa3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa42:	f043 0302 	orr.w	r3, r3, #2
 800aa46:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	68fa      	ldr	r2, [r7, #12]
 800aa4e:	b2d2      	uxtb	r2, r2
 800aa50:	4611      	mov	r1, r2
 800aa52:	4618      	mov	r0, r3
 800aa54:	f003 f83b 	bl	800dace <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	015a      	lsls	r2, r3, #5
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	4413      	add	r3, r2
 800aa60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa64:	461a      	mov	r2, r3
 800aa66:	2310      	movs	r3, #16
 800aa68:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	015a      	lsls	r2, r3, #5
 800aa6e:	693b      	ldr	r3, [r7, #16]
 800aa70:	4413      	add	r3, r2
 800aa72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa76:	461a      	mov	r2, r3
 800aa78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa7c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800aa7e:	6879      	ldr	r1, [r7, #4]
 800aa80:	68fa      	ldr	r2, [r7, #12]
 800aa82:	4613      	mov	r3, r2
 800aa84:	009b      	lsls	r3, r3, #2
 800aa86:	4413      	add	r3, r2
 800aa88:	00db      	lsls	r3, r3, #3
 800aa8a:	440b      	add	r3, r1
 800aa8c:	335d      	adds	r3, #93	; 0x5d
 800aa8e:	2208      	movs	r2, #8
 800aa90:	701a      	strb	r2, [r3, #0]
}
 800aa92:	e125      	b.n	800ace0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	015a      	lsls	r2, r3, #5
 800aa98:	693b      	ldr	r3, [r7, #16]
 800aa9a:	4413      	add	r3, r2
 800aa9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aaa0:	689b      	ldr	r3, [r3, #8]
 800aaa2:	f003 0302 	and.w	r3, r3, #2
 800aaa6:	2b02      	cmp	r3, #2
 800aaa8:	f040 811a 	bne.w	800ace0 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	015a      	lsls	r2, r3, #5
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	4413      	add	r3, r2
 800aab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aab8:	68db      	ldr	r3, [r3, #12]
 800aaba:	68fa      	ldr	r2, [r7, #12]
 800aabc:	0151      	lsls	r1, r2, #5
 800aabe:	693a      	ldr	r2, [r7, #16]
 800aac0:	440a      	add	r2, r1
 800aac2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aac6:	f023 0302 	bic.w	r3, r3, #2
 800aaca:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800aacc:	6879      	ldr	r1, [r7, #4]
 800aace:	68fa      	ldr	r2, [r7, #12]
 800aad0:	4613      	mov	r3, r2
 800aad2:	009b      	lsls	r3, r3, #2
 800aad4:	4413      	add	r3, r2
 800aad6:	00db      	lsls	r3, r3, #3
 800aad8:	440b      	add	r3, r1
 800aada:	335d      	adds	r3, #93	; 0x5d
 800aadc:	781b      	ldrb	r3, [r3, #0]
 800aade:	2b01      	cmp	r3, #1
 800aae0:	d137      	bne.n	800ab52 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800aae2:	6879      	ldr	r1, [r7, #4]
 800aae4:	68fa      	ldr	r2, [r7, #12]
 800aae6:	4613      	mov	r3, r2
 800aae8:	009b      	lsls	r3, r3, #2
 800aaea:	4413      	add	r3, r2
 800aaec:	00db      	lsls	r3, r3, #3
 800aaee:	440b      	add	r3, r1
 800aaf0:	335c      	adds	r3, #92	; 0x5c
 800aaf2:	2201      	movs	r2, #1
 800aaf4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800aaf6:	6879      	ldr	r1, [r7, #4]
 800aaf8:	68fa      	ldr	r2, [r7, #12]
 800aafa:	4613      	mov	r3, r2
 800aafc:	009b      	lsls	r3, r3, #2
 800aafe:	4413      	add	r3, r2
 800ab00:	00db      	lsls	r3, r3, #3
 800ab02:	440b      	add	r3, r1
 800ab04:	333f      	adds	r3, #63	; 0x3f
 800ab06:	781b      	ldrb	r3, [r3, #0]
 800ab08:	2b02      	cmp	r3, #2
 800ab0a:	d00b      	beq.n	800ab24 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800ab0c:	6879      	ldr	r1, [r7, #4]
 800ab0e:	68fa      	ldr	r2, [r7, #12]
 800ab10:	4613      	mov	r3, r2
 800ab12:	009b      	lsls	r3, r3, #2
 800ab14:	4413      	add	r3, r2
 800ab16:	00db      	lsls	r3, r3, #3
 800ab18:	440b      	add	r3, r1
 800ab1a:	333f      	adds	r3, #63	; 0x3f
 800ab1c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800ab1e:	2b03      	cmp	r3, #3
 800ab20:	f040 80c5 	bne.w	800acae <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800ab24:	6879      	ldr	r1, [r7, #4]
 800ab26:	68fa      	ldr	r2, [r7, #12]
 800ab28:	4613      	mov	r3, r2
 800ab2a:	009b      	lsls	r3, r3, #2
 800ab2c:	4413      	add	r3, r2
 800ab2e:	00db      	lsls	r3, r3, #3
 800ab30:	440b      	add	r3, r1
 800ab32:	3351      	adds	r3, #81	; 0x51
 800ab34:	781b      	ldrb	r3, [r3, #0]
 800ab36:	f083 0301 	eor.w	r3, r3, #1
 800ab3a:	b2d8      	uxtb	r0, r3
 800ab3c:	6879      	ldr	r1, [r7, #4]
 800ab3e:	68fa      	ldr	r2, [r7, #12]
 800ab40:	4613      	mov	r3, r2
 800ab42:	009b      	lsls	r3, r3, #2
 800ab44:	4413      	add	r3, r2
 800ab46:	00db      	lsls	r3, r3, #3
 800ab48:	440b      	add	r3, r1
 800ab4a:	3351      	adds	r3, #81	; 0x51
 800ab4c:	4602      	mov	r2, r0
 800ab4e:	701a      	strb	r2, [r3, #0]
 800ab50:	e0ad      	b.n	800acae <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800ab52:	6879      	ldr	r1, [r7, #4]
 800ab54:	68fa      	ldr	r2, [r7, #12]
 800ab56:	4613      	mov	r3, r2
 800ab58:	009b      	lsls	r3, r3, #2
 800ab5a:	4413      	add	r3, r2
 800ab5c:	00db      	lsls	r3, r3, #3
 800ab5e:	440b      	add	r3, r1
 800ab60:	335d      	adds	r3, #93	; 0x5d
 800ab62:	781b      	ldrb	r3, [r3, #0]
 800ab64:	2b03      	cmp	r3, #3
 800ab66:	d10a      	bne.n	800ab7e <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800ab68:	6879      	ldr	r1, [r7, #4]
 800ab6a:	68fa      	ldr	r2, [r7, #12]
 800ab6c:	4613      	mov	r3, r2
 800ab6e:	009b      	lsls	r3, r3, #2
 800ab70:	4413      	add	r3, r2
 800ab72:	00db      	lsls	r3, r3, #3
 800ab74:	440b      	add	r3, r1
 800ab76:	335c      	adds	r3, #92	; 0x5c
 800ab78:	2202      	movs	r2, #2
 800ab7a:	701a      	strb	r2, [r3, #0]
 800ab7c:	e097      	b.n	800acae <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800ab7e:	6879      	ldr	r1, [r7, #4]
 800ab80:	68fa      	ldr	r2, [r7, #12]
 800ab82:	4613      	mov	r3, r2
 800ab84:	009b      	lsls	r3, r3, #2
 800ab86:	4413      	add	r3, r2
 800ab88:	00db      	lsls	r3, r3, #3
 800ab8a:	440b      	add	r3, r1
 800ab8c:	335d      	adds	r3, #93	; 0x5d
 800ab8e:	781b      	ldrb	r3, [r3, #0]
 800ab90:	2b04      	cmp	r3, #4
 800ab92:	d10a      	bne.n	800abaa <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800ab94:	6879      	ldr	r1, [r7, #4]
 800ab96:	68fa      	ldr	r2, [r7, #12]
 800ab98:	4613      	mov	r3, r2
 800ab9a:	009b      	lsls	r3, r3, #2
 800ab9c:	4413      	add	r3, r2
 800ab9e:	00db      	lsls	r3, r3, #3
 800aba0:	440b      	add	r3, r1
 800aba2:	335c      	adds	r3, #92	; 0x5c
 800aba4:	2202      	movs	r2, #2
 800aba6:	701a      	strb	r2, [r3, #0]
 800aba8:	e081      	b.n	800acae <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800abaa:	6879      	ldr	r1, [r7, #4]
 800abac:	68fa      	ldr	r2, [r7, #12]
 800abae:	4613      	mov	r3, r2
 800abb0:	009b      	lsls	r3, r3, #2
 800abb2:	4413      	add	r3, r2
 800abb4:	00db      	lsls	r3, r3, #3
 800abb6:	440b      	add	r3, r1
 800abb8:	335d      	adds	r3, #93	; 0x5d
 800abba:	781b      	ldrb	r3, [r3, #0]
 800abbc:	2b05      	cmp	r3, #5
 800abbe:	d10a      	bne.n	800abd6 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800abc0:	6879      	ldr	r1, [r7, #4]
 800abc2:	68fa      	ldr	r2, [r7, #12]
 800abc4:	4613      	mov	r3, r2
 800abc6:	009b      	lsls	r3, r3, #2
 800abc8:	4413      	add	r3, r2
 800abca:	00db      	lsls	r3, r3, #3
 800abcc:	440b      	add	r3, r1
 800abce:	335c      	adds	r3, #92	; 0x5c
 800abd0:	2205      	movs	r2, #5
 800abd2:	701a      	strb	r2, [r3, #0]
 800abd4:	e06b      	b.n	800acae <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800abd6:	6879      	ldr	r1, [r7, #4]
 800abd8:	68fa      	ldr	r2, [r7, #12]
 800abda:	4613      	mov	r3, r2
 800abdc:	009b      	lsls	r3, r3, #2
 800abde:	4413      	add	r3, r2
 800abe0:	00db      	lsls	r3, r3, #3
 800abe2:	440b      	add	r3, r1
 800abe4:	335d      	adds	r3, #93	; 0x5d
 800abe6:	781b      	ldrb	r3, [r3, #0]
 800abe8:	2b06      	cmp	r3, #6
 800abea:	d00a      	beq.n	800ac02 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800abec:	6879      	ldr	r1, [r7, #4]
 800abee:	68fa      	ldr	r2, [r7, #12]
 800abf0:	4613      	mov	r3, r2
 800abf2:	009b      	lsls	r3, r3, #2
 800abf4:	4413      	add	r3, r2
 800abf6:	00db      	lsls	r3, r3, #3
 800abf8:	440b      	add	r3, r1
 800abfa:	335d      	adds	r3, #93	; 0x5d
 800abfc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800abfe:	2b08      	cmp	r3, #8
 800ac00:	d155      	bne.n	800acae <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800ac02:	6879      	ldr	r1, [r7, #4]
 800ac04:	68fa      	ldr	r2, [r7, #12]
 800ac06:	4613      	mov	r3, r2
 800ac08:	009b      	lsls	r3, r3, #2
 800ac0a:	4413      	add	r3, r2
 800ac0c:	00db      	lsls	r3, r3, #3
 800ac0e:	440b      	add	r3, r1
 800ac10:	3358      	adds	r3, #88	; 0x58
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	1c59      	adds	r1, r3, #1
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	68fa      	ldr	r2, [r7, #12]
 800ac1a:	4613      	mov	r3, r2
 800ac1c:	009b      	lsls	r3, r3, #2
 800ac1e:	4413      	add	r3, r2
 800ac20:	00db      	lsls	r3, r3, #3
 800ac22:	4403      	add	r3, r0
 800ac24:	3358      	adds	r3, #88	; 0x58
 800ac26:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800ac28:	6879      	ldr	r1, [r7, #4]
 800ac2a:	68fa      	ldr	r2, [r7, #12]
 800ac2c:	4613      	mov	r3, r2
 800ac2e:	009b      	lsls	r3, r3, #2
 800ac30:	4413      	add	r3, r2
 800ac32:	00db      	lsls	r3, r3, #3
 800ac34:	440b      	add	r3, r1
 800ac36:	3358      	adds	r3, #88	; 0x58
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	2b03      	cmp	r3, #3
 800ac3c:	d914      	bls.n	800ac68 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800ac3e:	6879      	ldr	r1, [r7, #4]
 800ac40:	68fa      	ldr	r2, [r7, #12]
 800ac42:	4613      	mov	r3, r2
 800ac44:	009b      	lsls	r3, r3, #2
 800ac46:	4413      	add	r3, r2
 800ac48:	00db      	lsls	r3, r3, #3
 800ac4a:	440b      	add	r3, r1
 800ac4c:	3358      	adds	r3, #88	; 0x58
 800ac4e:	2200      	movs	r2, #0
 800ac50:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800ac52:	6879      	ldr	r1, [r7, #4]
 800ac54:	68fa      	ldr	r2, [r7, #12]
 800ac56:	4613      	mov	r3, r2
 800ac58:	009b      	lsls	r3, r3, #2
 800ac5a:	4413      	add	r3, r2
 800ac5c:	00db      	lsls	r3, r3, #3
 800ac5e:	440b      	add	r3, r1
 800ac60:	335c      	adds	r3, #92	; 0x5c
 800ac62:	2204      	movs	r2, #4
 800ac64:	701a      	strb	r2, [r3, #0]
 800ac66:	e009      	b.n	800ac7c <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800ac68:	6879      	ldr	r1, [r7, #4]
 800ac6a:	68fa      	ldr	r2, [r7, #12]
 800ac6c:	4613      	mov	r3, r2
 800ac6e:	009b      	lsls	r3, r3, #2
 800ac70:	4413      	add	r3, r2
 800ac72:	00db      	lsls	r3, r3, #3
 800ac74:	440b      	add	r3, r1
 800ac76:	335c      	adds	r3, #92	; 0x5c
 800ac78:	2202      	movs	r2, #2
 800ac7a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	015a      	lsls	r2, r3, #5
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	4413      	add	r3, r2
 800ac84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ac92:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ac9a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	015a      	lsls	r2, r3, #5
 800aca0:	693b      	ldr	r3, [r7, #16]
 800aca2:	4413      	add	r3, r2
 800aca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aca8:	461a      	mov	r2, r3
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	015a      	lsls	r2, r3, #5
 800acb2:	693b      	ldr	r3, [r7, #16]
 800acb4:	4413      	add	r3, r2
 800acb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acba:	461a      	mov	r2, r3
 800acbc:	2302      	movs	r3, #2
 800acbe:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	b2d8      	uxtb	r0, r3
 800acc4:	6879      	ldr	r1, [r7, #4]
 800acc6:	68fa      	ldr	r2, [r7, #12]
 800acc8:	4613      	mov	r3, r2
 800acca:	009b      	lsls	r3, r3, #2
 800accc:	4413      	add	r3, r2
 800acce:	00db      	lsls	r3, r3, #3
 800acd0:	440b      	add	r3, r1
 800acd2:	335c      	adds	r3, #92	; 0x5c
 800acd4:	781b      	ldrb	r3, [r3, #0]
 800acd6:	461a      	mov	r2, r3
 800acd8:	4601      	mov	r1, r0
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f004 f9fa 	bl	800f0d4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800ace0:	bf00      	nop
 800ace2:	3718      	adds	r7, #24
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}

0800ace8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b08a      	sub	sp, #40	; 0x28
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf8:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	6a1b      	ldr	r3, [r3, #32]
 800ad00:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800ad02:	69fb      	ldr	r3, [r7, #28]
 800ad04:	f003 030f 	and.w	r3, r3, #15
 800ad08:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800ad0a:	69fb      	ldr	r3, [r7, #28]
 800ad0c:	0c5b      	lsrs	r3, r3, #17
 800ad0e:	f003 030f 	and.w	r3, r3, #15
 800ad12:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800ad14:	69fb      	ldr	r3, [r7, #28]
 800ad16:	091b      	lsrs	r3, r3, #4
 800ad18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ad1c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	2b02      	cmp	r3, #2
 800ad22:	d003      	beq.n	800ad2c <HCD_RXQLVL_IRQHandler+0x44>
 800ad24:	2b05      	cmp	r3, #5
 800ad26:	f000 8082 	beq.w	800ae2e <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800ad2a:	e083      	b.n	800ae34 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d07f      	beq.n	800ae32 <HCD_RXQLVL_IRQHandler+0x14a>
 800ad32:	6879      	ldr	r1, [r7, #4]
 800ad34:	69ba      	ldr	r2, [r7, #24]
 800ad36:	4613      	mov	r3, r2
 800ad38:	009b      	lsls	r3, r3, #2
 800ad3a:	4413      	add	r3, r2
 800ad3c:	00db      	lsls	r3, r3, #3
 800ad3e:	440b      	add	r3, r1
 800ad40:	3344      	adds	r3, #68	; 0x44
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d074      	beq.n	800ae32 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6818      	ldr	r0, [r3, #0]
 800ad4c:	6879      	ldr	r1, [r7, #4]
 800ad4e:	69ba      	ldr	r2, [r7, #24]
 800ad50:	4613      	mov	r3, r2
 800ad52:	009b      	lsls	r3, r3, #2
 800ad54:	4413      	add	r3, r2
 800ad56:	00db      	lsls	r3, r3, #3
 800ad58:	440b      	add	r3, r1
 800ad5a:	3344      	adds	r3, #68	; 0x44
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	693a      	ldr	r2, [r7, #16]
 800ad60:	b292      	uxth	r2, r2
 800ad62:	4619      	mov	r1, r3
 800ad64:	f002 fa93 	bl	800d28e <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 800ad68:	6879      	ldr	r1, [r7, #4]
 800ad6a:	69ba      	ldr	r2, [r7, #24]
 800ad6c:	4613      	mov	r3, r2
 800ad6e:	009b      	lsls	r3, r3, #2
 800ad70:	4413      	add	r3, r2
 800ad72:	00db      	lsls	r3, r3, #3
 800ad74:	440b      	add	r3, r1
 800ad76:	3344      	adds	r3, #68	; 0x44
 800ad78:	681a      	ldr	r2, [r3, #0]
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	18d1      	adds	r1, r2, r3
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	69ba      	ldr	r2, [r7, #24]
 800ad82:	4613      	mov	r3, r2
 800ad84:	009b      	lsls	r3, r3, #2
 800ad86:	4413      	add	r3, r2
 800ad88:	00db      	lsls	r3, r3, #3
 800ad8a:	4403      	add	r3, r0
 800ad8c:	3344      	adds	r3, #68	; 0x44
 800ad8e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800ad90:	6879      	ldr	r1, [r7, #4]
 800ad92:	69ba      	ldr	r2, [r7, #24]
 800ad94:	4613      	mov	r3, r2
 800ad96:	009b      	lsls	r3, r3, #2
 800ad98:	4413      	add	r3, r2
 800ad9a:	00db      	lsls	r3, r3, #3
 800ad9c:	440b      	add	r3, r1
 800ad9e:	334c      	adds	r3, #76	; 0x4c
 800ada0:	681a      	ldr	r2, [r3, #0]
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	18d1      	adds	r1, r2, r3
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	69ba      	ldr	r2, [r7, #24]
 800adaa:	4613      	mov	r3, r2
 800adac:	009b      	lsls	r3, r3, #2
 800adae:	4413      	add	r3, r2
 800adb0:	00db      	lsls	r3, r3, #3
 800adb2:	4403      	add	r3, r0
 800adb4:	334c      	adds	r3, #76	; 0x4c
 800adb6:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800adb8:	69bb      	ldr	r3, [r7, #24]
 800adba:	015a      	lsls	r2, r3, #5
 800adbc:	6a3b      	ldr	r3, [r7, #32]
 800adbe:	4413      	add	r3, r2
 800adc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adc4:	691a      	ldr	r2, [r3, #16]
 800adc6:	4b1d      	ldr	r3, [pc, #116]	; (800ae3c <HCD_RXQLVL_IRQHandler+0x154>)
 800adc8:	4013      	ands	r3, r2
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d031      	beq.n	800ae32 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800adce:	69bb      	ldr	r3, [r7, #24]
 800add0:	015a      	lsls	r2, r3, #5
 800add2:	6a3b      	ldr	r3, [r7, #32]
 800add4:	4413      	add	r3, r2
 800add6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ade4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800adec:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800adee:	69bb      	ldr	r3, [r7, #24]
 800adf0:	015a      	lsls	r2, r3, #5
 800adf2:	6a3b      	ldr	r3, [r7, #32]
 800adf4:	4413      	add	r3, r2
 800adf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adfa:	461a      	mov	r2, r3
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 800ae00:	6879      	ldr	r1, [r7, #4]
 800ae02:	69ba      	ldr	r2, [r7, #24]
 800ae04:	4613      	mov	r3, r2
 800ae06:	009b      	lsls	r3, r3, #2
 800ae08:	4413      	add	r3, r2
 800ae0a:	00db      	lsls	r3, r3, #3
 800ae0c:	440b      	add	r3, r1
 800ae0e:	3350      	adds	r3, #80	; 0x50
 800ae10:	781b      	ldrb	r3, [r3, #0]
 800ae12:	f083 0301 	eor.w	r3, r3, #1
 800ae16:	b2d8      	uxtb	r0, r3
 800ae18:	6879      	ldr	r1, [r7, #4]
 800ae1a:	69ba      	ldr	r2, [r7, #24]
 800ae1c:	4613      	mov	r3, r2
 800ae1e:	009b      	lsls	r3, r3, #2
 800ae20:	4413      	add	r3, r2
 800ae22:	00db      	lsls	r3, r3, #3
 800ae24:	440b      	add	r3, r1
 800ae26:	3350      	adds	r3, #80	; 0x50
 800ae28:	4602      	mov	r2, r0
 800ae2a:	701a      	strb	r2, [r3, #0]
      break;
 800ae2c:	e001      	b.n	800ae32 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800ae2e:	bf00      	nop
 800ae30:	e000      	b.n	800ae34 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800ae32:	bf00      	nop
  }
}
 800ae34:	bf00      	nop
 800ae36:	3728      	adds	r7, #40	; 0x28
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}
 800ae3c:	1ff80000 	.word	0x1ff80000

0800ae40 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b086      	sub	sp, #24
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800ae52:	693b      	ldr	r3, [r7, #16]
 800ae54:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800ae6c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	f003 0302 	and.w	r3, r3, #2
 800ae74:	2b02      	cmp	r3, #2
 800ae76:	d10b      	bne.n	800ae90 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	f003 0301 	and.w	r3, r3, #1
 800ae7e:	2b01      	cmp	r3, #1
 800ae80:	d102      	bne.n	800ae88 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f004 f90a 	bl	800f09c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	f043 0302 	orr.w	r3, r3, #2
 800ae8e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f003 0308 	and.w	r3, r3, #8
 800ae96:	2b08      	cmp	r3, #8
 800ae98:	d132      	bne.n	800af00 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	f043 0308 	orr.w	r3, r3, #8
 800aea0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	f003 0304 	and.w	r3, r3, #4
 800aea8:	2b04      	cmp	r3, #4
 800aeaa:	d126      	bne.n	800aefa <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	699b      	ldr	r3, [r3, #24]
 800aeb0:	2b02      	cmp	r3, #2
 800aeb2:	d113      	bne.n	800aedc <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800aeba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800aebe:	d106      	bne.n	800aece <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	2102      	movs	r1, #2
 800aec6:	4618      	mov	r0, r3
 800aec8:	f002 fb1c 	bl	800d504 <USB_InitFSLSPClkSel>
 800aecc:	e011      	b.n	800aef2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	2101      	movs	r1, #1
 800aed4:	4618      	mov	r0, r3
 800aed6:	f002 fb15 	bl	800d504 <USB_InitFSLSPClkSel>
 800aeda:	e00a      	b.n	800aef2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	68db      	ldr	r3, [r3, #12]
 800aee0:	2b01      	cmp	r3, #1
 800aee2:	d106      	bne.n	800aef2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800aee4:	693b      	ldr	r3, [r7, #16]
 800aee6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aeea:	461a      	mov	r2, r3
 800aeec:	f64e 2360 	movw	r3, #60000	; 0xea60
 800aef0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f004 f8fc 	bl	800f0f0 <HAL_HCD_PortEnabled_Callback>
 800aef8:	e002      	b.n	800af00 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f004 f906 	bl	800f10c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	f003 0320 	and.w	r3, r3, #32
 800af06:	2b20      	cmp	r3, #32
 800af08:	d103      	bne.n	800af12 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	f043 0320 	orr.w	r3, r3, #32
 800af10:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800af12:	693b      	ldr	r3, [r7, #16]
 800af14:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800af18:	461a      	mov	r2, r3
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	6013      	str	r3, [r2, #0]
}
 800af1e:	bf00      	nop
 800af20:	3718      	adds	r7, #24
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}
	...

0800af28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b084      	sub	sp, #16
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d101      	bne.n	800af3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800af36:	2301      	movs	r3, #1
 800af38:	e11f      	b.n	800b17a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af40:	b2db      	uxtb	r3, r3
 800af42:	2b00      	cmp	r3, #0
 800af44:	d106      	bne.n	800af54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2200      	movs	r2, #0
 800af4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f7fd fd96 	bl	8008a80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2224      	movs	r2, #36	; 0x24
 800af58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	681a      	ldr	r2, [r3, #0]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f022 0201 	bic.w	r2, r2, #1
 800af6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	681a      	ldr	r2, [r3, #0]
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800af7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	681a      	ldr	r2, [r3, #0]
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800af8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800af8c:	f001 f9de 	bl	800c34c <HAL_RCC_GetPCLK1Freq>
 800af90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	685b      	ldr	r3, [r3, #4]
 800af96:	4a7b      	ldr	r2, [pc, #492]	; (800b184 <HAL_I2C_Init+0x25c>)
 800af98:	4293      	cmp	r3, r2
 800af9a:	d807      	bhi.n	800afac <HAL_I2C_Init+0x84>
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	4a7a      	ldr	r2, [pc, #488]	; (800b188 <HAL_I2C_Init+0x260>)
 800afa0:	4293      	cmp	r3, r2
 800afa2:	bf94      	ite	ls
 800afa4:	2301      	movls	r3, #1
 800afa6:	2300      	movhi	r3, #0
 800afa8:	b2db      	uxtb	r3, r3
 800afaa:	e006      	b.n	800afba <HAL_I2C_Init+0x92>
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	4a77      	ldr	r2, [pc, #476]	; (800b18c <HAL_I2C_Init+0x264>)
 800afb0:	4293      	cmp	r3, r2
 800afb2:	bf94      	ite	ls
 800afb4:	2301      	movls	r3, #1
 800afb6:	2300      	movhi	r3, #0
 800afb8:	b2db      	uxtb	r3, r3
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d001      	beq.n	800afc2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800afbe:	2301      	movs	r3, #1
 800afc0:	e0db      	b.n	800b17a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	4a72      	ldr	r2, [pc, #456]	; (800b190 <HAL_I2C_Init+0x268>)
 800afc6:	fba2 2303 	umull	r2, r3, r2, r3
 800afca:	0c9b      	lsrs	r3, r3, #18
 800afcc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	685b      	ldr	r3, [r3, #4]
 800afd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	68ba      	ldr	r2, [r7, #8]
 800afde:	430a      	orrs	r2, r1
 800afe0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	6a1b      	ldr	r3, [r3, #32]
 800afe8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	685b      	ldr	r3, [r3, #4]
 800aff0:	4a64      	ldr	r2, [pc, #400]	; (800b184 <HAL_I2C_Init+0x25c>)
 800aff2:	4293      	cmp	r3, r2
 800aff4:	d802      	bhi.n	800affc <HAL_I2C_Init+0xd4>
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	3301      	adds	r3, #1
 800affa:	e009      	b.n	800b010 <HAL_I2C_Init+0xe8>
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b002:	fb02 f303 	mul.w	r3, r2, r3
 800b006:	4a63      	ldr	r2, [pc, #396]	; (800b194 <HAL_I2C_Init+0x26c>)
 800b008:	fba2 2303 	umull	r2, r3, r2, r3
 800b00c:	099b      	lsrs	r3, r3, #6
 800b00e:	3301      	adds	r3, #1
 800b010:	687a      	ldr	r2, [r7, #4]
 800b012:	6812      	ldr	r2, [r2, #0]
 800b014:	430b      	orrs	r3, r1
 800b016:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	69db      	ldr	r3, [r3, #28]
 800b01e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800b022:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	685b      	ldr	r3, [r3, #4]
 800b02a:	4956      	ldr	r1, [pc, #344]	; (800b184 <HAL_I2C_Init+0x25c>)
 800b02c:	428b      	cmp	r3, r1
 800b02e:	d80d      	bhi.n	800b04c <HAL_I2C_Init+0x124>
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	1e59      	subs	r1, r3, #1
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	685b      	ldr	r3, [r3, #4]
 800b038:	005b      	lsls	r3, r3, #1
 800b03a:	fbb1 f3f3 	udiv	r3, r1, r3
 800b03e:	3301      	adds	r3, #1
 800b040:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b044:	2b04      	cmp	r3, #4
 800b046:	bf38      	it	cc
 800b048:	2304      	movcc	r3, #4
 800b04a:	e04f      	b.n	800b0ec <HAL_I2C_Init+0x1c4>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	689b      	ldr	r3, [r3, #8]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d111      	bne.n	800b078 <HAL_I2C_Init+0x150>
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	1e58      	subs	r0, r3, #1
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	6859      	ldr	r1, [r3, #4]
 800b05c:	460b      	mov	r3, r1
 800b05e:	005b      	lsls	r3, r3, #1
 800b060:	440b      	add	r3, r1
 800b062:	fbb0 f3f3 	udiv	r3, r0, r3
 800b066:	3301      	adds	r3, #1
 800b068:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	bf0c      	ite	eq
 800b070:	2301      	moveq	r3, #1
 800b072:	2300      	movne	r3, #0
 800b074:	b2db      	uxtb	r3, r3
 800b076:	e012      	b.n	800b09e <HAL_I2C_Init+0x176>
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	1e58      	subs	r0, r3, #1
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6859      	ldr	r1, [r3, #4]
 800b080:	460b      	mov	r3, r1
 800b082:	009b      	lsls	r3, r3, #2
 800b084:	440b      	add	r3, r1
 800b086:	0099      	lsls	r1, r3, #2
 800b088:	440b      	add	r3, r1
 800b08a:	fbb0 f3f3 	udiv	r3, r0, r3
 800b08e:	3301      	adds	r3, #1
 800b090:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b094:	2b00      	cmp	r3, #0
 800b096:	bf0c      	ite	eq
 800b098:	2301      	moveq	r3, #1
 800b09a:	2300      	movne	r3, #0
 800b09c:	b2db      	uxtb	r3, r3
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d001      	beq.n	800b0a6 <HAL_I2C_Init+0x17e>
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	e022      	b.n	800b0ec <HAL_I2C_Init+0x1c4>
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	689b      	ldr	r3, [r3, #8]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d10e      	bne.n	800b0cc <HAL_I2C_Init+0x1a4>
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	1e58      	subs	r0, r3, #1
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6859      	ldr	r1, [r3, #4]
 800b0b6:	460b      	mov	r3, r1
 800b0b8:	005b      	lsls	r3, r3, #1
 800b0ba:	440b      	add	r3, r1
 800b0bc:	fbb0 f3f3 	udiv	r3, r0, r3
 800b0c0:	3301      	adds	r3, #1
 800b0c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b0c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b0ca:	e00f      	b.n	800b0ec <HAL_I2C_Init+0x1c4>
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	1e58      	subs	r0, r3, #1
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6859      	ldr	r1, [r3, #4]
 800b0d4:	460b      	mov	r3, r1
 800b0d6:	009b      	lsls	r3, r3, #2
 800b0d8:	440b      	add	r3, r1
 800b0da:	0099      	lsls	r1, r3, #2
 800b0dc:	440b      	add	r3, r1
 800b0de:	fbb0 f3f3 	udiv	r3, r0, r3
 800b0e2:	3301      	adds	r3, #1
 800b0e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b0e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b0ec:	6879      	ldr	r1, [r7, #4]
 800b0ee:	6809      	ldr	r1, [r1, #0]
 800b0f0:	4313      	orrs	r3, r2
 800b0f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	69da      	ldr	r2, [r3, #28]
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6a1b      	ldr	r3, [r3, #32]
 800b106:	431a      	orrs	r2, r3
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	430a      	orrs	r2, r1
 800b10e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	689b      	ldr	r3, [r3, #8]
 800b116:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b11a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b11e:	687a      	ldr	r2, [r7, #4]
 800b120:	6911      	ldr	r1, [r2, #16]
 800b122:	687a      	ldr	r2, [r7, #4]
 800b124:	68d2      	ldr	r2, [r2, #12]
 800b126:	4311      	orrs	r1, r2
 800b128:	687a      	ldr	r2, [r7, #4]
 800b12a:	6812      	ldr	r2, [r2, #0]
 800b12c:	430b      	orrs	r3, r1
 800b12e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	68db      	ldr	r3, [r3, #12]
 800b136:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	695a      	ldr	r2, [r3, #20]
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	699b      	ldr	r3, [r3, #24]
 800b142:	431a      	orrs	r2, r3
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	430a      	orrs	r2, r1
 800b14a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	681a      	ldr	r2, [r3, #0]
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f042 0201 	orr.w	r2, r2, #1
 800b15a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2200      	movs	r2, #0
 800b160:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2220      	movs	r2, #32
 800b166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2200      	movs	r2, #0
 800b16e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2200      	movs	r2, #0
 800b174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b178:	2300      	movs	r3, #0
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	3710      	adds	r7, #16
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}
 800b182:	bf00      	nop
 800b184:	000186a0 	.word	0x000186a0
 800b188:	001e847f 	.word	0x001e847f
 800b18c:	003d08ff 	.word	0x003d08ff
 800b190:	431bde83 	.word	0x431bde83
 800b194:	10624dd3 	.word	0x10624dd3

0800b198 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b088      	sub	sp, #32
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d101      	bne.n	800b1aa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	e128      	b.n	800b3fc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b1b0:	b2db      	uxtb	r3, r3
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d109      	bne.n	800b1ca <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	4a90      	ldr	r2, [pc, #576]	; (800b404 <HAL_I2S_Init+0x26c>)
 800b1c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f7fd fca3 	bl	8008b10 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2202      	movs	r2, #2
 800b1ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	69db      	ldr	r3, [r3, #28]
 800b1d8:	687a      	ldr	r2, [r7, #4]
 800b1da:	6812      	ldr	r2, [r2, #0]
 800b1dc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800b1e0:	f023 030f 	bic.w	r3, r3, #15
 800b1e4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	2202      	movs	r2, #2
 800b1ec:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	695b      	ldr	r3, [r3, #20]
 800b1f2:	2b02      	cmp	r3, #2
 800b1f4:	d060      	beq.n	800b2b8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	68db      	ldr	r3, [r3, #12]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d102      	bne.n	800b204 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800b1fe:	2310      	movs	r3, #16
 800b200:	617b      	str	r3, [r7, #20]
 800b202:	e001      	b.n	800b208 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800b204:	2320      	movs	r3, #32
 800b206:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	689b      	ldr	r3, [r3, #8]
 800b20c:	2b20      	cmp	r3, #32
 800b20e:	d802      	bhi.n	800b216 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 800b210:	697b      	ldr	r3, [r7, #20]
 800b212:	005b      	lsls	r3, r3, #1
 800b214:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800b216:	2001      	movs	r0, #1
 800b218:	f001 f9a2 	bl	800c560 <HAL_RCCEx_GetPeriphCLKFreq>
 800b21c:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	691b      	ldr	r3, [r3, #16]
 800b222:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b226:	d125      	bne.n	800b274 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	68db      	ldr	r3, [r3, #12]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d010      	beq.n	800b252 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800b230:	697b      	ldr	r3, [r7, #20]
 800b232:	009b      	lsls	r3, r3, #2
 800b234:	68fa      	ldr	r2, [r7, #12]
 800b236:	fbb2 f2f3 	udiv	r2, r2, r3
 800b23a:	4613      	mov	r3, r2
 800b23c:	009b      	lsls	r3, r3, #2
 800b23e:	4413      	add	r3, r2
 800b240:	005b      	lsls	r3, r3, #1
 800b242:	461a      	mov	r2, r3
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	695b      	ldr	r3, [r3, #20]
 800b248:	fbb2 f3f3 	udiv	r3, r2, r3
 800b24c:	3305      	adds	r3, #5
 800b24e:	613b      	str	r3, [r7, #16]
 800b250:	e01f      	b.n	800b292 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	00db      	lsls	r3, r3, #3
 800b256:	68fa      	ldr	r2, [r7, #12]
 800b258:	fbb2 f2f3 	udiv	r2, r2, r3
 800b25c:	4613      	mov	r3, r2
 800b25e:	009b      	lsls	r3, r3, #2
 800b260:	4413      	add	r3, r2
 800b262:	005b      	lsls	r3, r3, #1
 800b264:	461a      	mov	r2, r3
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	695b      	ldr	r3, [r3, #20]
 800b26a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b26e:	3305      	adds	r3, #5
 800b270:	613b      	str	r3, [r7, #16]
 800b272:	e00e      	b.n	800b292 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800b274:	68fa      	ldr	r2, [r7, #12]
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	fbb2 f2f3 	udiv	r2, r2, r3
 800b27c:	4613      	mov	r3, r2
 800b27e:	009b      	lsls	r3, r3, #2
 800b280:	4413      	add	r3, r2
 800b282:	005b      	lsls	r3, r3, #1
 800b284:	461a      	mov	r2, r3
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	695b      	ldr	r3, [r3, #20]
 800b28a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b28e:	3305      	adds	r3, #5
 800b290:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	4a5c      	ldr	r2, [pc, #368]	; (800b408 <HAL_I2S_Init+0x270>)
 800b296:	fba2 2303 	umull	r2, r3, r2, r3
 800b29a:	08db      	lsrs	r3, r3, #3
 800b29c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	f003 0301 	and.w	r3, r3, #1
 800b2a4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800b2a6:	693a      	ldr	r2, [r7, #16]
 800b2a8:	69bb      	ldr	r3, [r7, #24]
 800b2aa:	1ad3      	subs	r3, r2, r3
 800b2ac:	085b      	lsrs	r3, r3, #1
 800b2ae:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800b2b0:	69bb      	ldr	r3, [r7, #24]
 800b2b2:	021b      	lsls	r3, r3, #8
 800b2b4:	61bb      	str	r3, [r7, #24]
 800b2b6:	e003      	b.n	800b2c0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800b2b8:	2302      	movs	r3, #2
 800b2ba:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800b2bc:	2300      	movs	r3, #0
 800b2be:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800b2c0:	69fb      	ldr	r3, [r7, #28]
 800b2c2:	2b01      	cmp	r3, #1
 800b2c4:	d902      	bls.n	800b2cc <HAL_I2S_Init+0x134>
 800b2c6:	69fb      	ldr	r3, [r7, #28]
 800b2c8:	2bff      	cmp	r3, #255	; 0xff
 800b2ca:	d907      	bls.n	800b2dc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2d0:	f043 0210 	orr.w	r2, r3, #16
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800b2d8:	2301      	movs	r3, #1
 800b2da:	e08f      	b.n	800b3fc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	691a      	ldr	r2, [r3, #16]
 800b2e0:	69bb      	ldr	r3, [r7, #24]
 800b2e2:	ea42 0103 	orr.w	r1, r2, r3
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	69fa      	ldr	r2, [r7, #28]
 800b2ec:	430a      	orrs	r2, r1
 800b2ee:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	69db      	ldr	r3, [r3, #28]
 800b2f6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800b2fa:	f023 030f 	bic.w	r3, r3, #15
 800b2fe:	687a      	ldr	r2, [r7, #4]
 800b300:	6851      	ldr	r1, [r2, #4]
 800b302:	687a      	ldr	r2, [r7, #4]
 800b304:	6892      	ldr	r2, [r2, #8]
 800b306:	4311      	orrs	r1, r2
 800b308:	687a      	ldr	r2, [r7, #4]
 800b30a:	68d2      	ldr	r2, [r2, #12]
 800b30c:	4311      	orrs	r1, r2
 800b30e:	687a      	ldr	r2, [r7, #4]
 800b310:	6992      	ldr	r2, [r2, #24]
 800b312:	430a      	orrs	r2, r1
 800b314:	431a      	orrs	r2, r3
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b31e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6a1b      	ldr	r3, [r3, #32]
 800b324:	2b01      	cmp	r3, #1
 800b326:	d161      	bne.n	800b3ec <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	4a38      	ldr	r2, [pc, #224]	; (800b40c <HAL_I2S_Init+0x274>)
 800b32c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	4a37      	ldr	r2, [pc, #220]	; (800b410 <HAL_I2S_Init+0x278>)
 800b334:	4293      	cmp	r3, r2
 800b336:	d101      	bne.n	800b33c <HAL_I2S_Init+0x1a4>
 800b338:	4b36      	ldr	r3, [pc, #216]	; (800b414 <HAL_I2S_Init+0x27c>)
 800b33a:	e001      	b.n	800b340 <HAL_I2S_Init+0x1a8>
 800b33c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b340:	69db      	ldr	r3, [r3, #28]
 800b342:	687a      	ldr	r2, [r7, #4]
 800b344:	6812      	ldr	r2, [r2, #0]
 800b346:	4932      	ldr	r1, [pc, #200]	; (800b410 <HAL_I2S_Init+0x278>)
 800b348:	428a      	cmp	r2, r1
 800b34a:	d101      	bne.n	800b350 <HAL_I2S_Init+0x1b8>
 800b34c:	4a31      	ldr	r2, [pc, #196]	; (800b414 <HAL_I2S_Init+0x27c>)
 800b34e:	e001      	b.n	800b354 <HAL_I2S_Init+0x1bc>
 800b350:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800b354:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800b358:	f023 030f 	bic.w	r3, r3, #15
 800b35c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	4a2b      	ldr	r2, [pc, #172]	; (800b410 <HAL_I2S_Init+0x278>)
 800b364:	4293      	cmp	r3, r2
 800b366:	d101      	bne.n	800b36c <HAL_I2S_Init+0x1d4>
 800b368:	4b2a      	ldr	r3, [pc, #168]	; (800b414 <HAL_I2S_Init+0x27c>)
 800b36a:	e001      	b.n	800b370 <HAL_I2S_Init+0x1d8>
 800b36c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b370:	2202      	movs	r2, #2
 800b372:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	4a25      	ldr	r2, [pc, #148]	; (800b410 <HAL_I2S_Init+0x278>)
 800b37a:	4293      	cmp	r3, r2
 800b37c:	d101      	bne.n	800b382 <HAL_I2S_Init+0x1ea>
 800b37e:	4b25      	ldr	r3, [pc, #148]	; (800b414 <HAL_I2S_Init+0x27c>)
 800b380:	e001      	b.n	800b386 <HAL_I2S_Init+0x1ee>
 800b382:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b386:	69db      	ldr	r3, [r3, #28]
 800b388:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	685b      	ldr	r3, [r3, #4]
 800b38e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b392:	d003      	beq.n	800b39c <HAL_I2S_Init+0x204>
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	685b      	ldr	r3, [r3, #4]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d103      	bne.n	800b3a4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800b39c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b3a0:	613b      	str	r3, [r7, #16]
 800b3a2:	e001      	b.n	800b3a8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800b3a8:	693b      	ldr	r3, [r7, #16]
 800b3aa:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	689b      	ldr	r3, [r3, #8]
 800b3b0:	b299      	uxth	r1, r3
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	68db      	ldr	r3, [r3, #12]
 800b3b6:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	699b      	ldr	r3, [r3, #24]
 800b3bc:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800b3be:	4303      	orrs	r3, r0
 800b3c0:	b29b      	uxth	r3, r3
 800b3c2:	430b      	orrs	r3, r1
 800b3c4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800b3c6:	4313      	orrs	r3, r2
 800b3c8:	b29a      	uxth	r2, r3
 800b3ca:	897b      	ldrh	r3, [r7, #10]
 800b3cc:	4313      	orrs	r3, r2
 800b3ce:	b29b      	uxth	r3, r3
 800b3d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b3d4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	4a0d      	ldr	r2, [pc, #52]	; (800b410 <HAL_I2S_Init+0x278>)
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	d101      	bne.n	800b3e4 <HAL_I2S_Init+0x24c>
 800b3e0:	4b0c      	ldr	r3, [pc, #48]	; (800b414 <HAL_I2S_Init+0x27c>)
 800b3e2:	e001      	b.n	800b3e8 <HAL_I2S_Init+0x250>
 800b3e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b3e8:	897a      	ldrh	r2, [r7, #10]
 800b3ea:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2201      	movs	r2, #1
 800b3f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800b3fa:	2300      	movs	r3, #0
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	3720      	adds	r7, #32
 800b400:	46bd      	mov	sp, r7
 800b402:	bd80      	pop	{r7, pc}
 800b404:	0800b50f 	.word	0x0800b50f
 800b408:	cccccccd 	.word	0xcccccccd
 800b40c:	0800b625 	.word	0x0800b625
 800b410:	40003800 	.word	0x40003800
 800b414:	40003400 	.word	0x40003400

0800b418 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800b418:	b480      	push	{r7}
 800b41a:	b083      	sub	sp, #12
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800b420:	bf00      	nop
 800b422:	370c      	adds	r7, #12
 800b424:	46bd      	mov	sp, r7
 800b426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42a:	4770      	bx	lr

0800b42c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800b42c:	b480      	push	{r7}
 800b42e:	b083      	sub	sp, #12
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800b434:	bf00      	nop
 800b436:	370c      	adds	r7, #12
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr

0800b440 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800b440:	b480      	push	{r7}
 800b442:	b083      	sub	sp, #12
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800b448:	bf00      	nop
 800b44a:	370c      	adds	r7, #12
 800b44c:	46bd      	mov	sp, r7
 800b44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b452:	4770      	bx	lr

0800b454 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b082      	sub	sp, #8
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b460:	881a      	ldrh	r2, [r3, #0]
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b46c:	1c9a      	adds	r2, r3, #2
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b476:	b29b      	uxth	r3, r3
 800b478:	3b01      	subs	r3, #1
 800b47a:	b29a      	uxth	r2, r3
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b484:	b29b      	uxth	r3, r3
 800b486:	2b00      	cmp	r3, #0
 800b488:	d10e      	bne.n	800b4a8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	685a      	ldr	r2, [r3, #4]
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b498:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2201      	movs	r2, #1
 800b49e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	f7ff ffb8 	bl	800b418 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800b4a8:	bf00      	nop
 800b4aa:	3708      	adds	r7, #8
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bd80      	pop	{r7, pc}

0800b4b0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b082      	sub	sp, #8
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	68da      	ldr	r2, [r3, #12]
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4c2:	b292      	uxth	r2, r2
 800b4c4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4ca:	1c9a      	adds	r2, r3, #2
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b4d4:	b29b      	uxth	r3, r3
 800b4d6:	3b01      	subs	r3, #1
 800b4d8:	b29a      	uxth	r2, r3
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b4e2:	b29b      	uxth	r3, r3
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d10e      	bne.n	800b506 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	685a      	ldr	r2, [r3, #4]
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800b4f6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2201      	movs	r2, #1
 800b4fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f7ff ff93 	bl	800b42c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800b506:	bf00      	nop
 800b508:	3708      	adds	r7, #8
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}

0800b50e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800b50e:	b580      	push	{r7, lr}
 800b510:	b086      	sub	sp, #24
 800b512:	af00      	add	r7, sp, #0
 800b514:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	689b      	ldr	r3, [r3, #8]
 800b51c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b524:	b2db      	uxtb	r3, r3
 800b526:	2b04      	cmp	r3, #4
 800b528:	d13a      	bne.n	800b5a0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	f003 0301 	and.w	r3, r3, #1
 800b530:	2b01      	cmp	r3, #1
 800b532:	d109      	bne.n	800b548 <I2S_IRQHandler+0x3a>
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	685b      	ldr	r3, [r3, #4]
 800b53a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b53e:	2b40      	cmp	r3, #64	; 0x40
 800b540:	d102      	bne.n	800b548 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f7ff ffb4 	bl	800b4b0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800b548:	697b      	ldr	r3, [r7, #20]
 800b54a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b54e:	2b40      	cmp	r3, #64	; 0x40
 800b550:	d126      	bne.n	800b5a0 <I2S_IRQHandler+0x92>
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	685b      	ldr	r3, [r3, #4]
 800b558:	f003 0320 	and.w	r3, r3, #32
 800b55c:	2b20      	cmp	r3, #32
 800b55e:	d11f      	bne.n	800b5a0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	685a      	ldr	r2, [r3, #4]
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800b56e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800b570:	2300      	movs	r3, #0
 800b572:	613b      	str	r3, [r7, #16]
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	68db      	ldr	r3, [r3, #12]
 800b57a:	613b      	str	r3, [r7, #16]
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	689b      	ldr	r3, [r3, #8]
 800b582:	613b      	str	r3, [r7, #16]
 800b584:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	2201      	movs	r2, #1
 800b58a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b592:	f043 0202 	orr.w	r2, r3, #2
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f7ff ff50 	bl	800b440 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b5a6:	b2db      	uxtb	r3, r3
 800b5a8:	2b03      	cmp	r3, #3
 800b5aa:	d136      	bne.n	800b61a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800b5ac:	697b      	ldr	r3, [r7, #20]
 800b5ae:	f003 0302 	and.w	r3, r3, #2
 800b5b2:	2b02      	cmp	r3, #2
 800b5b4:	d109      	bne.n	800b5ca <I2S_IRQHandler+0xbc>
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	685b      	ldr	r3, [r3, #4]
 800b5bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5c0:	2b80      	cmp	r3, #128	; 0x80
 800b5c2:	d102      	bne.n	800b5ca <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f7ff ff45 	bl	800b454 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800b5ca:	697b      	ldr	r3, [r7, #20]
 800b5cc:	f003 0308 	and.w	r3, r3, #8
 800b5d0:	2b08      	cmp	r3, #8
 800b5d2:	d122      	bne.n	800b61a <I2S_IRQHandler+0x10c>
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	685b      	ldr	r3, [r3, #4]
 800b5da:	f003 0320 	and.w	r3, r3, #32
 800b5de:	2b20      	cmp	r3, #32
 800b5e0:	d11b      	bne.n	800b61a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	685a      	ldr	r2, [r3, #4]
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b5f0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	60fb      	str	r3, [r7, #12]
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	689b      	ldr	r3, [r3, #8]
 800b5fc:	60fb      	str	r3, [r7, #12]
 800b5fe:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2201      	movs	r2, #1
 800b604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b60c:	f043 0204 	orr.w	r2, r3, #4
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f7ff ff13 	bl	800b440 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800b61a:	bf00      	nop
 800b61c:	3718      	adds	r7, #24
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}
	...

0800b624 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b088      	sub	sp, #32
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	689b      	ldr	r3, [r3, #8]
 800b632:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	4aa2      	ldr	r2, [pc, #648]	; (800b8c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800b63a:	4293      	cmp	r3, r2
 800b63c:	d101      	bne.n	800b642 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800b63e:	4ba2      	ldr	r3, [pc, #648]	; (800b8c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800b640:	e001      	b.n	800b646 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800b642:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b646:	689b      	ldr	r3, [r3, #8]
 800b648:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	685b      	ldr	r3, [r3, #4]
 800b650:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	4a9b      	ldr	r2, [pc, #620]	; (800b8c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800b658:	4293      	cmp	r3, r2
 800b65a:	d101      	bne.n	800b660 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800b65c:	4b9a      	ldr	r3, [pc, #616]	; (800b8c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800b65e:	e001      	b.n	800b664 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800b660:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b664:	685b      	ldr	r3, [r3, #4]
 800b666:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	685b      	ldr	r3, [r3, #4]
 800b66c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b670:	d004      	beq.n	800b67c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	685b      	ldr	r3, [r3, #4]
 800b676:	2b00      	cmp	r3, #0
 800b678:	f040 8099 	bne.w	800b7ae <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800b67c:	69fb      	ldr	r3, [r7, #28]
 800b67e:	f003 0302 	and.w	r3, r3, #2
 800b682:	2b02      	cmp	r3, #2
 800b684:	d107      	bne.n	800b696 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800b686:	697b      	ldr	r3, [r7, #20]
 800b688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d002      	beq.n	800b696 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f000 f925 	bl	800b8e0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800b696:	69bb      	ldr	r3, [r7, #24]
 800b698:	f003 0301 	and.w	r3, r3, #1
 800b69c:	2b01      	cmp	r3, #1
 800b69e:	d107      	bne.n	800b6b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800b6a0:	693b      	ldr	r3, [r7, #16]
 800b6a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d002      	beq.n	800b6b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f000 f9c8 	bl	800ba40 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800b6b0:	69bb      	ldr	r3, [r7, #24]
 800b6b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6b6:	2b40      	cmp	r3, #64	; 0x40
 800b6b8:	d13a      	bne.n	800b730 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	f003 0320 	and.w	r3, r3, #32
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d035      	beq.n	800b730 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	4a7e      	ldr	r2, [pc, #504]	; (800b8c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800b6ca:	4293      	cmp	r3, r2
 800b6cc:	d101      	bne.n	800b6d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800b6ce:	4b7e      	ldr	r3, [pc, #504]	; (800b8c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800b6d0:	e001      	b.n	800b6d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800b6d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b6d6:	685a      	ldr	r2, [r3, #4]
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	4979      	ldr	r1, [pc, #484]	; (800b8c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800b6de:	428b      	cmp	r3, r1
 800b6e0:	d101      	bne.n	800b6e6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800b6e2:	4b79      	ldr	r3, [pc, #484]	; (800b8c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800b6e4:	e001      	b.n	800b6ea <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800b6e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b6ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800b6ee:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	685a      	ldr	r2, [r3, #4]
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b6fe:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800b700:	2300      	movs	r3, #0
 800b702:	60fb      	str	r3, [r7, #12]
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	68db      	ldr	r3, [r3, #12]
 800b70a:	60fb      	str	r3, [r7, #12]
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	689b      	ldr	r3, [r3, #8]
 800b712:	60fb      	str	r3, [r7, #12]
 800b714:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2201      	movs	r2, #1
 800b71a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b722:	f043 0202 	orr.w	r2, r3, #2
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f7ff fe88 	bl	800b440 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800b730:	69fb      	ldr	r3, [r7, #28]
 800b732:	f003 0308 	and.w	r3, r3, #8
 800b736:	2b08      	cmp	r3, #8
 800b738:	f040 80be 	bne.w	800b8b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800b73c:	697b      	ldr	r3, [r7, #20]
 800b73e:	f003 0320 	and.w	r3, r3, #32
 800b742:	2b00      	cmp	r3, #0
 800b744:	f000 80b8 	beq.w	800b8b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	685a      	ldr	r2, [r3, #4]
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b756:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	4a59      	ldr	r2, [pc, #356]	; (800b8c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800b75e:	4293      	cmp	r3, r2
 800b760:	d101      	bne.n	800b766 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800b762:	4b59      	ldr	r3, [pc, #356]	; (800b8c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800b764:	e001      	b.n	800b76a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800b766:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b76a:	685a      	ldr	r2, [r3, #4]
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	4954      	ldr	r1, [pc, #336]	; (800b8c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800b772:	428b      	cmp	r3, r1
 800b774:	d101      	bne.n	800b77a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800b776:	4b54      	ldr	r3, [pc, #336]	; (800b8c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800b778:	e001      	b.n	800b77e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800b77a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b77e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800b782:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800b784:	2300      	movs	r3, #0
 800b786:	60bb      	str	r3, [r7, #8]
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	689b      	ldr	r3, [r3, #8]
 800b78e:	60bb      	str	r3, [r7, #8]
 800b790:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2201      	movs	r2, #1
 800b796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b79e:	f043 0204 	orr.w	r2, r3, #4
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800b7a6:	6878      	ldr	r0, [r7, #4]
 800b7a8:	f7ff fe4a 	bl	800b440 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800b7ac:	e084      	b.n	800b8b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800b7ae:	69bb      	ldr	r3, [r7, #24]
 800b7b0:	f003 0302 	and.w	r3, r3, #2
 800b7b4:	2b02      	cmp	r3, #2
 800b7b6:	d107      	bne.n	800b7c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d002      	beq.n	800b7c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	f000 f8be 	bl	800b944 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800b7c8:	69fb      	ldr	r3, [r7, #28]
 800b7ca:	f003 0301 	and.w	r3, r3, #1
 800b7ce:	2b01      	cmp	r3, #1
 800b7d0:	d107      	bne.n	800b7e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800b7d2:	697b      	ldr	r3, [r7, #20]
 800b7d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d002      	beq.n	800b7e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f000 f8fd 	bl	800b9dc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800b7e2:	69fb      	ldr	r3, [r7, #28]
 800b7e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7e8:	2b40      	cmp	r3, #64	; 0x40
 800b7ea:	d12f      	bne.n	800b84c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800b7ec:	697b      	ldr	r3, [r7, #20]
 800b7ee:	f003 0320 	and.w	r3, r3, #32
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d02a      	beq.n	800b84c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	685a      	ldr	r2, [r3, #4]
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800b804:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	4a2e      	ldr	r2, [pc, #184]	; (800b8c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800b80c:	4293      	cmp	r3, r2
 800b80e:	d101      	bne.n	800b814 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800b810:	4b2d      	ldr	r3, [pc, #180]	; (800b8c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800b812:	e001      	b.n	800b818 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800b814:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b818:	685a      	ldr	r2, [r3, #4]
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	4929      	ldr	r1, [pc, #164]	; (800b8c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800b820:	428b      	cmp	r3, r1
 800b822:	d101      	bne.n	800b828 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800b824:	4b28      	ldr	r3, [pc, #160]	; (800b8c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800b826:	e001      	b.n	800b82c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800b828:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b82c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b830:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2201      	movs	r2, #1
 800b836:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b83e:	f043 0202 	orr.w	r2, r3, #2
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800b846:	6878      	ldr	r0, [r7, #4]
 800b848:	f7ff fdfa 	bl	800b440 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800b84c:	69bb      	ldr	r3, [r7, #24]
 800b84e:	f003 0308 	and.w	r3, r3, #8
 800b852:	2b08      	cmp	r3, #8
 800b854:	d131      	bne.n	800b8ba <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	f003 0320 	and.w	r3, r3, #32
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d02c      	beq.n	800b8ba <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	4a17      	ldr	r2, [pc, #92]	; (800b8c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800b866:	4293      	cmp	r3, r2
 800b868:	d101      	bne.n	800b86e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800b86a:	4b17      	ldr	r3, [pc, #92]	; (800b8c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800b86c:	e001      	b.n	800b872 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800b86e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b872:	685a      	ldr	r2, [r3, #4]
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	4912      	ldr	r1, [pc, #72]	; (800b8c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800b87a:	428b      	cmp	r3, r1
 800b87c:	d101      	bne.n	800b882 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800b87e:	4b12      	ldr	r3, [pc, #72]	; (800b8c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800b880:	e001      	b.n	800b886 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800b882:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b886:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b88a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	685a      	ldr	r2, [r3, #4]
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800b89a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2201      	movs	r2, #1
 800b8a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8a8:	f043 0204 	orr.w	r2, r3, #4
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	f7ff fdc5 	bl	800b440 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800b8b6:	e000      	b.n	800b8ba <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800b8b8:	bf00      	nop
}
 800b8ba:	bf00      	nop
 800b8bc:	3720      	adds	r7, #32
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}
 800b8c2:	bf00      	nop
 800b8c4:	40003800 	.word	0x40003800
 800b8c8:	40003400 	.word	0x40003400

0800b8cc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800b8cc:	b480      	push	{r7}
 800b8ce:	b083      	sub	sp, #12
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800b8d4:	bf00      	nop
 800b8d6:	370c      	adds	r7, #12
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8de:	4770      	bx	lr

0800b8e0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b082      	sub	sp, #8
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ec:	1c99      	adds	r1, r3, #2
 800b8ee:	687a      	ldr	r2, [r7, #4]
 800b8f0:	6251      	str	r1, [r2, #36]	; 0x24
 800b8f2:	881a      	ldrh	r2, [r3, #0]
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8fe:	b29b      	uxth	r3, r3
 800b900:	3b01      	subs	r3, #1
 800b902:	b29a      	uxth	r2, r3
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b90c:	b29b      	uxth	r3, r3
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d113      	bne.n	800b93a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	685a      	ldr	r2, [r3, #4]
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b920:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b926:	b29b      	uxth	r3, r3
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d106      	bne.n	800b93a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2201      	movs	r2, #1
 800b930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	f7ff ffc9 	bl	800b8cc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800b93a:	bf00      	nop
 800b93c:	3708      	adds	r7, #8
 800b93e:	46bd      	mov	sp, r7
 800b940:	bd80      	pop	{r7, pc}
	...

0800b944 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b082      	sub	sp, #8
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b950:	1c99      	adds	r1, r3, #2
 800b952:	687a      	ldr	r2, [r7, #4]
 800b954:	6251      	str	r1, [r2, #36]	; 0x24
 800b956:	8819      	ldrh	r1, [r3, #0]
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	4a1d      	ldr	r2, [pc, #116]	; (800b9d4 <I2SEx_TxISR_I2SExt+0x90>)
 800b95e:	4293      	cmp	r3, r2
 800b960:	d101      	bne.n	800b966 <I2SEx_TxISR_I2SExt+0x22>
 800b962:	4b1d      	ldr	r3, [pc, #116]	; (800b9d8 <I2SEx_TxISR_I2SExt+0x94>)
 800b964:	e001      	b.n	800b96a <I2SEx_TxISR_I2SExt+0x26>
 800b966:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b96a:	460a      	mov	r2, r1
 800b96c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b972:	b29b      	uxth	r3, r3
 800b974:	3b01      	subs	r3, #1
 800b976:	b29a      	uxth	r2, r3
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b980:	b29b      	uxth	r3, r3
 800b982:	2b00      	cmp	r3, #0
 800b984:	d121      	bne.n	800b9ca <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	4a12      	ldr	r2, [pc, #72]	; (800b9d4 <I2SEx_TxISR_I2SExt+0x90>)
 800b98c:	4293      	cmp	r3, r2
 800b98e:	d101      	bne.n	800b994 <I2SEx_TxISR_I2SExt+0x50>
 800b990:	4b11      	ldr	r3, [pc, #68]	; (800b9d8 <I2SEx_TxISR_I2SExt+0x94>)
 800b992:	e001      	b.n	800b998 <I2SEx_TxISR_I2SExt+0x54>
 800b994:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b998:	685a      	ldr	r2, [r3, #4]
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	490d      	ldr	r1, [pc, #52]	; (800b9d4 <I2SEx_TxISR_I2SExt+0x90>)
 800b9a0:	428b      	cmp	r3, r1
 800b9a2:	d101      	bne.n	800b9a8 <I2SEx_TxISR_I2SExt+0x64>
 800b9a4:	4b0c      	ldr	r3, [pc, #48]	; (800b9d8 <I2SEx_TxISR_I2SExt+0x94>)
 800b9a6:	e001      	b.n	800b9ac <I2SEx_TxISR_I2SExt+0x68>
 800b9a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b9ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b9b0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b9b6:	b29b      	uxth	r3, r3
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d106      	bne.n	800b9ca <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2201      	movs	r2, #1
 800b9c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f7ff ff81 	bl	800b8cc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800b9ca:	bf00      	nop
 800b9cc:	3708      	adds	r7, #8
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}
 800b9d2:	bf00      	nop
 800b9d4:	40003800 	.word	0x40003800
 800b9d8:	40003400 	.word	0x40003400

0800b9dc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b082      	sub	sp, #8
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	68d8      	ldr	r0, [r3, #12]
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9ee:	1c99      	adds	r1, r3, #2
 800b9f0:	687a      	ldr	r2, [r7, #4]
 800b9f2:	62d1      	str	r1, [r2, #44]	; 0x2c
 800b9f4:	b282      	uxth	r2, r0
 800b9f6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b9fc:	b29b      	uxth	r3, r3
 800b9fe:	3b01      	subs	r3, #1
 800ba00:	b29a      	uxth	r2, r3
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ba0a:	b29b      	uxth	r3, r3
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d113      	bne.n	800ba38 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	685a      	ldr	r2, [r3, #4]
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800ba1e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba24:	b29b      	uxth	r3, r3
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d106      	bne.n	800ba38 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2201      	movs	r2, #1
 800ba2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f7ff ff4a 	bl	800b8cc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800ba38:	bf00      	nop
 800ba3a:	3708      	adds	r7, #8
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}

0800ba40 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b082      	sub	sp, #8
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	4a20      	ldr	r2, [pc, #128]	; (800bad0 <I2SEx_RxISR_I2SExt+0x90>)
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d101      	bne.n	800ba56 <I2SEx_RxISR_I2SExt+0x16>
 800ba52:	4b20      	ldr	r3, [pc, #128]	; (800bad4 <I2SEx_RxISR_I2SExt+0x94>)
 800ba54:	e001      	b.n	800ba5a <I2SEx_RxISR_I2SExt+0x1a>
 800ba56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800ba5a:	68d8      	ldr	r0, [r3, #12]
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba60:	1c99      	adds	r1, r3, #2
 800ba62:	687a      	ldr	r2, [r7, #4]
 800ba64:	62d1      	str	r1, [r2, #44]	; 0x2c
 800ba66:	b282      	uxth	r2, r0
 800ba68:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ba6e:	b29b      	uxth	r3, r3
 800ba70:	3b01      	subs	r3, #1
 800ba72:	b29a      	uxth	r2, r3
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ba7c:	b29b      	uxth	r3, r3
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d121      	bne.n	800bac6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	4a12      	ldr	r2, [pc, #72]	; (800bad0 <I2SEx_RxISR_I2SExt+0x90>)
 800ba88:	4293      	cmp	r3, r2
 800ba8a:	d101      	bne.n	800ba90 <I2SEx_RxISR_I2SExt+0x50>
 800ba8c:	4b11      	ldr	r3, [pc, #68]	; (800bad4 <I2SEx_RxISR_I2SExt+0x94>)
 800ba8e:	e001      	b.n	800ba94 <I2SEx_RxISR_I2SExt+0x54>
 800ba90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800ba94:	685a      	ldr	r2, [r3, #4]
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	490d      	ldr	r1, [pc, #52]	; (800bad0 <I2SEx_RxISR_I2SExt+0x90>)
 800ba9c:	428b      	cmp	r3, r1
 800ba9e:	d101      	bne.n	800baa4 <I2SEx_RxISR_I2SExt+0x64>
 800baa0:	4b0c      	ldr	r3, [pc, #48]	; (800bad4 <I2SEx_RxISR_I2SExt+0x94>)
 800baa2:	e001      	b.n	800baa8 <I2SEx_RxISR_I2SExt+0x68>
 800baa4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800baa8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800baac:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bab2:	b29b      	uxth	r3, r3
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d106      	bne.n	800bac6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2201      	movs	r2, #1
 800babc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800bac0:	6878      	ldr	r0, [r7, #4]
 800bac2:	f7ff ff03 	bl	800b8cc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800bac6:	bf00      	nop
 800bac8:	3708      	adds	r7, #8
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}
 800bace:	bf00      	nop
 800bad0:	40003800 	.word	0x40003800
 800bad4:	40003400 	.word	0x40003400

0800bad8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b086      	sub	sp, #24
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d101      	bne.n	800baea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800bae6:	2301      	movs	r3, #1
 800bae8:	e25b      	b.n	800bfa2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	f003 0301 	and.w	r3, r3, #1
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d075      	beq.n	800bbe2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800baf6:	4ba3      	ldr	r3, [pc, #652]	; (800bd84 <HAL_RCC_OscConfig+0x2ac>)
 800baf8:	689b      	ldr	r3, [r3, #8]
 800bafa:	f003 030c 	and.w	r3, r3, #12
 800bafe:	2b04      	cmp	r3, #4
 800bb00:	d00c      	beq.n	800bb1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bb02:	4ba0      	ldr	r3, [pc, #640]	; (800bd84 <HAL_RCC_OscConfig+0x2ac>)
 800bb04:	689b      	ldr	r3, [r3, #8]
 800bb06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800bb0a:	2b08      	cmp	r3, #8
 800bb0c:	d112      	bne.n	800bb34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bb0e:	4b9d      	ldr	r3, [pc, #628]	; (800bd84 <HAL_RCC_OscConfig+0x2ac>)
 800bb10:	685b      	ldr	r3, [r3, #4]
 800bb12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bb16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bb1a:	d10b      	bne.n	800bb34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bb1c:	4b99      	ldr	r3, [pc, #612]	; (800bd84 <HAL_RCC_OscConfig+0x2ac>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d05b      	beq.n	800bbe0 <HAL_RCC_OscConfig+0x108>
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	685b      	ldr	r3, [r3, #4]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d157      	bne.n	800bbe0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800bb30:	2301      	movs	r3, #1
 800bb32:	e236      	b.n	800bfa2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	685b      	ldr	r3, [r3, #4]
 800bb38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb3c:	d106      	bne.n	800bb4c <HAL_RCC_OscConfig+0x74>
 800bb3e:	4b91      	ldr	r3, [pc, #580]	; (800bd84 <HAL_RCC_OscConfig+0x2ac>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	4a90      	ldr	r2, [pc, #576]	; (800bd84 <HAL_RCC_OscConfig+0x2ac>)
 800bb44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bb48:	6013      	str	r3, [r2, #0]
 800bb4a:	e01d      	b.n	800bb88 <HAL_RCC_OscConfig+0xb0>
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	685b      	ldr	r3, [r3, #4]
 800bb50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bb54:	d10c      	bne.n	800bb70 <HAL_RCC_OscConfig+0x98>
 800bb56:	4b8b      	ldr	r3, [pc, #556]	; (800bd84 <HAL_RCC_OscConfig+0x2ac>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	4a8a      	ldr	r2, [pc, #552]	; (800bd84 <HAL_RCC_OscConfig+0x2ac>)
 800bb5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bb60:	6013      	str	r3, [r2, #0]
 800bb62:	4b88      	ldr	r3, [pc, #544]	; (800bd84 <HAL_RCC_OscConfig+0x2ac>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	4a87      	ldr	r2, [pc, #540]	; (800bd84 <HAL_RCC_OscConfig+0x2ac>)
 800bb68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bb6c:	6013      	str	r3, [r2, #0]
 800bb6e:	e00b      	b.n	800bb88 <HAL_RCC_OscConfig+0xb0>
 800bb70:	4b84      	ldr	r3, [pc, #528]	; (800bd84 <HAL_RCC_OscConfig+0x2ac>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	4a83      	ldr	r2, [pc, #524]	; (800bd84 <HAL_RCC_OscConfig+0x2ac>)
 800bb76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bb7a:	6013      	str	r3, [r2, #0]
 800bb7c:	4b81      	ldr	r3, [pc, #516]	; (800bd84 <HAL_RCC_OscConfig+0x2ac>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	4a80      	ldr	r2, [pc, #512]	; (800bd84 <HAL_RCC_OscConfig+0x2ac>)
 800bb82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bb86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	685b      	ldr	r3, [r3, #4]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d013      	beq.n	800bbb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bb90:	f7fd f9ca 	bl	8008f28 <HAL_GetTick>
 800bb94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bb96:	e008      	b.n	800bbaa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bb98:	f7fd f9c6 	bl	8008f28 <HAL_GetTick>
 800bb9c:	4602      	mov	r2, r0
 800bb9e:	693b      	ldr	r3, [r7, #16]
 800bba0:	1ad3      	subs	r3, r2, r3
 800bba2:	2b64      	cmp	r3, #100	; 0x64
 800bba4:	d901      	bls.n	800bbaa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800bba6:	2303      	movs	r3, #3
 800bba8:	e1fb      	b.n	800bfa2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bbaa:	4b76      	ldr	r3, [pc, #472]	; (800bd84 <HAL_RCC_OscConfig+0x2ac>)
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d0f0      	beq.n	800bb98 <HAL_RCC_OscConfig+0xc0>
 800bbb6:	e014      	b.n	800bbe2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bbb8:	f7fd f9b6 	bl	8008f28 <HAL_GetTick>
 800bbbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bbbe:	e008      	b.n	800bbd2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bbc0:	f7fd f9b2 	bl	8008f28 <HAL_GetTick>
 800bbc4:	4602      	mov	r2, r0
 800bbc6:	693b      	ldr	r3, [r7, #16]
 800bbc8:	1ad3      	subs	r3, r2, r3
 800bbca:	2b64      	cmp	r3, #100	; 0x64
 800bbcc:	d901      	bls.n	800bbd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800bbce:	2303      	movs	r3, #3
 800bbd0:	e1e7      	b.n	800bfa2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bbd2:	4b6c      	ldr	r3, [pc, #432]	; (800bd84 <HAL_RCC_OscConfig+0x2ac>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d1f0      	bne.n	800bbc0 <HAL_RCC_OscConfig+0xe8>
 800bbde:	e000      	b.n	800bbe2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bbe0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	f003 0302 	and.w	r3, r3, #2
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d063      	beq.n	800bcb6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800bbee:	4b65      	ldr	r3, [pc, #404]	; (800bd84 <HAL_RCC_OscConfig+0x2ac>)
 800bbf0:	689b      	ldr	r3, [r3, #8]
 800bbf2:	f003 030c 	and.w	r3, r3, #12
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d00b      	beq.n	800bc12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bbfa:	4b62      	ldr	r3, [pc, #392]	; (800bd84 <HAL_RCC_OscConfig+0x2ac>)
 800bbfc:	689b      	ldr	r3, [r3, #8]
 800bbfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800bc02:	2b08      	cmp	r3, #8
 800bc04:	d11c      	bne.n	800bc40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bc06:	4b5f      	ldr	r3, [pc, #380]	; (800bd84 <HAL_RCC_OscConfig+0x2ac>)
 800bc08:	685b      	ldr	r3, [r3, #4]
 800bc0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d116      	bne.n	800bc40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bc12:	4b5c      	ldr	r3, [pc, #368]	; (800bd84 <HAL_RCC_OscConfig+0x2ac>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f003 0302 	and.w	r3, r3, #2
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d005      	beq.n	800bc2a <HAL_RCC_OscConfig+0x152>
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	68db      	ldr	r3, [r3, #12]
 800bc22:	2b01      	cmp	r3, #1
 800bc24:	d001      	beq.n	800bc2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800bc26:	2301      	movs	r3, #1
 800bc28:	e1bb      	b.n	800bfa2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bc2a:	4b56      	ldr	r3, [pc, #344]	; (800bd84 <HAL_RCC_OscConfig+0x2ac>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	691b      	ldr	r3, [r3, #16]
 800bc36:	00db      	lsls	r3, r3, #3
 800bc38:	4952      	ldr	r1, [pc, #328]	; (800bd84 <HAL_RCC_OscConfig+0x2ac>)
 800bc3a:	4313      	orrs	r3, r2
 800bc3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bc3e:	e03a      	b.n	800bcb6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	68db      	ldr	r3, [r3, #12]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d020      	beq.n	800bc8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bc48:	4b4f      	ldr	r3, [pc, #316]	; (800bd88 <HAL_RCC_OscConfig+0x2b0>)
 800bc4a:	2201      	movs	r2, #1
 800bc4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc4e:	f7fd f96b 	bl	8008f28 <HAL_GetTick>
 800bc52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bc54:	e008      	b.n	800bc68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bc56:	f7fd f967 	bl	8008f28 <HAL_GetTick>
 800bc5a:	4602      	mov	r2, r0
 800bc5c:	693b      	ldr	r3, [r7, #16]
 800bc5e:	1ad3      	subs	r3, r2, r3
 800bc60:	2b02      	cmp	r3, #2
 800bc62:	d901      	bls.n	800bc68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800bc64:	2303      	movs	r3, #3
 800bc66:	e19c      	b.n	800bfa2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bc68:	4b46      	ldr	r3, [pc, #280]	; (800bd84 <HAL_RCC_OscConfig+0x2ac>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	f003 0302 	and.w	r3, r3, #2
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d0f0      	beq.n	800bc56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bc74:	4b43      	ldr	r3, [pc, #268]	; (800bd84 <HAL_RCC_OscConfig+0x2ac>)
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	691b      	ldr	r3, [r3, #16]
 800bc80:	00db      	lsls	r3, r3, #3
 800bc82:	4940      	ldr	r1, [pc, #256]	; (800bd84 <HAL_RCC_OscConfig+0x2ac>)
 800bc84:	4313      	orrs	r3, r2
 800bc86:	600b      	str	r3, [r1, #0]
 800bc88:	e015      	b.n	800bcb6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bc8a:	4b3f      	ldr	r3, [pc, #252]	; (800bd88 <HAL_RCC_OscConfig+0x2b0>)
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc90:	f7fd f94a 	bl	8008f28 <HAL_GetTick>
 800bc94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bc96:	e008      	b.n	800bcaa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bc98:	f7fd f946 	bl	8008f28 <HAL_GetTick>
 800bc9c:	4602      	mov	r2, r0
 800bc9e:	693b      	ldr	r3, [r7, #16]
 800bca0:	1ad3      	subs	r3, r2, r3
 800bca2:	2b02      	cmp	r3, #2
 800bca4:	d901      	bls.n	800bcaa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800bca6:	2303      	movs	r3, #3
 800bca8:	e17b      	b.n	800bfa2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bcaa:	4b36      	ldr	r3, [pc, #216]	; (800bd84 <HAL_RCC_OscConfig+0x2ac>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	f003 0302 	and.w	r3, r3, #2
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d1f0      	bne.n	800bc98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	f003 0308 	and.w	r3, r3, #8
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d030      	beq.n	800bd24 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	695b      	ldr	r3, [r3, #20]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d016      	beq.n	800bcf8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bcca:	4b30      	ldr	r3, [pc, #192]	; (800bd8c <HAL_RCC_OscConfig+0x2b4>)
 800bccc:	2201      	movs	r2, #1
 800bcce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bcd0:	f7fd f92a 	bl	8008f28 <HAL_GetTick>
 800bcd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bcd6:	e008      	b.n	800bcea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bcd8:	f7fd f926 	bl	8008f28 <HAL_GetTick>
 800bcdc:	4602      	mov	r2, r0
 800bcde:	693b      	ldr	r3, [r7, #16]
 800bce0:	1ad3      	subs	r3, r2, r3
 800bce2:	2b02      	cmp	r3, #2
 800bce4:	d901      	bls.n	800bcea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800bce6:	2303      	movs	r3, #3
 800bce8:	e15b      	b.n	800bfa2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bcea:	4b26      	ldr	r3, [pc, #152]	; (800bd84 <HAL_RCC_OscConfig+0x2ac>)
 800bcec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bcee:	f003 0302 	and.w	r3, r3, #2
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d0f0      	beq.n	800bcd8 <HAL_RCC_OscConfig+0x200>
 800bcf6:	e015      	b.n	800bd24 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bcf8:	4b24      	ldr	r3, [pc, #144]	; (800bd8c <HAL_RCC_OscConfig+0x2b4>)
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bcfe:	f7fd f913 	bl	8008f28 <HAL_GetTick>
 800bd02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bd04:	e008      	b.n	800bd18 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bd06:	f7fd f90f 	bl	8008f28 <HAL_GetTick>
 800bd0a:	4602      	mov	r2, r0
 800bd0c:	693b      	ldr	r3, [r7, #16]
 800bd0e:	1ad3      	subs	r3, r2, r3
 800bd10:	2b02      	cmp	r3, #2
 800bd12:	d901      	bls.n	800bd18 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800bd14:	2303      	movs	r3, #3
 800bd16:	e144      	b.n	800bfa2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bd18:	4b1a      	ldr	r3, [pc, #104]	; (800bd84 <HAL_RCC_OscConfig+0x2ac>)
 800bd1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd1c:	f003 0302 	and.w	r3, r3, #2
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d1f0      	bne.n	800bd06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	f003 0304 	and.w	r3, r3, #4
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	f000 80a0 	beq.w	800be72 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bd32:	2300      	movs	r3, #0
 800bd34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bd36:	4b13      	ldr	r3, [pc, #76]	; (800bd84 <HAL_RCC_OscConfig+0x2ac>)
 800bd38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d10f      	bne.n	800bd62 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bd42:	2300      	movs	r3, #0
 800bd44:	60bb      	str	r3, [r7, #8]
 800bd46:	4b0f      	ldr	r3, [pc, #60]	; (800bd84 <HAL_RCC_OscConfig+0x2ac>)
 800bd48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd4a:	4a0e      	ldr	r2, [pc, #56]	; (800bd84 <HAL_RCC_OscConfig+0x2ac>)
 800bd4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bd50:	6413      	str	r3, [r2, #64]	; 0x40
 800bd52:	4b0c      	ldr	r3, [pc, #48]	; (800bd84 <HAL_RCC_OscConfig+0x2ac>)
 800bd54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bd5a:	60bb      	str	r3, [r7, #8]
 800bd5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bd5e:	2301      	movs	r3, #1
 800bd60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bd62:	4b0b      	ldr	r3, [pc, #44]	; (800bd90 <HAL_RCC_OscConfig+0x2b8>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d121      	bne.n	800bdb2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800bd6e:	4b08      	ldr	r3, [pc, #32]	; (800bd90 <HAL_RCC_OscConfig+0x2b8>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	4a07      	ldr	r2, [pc, #28]	; (800bd90 <HAL_RCC_OscConfig+0x2b8>)
 800bd74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bd78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bd7a:	f7fd f8d5 	bl	8008f28 <HAL_GetTick>
 800bd7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bd80:	e011      	b.n	800bda6 <HAL_RCC_OscConfig+0x2ce>
 800bd82:	bf00      	nop
 800bd84:	40023800 	.word	0x40023800
 800bd88:	42470000 	.word	0x42470000
 800bd8c:	42470e80 	.word	0x42470e80
 800bd90:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bd94:	f7fd f8c8 	bl	8008f28 <HAL_GetTick>
 800bd98:	4602      	mov	r2, r0
 800bd9a:	693b      	ldr	r3, [r7, #16]
 800bd9c:	1ad3      	subs	r3, r2, r3
 800bd9e:	2b02      	cmp	r3, #2
 800bda0:	d901      	bls.n	800bda6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800bda2:	2303      	movs	r3, #3
 800bda4:	e0fd      	b.n	800bfa2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bda6:	4b81      	ldr	r3, [pc, #516]	; (800bfac <HAL_RCC_OscConfig+0x4d4>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d0f0      	beq.n	800bd94 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	689b      	ldr	r3, [r3, #8]
 800bdb6:	2b01      	cmp	r3, #1
 800bdb8:	d106      	bne.n	800bdc8 <HAL_RCC_OscConfig+0x2f0>
 800bdba:	4b7d      	ldr	r3, [pc, #500]	; (800bfb0 <HAL_RCC_OscConfig+0x4d8>)
 800bdbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdbe:	4a7c      	ldr	r2, [pc, #496]	; (800bfb0 <HAL_RCC_OscConfig+0x4d8>)
 800bdc0:	f043 0301 	orr.w	r3, r3, #1
 800bdc4:	6713      	str	r3, [r2, #112]	; 0x70
 800bdc6:	e01c      	b.n	800be02 <HAL_RCC_OscConfig+0x32a>
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	689b      	ldr	r3, [r3, #8]
 800bdcc:	2b05      	cmp	r3, #5
 800bdce:	d10c      	bne.n	800bdea <HAL_RCC_OscConfig+0x312>
 800bdd0:	4b77      	ldr	r3, [pc, #476]	; (800bfb0 <HAL_RCC_OscConfig+0x4d8>)
 800bdd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdd4:	4a76      	ldr	r2, [pc, #472]	; (800bfb0 <HAL_RCC_OscConfig+0x4d8>)
 800bdd6:	f043 0304 	orr.w	r3, r3, #4
 800bdda:	6713      	str	r3, [r2, #112]	; 0x70
 800bddc:	4b74      	ldr	r3, [pc, #464]	; (800bfb0 <HAL_RCC_OscConfig+0x4d8>)
 800bdde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bde0:	4a73      	ldr	r2, [pc, #460]	; (800bfb0 <HAL_RCC_OscConfig+0x4d8>)
 800bde2:	f043 0301 	orr.w	r3, r3, #1
 800bde6:	6713      	str	r3, [r2, #112]	; 0x70
 800bde8:	e00b      	b.n	800be02 <HAL_RCC_OscConfig+0x32a>
 800bdea:	4b71      	ldr	r3, [pc, #452]	; (800bfb0 <HAL_RCC_OscConfig+0x4d8>)
 800bdec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdee:	4a70      	ldr	r2, [pc, #448]	; (800bfb0 <HAL_RCC_OscConfig+0x4d8>)
 800bdf0:	f023 0301 	bic.w	r3, r3, #1
 800bdf4:	6713      	str	r3, [r2, #112]	; 0x70
 800bdf6:	4b6e      	ldr	r3, [pc, #440]	; (800bfb0 <HAL_RCC_OscConfig+0x4d8>)
 800bdf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdfa:	4a6d      	ldr	r2, [pc, #436]	; (800bfb0 <HAL_RCC_OscConfig+0x4d8>)
 800bdfc:	f023 0304 	bic.w	r3, r3, #4
 800be00:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	689b      	ldr	r3, [r3, #8]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d015      	beq.n	800be36 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800be0a:	f7fd f88d 	bl	8008f28 <HAL_GetTick>
 800be0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800be10:	e00a      	b.n	800be28 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800be12:	f7fd f889 	bl	8008f28 <HAL_GetTick>
 800be16:	4602      	mov	r2, r0
 800be18:	693b      	ldr	r3, [r7, #16]
 800be1a:	1ad3      	subs	r3, r2, r3
 800be1c:	f241 3288 	movw	r2, #5000	; 0x1388
 800be20:	4293      	cmp	r3, r2
 800be22:	d901      	bls.n	800be28 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800be24:	2303      	movs	r3, #3
 800be26:	e0bc      	b.n	800bfa2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800be28:	4b61      	ldr	r3, [pc, #388]	; (800bfb0 <HAL_RCC_OscConfig+0x4d8>)
 800be2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be2c:	f003 0302 	and.w	r3, r3, #2
 800be30:	2b00      	cmp	r3, #0
 800be32:	d0ee      	beq.n	800be12 <HAL_RCC_OscConfig+0x33a>
 800be34:	e014      	b.n	800be60 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800be36:	f7fd f877 	bl	8008f28 <HAL_GetTick>
 800be3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800be3c:	e00a      	b.n	800be54 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800be3e:	f7fd f873 	bl	8008f28 <HAL_GetTick>
 800be42:	4602      	mov	r2, r0
 800be44:	693b      	ldr	r3, [r7, #16]
 800be46:	1ad3      	subs	r3, r2, r3
 800be48:	f241 3288 	movw	r2, #5000	; 0x1388
 800be4c:	4293      	cmp	r3, r2
 800be4e:	d901      	bls.n	800be54 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800be50:	2303      	movs	r3, #3
 800be52:	e0a6      	b.n	800bfa2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800be54:	4b56      	ldr	r3, [pc, #344]	; (800bfb0 <HAL_RCC_OscConfig+0x4d8>)
 800be56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be58:	f003 0302 	and.w	r3, r3, #2
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d1ee      	bne.n	800be3e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800be60:	7dfb      	ldrb	r3, [r7, #23]
 800be62:	2b01      	cmp	r3, #1
 800be64:	d105      	bne.n	800be72 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800be66:	4b52      	ldr	r3, [pc, #328]	; (800bfb0 <HAL_RCC_OscConfig+0x4d8>)
 800be68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be6a:	4a51      	ldr	r2, [pc, #324]	; (800bfb0 <HAL_RCC_OscConfig+0x4d8>)
 800be6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800be70:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	699b      	ldr	r3, [r3, #24]
 800be76:	2b00      	cmp	r3, #0
 800be78:	f000 8092 	beq.w	800bfa0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800be7c:	4b4c      	ldr	r3, [pc, #304]	; (800bfb0 <HAL_RCC_OscConfig+0x4d8>)
 800be7e:	689b      	ldr	r3, [r3, #8]
 800be80:	f003 030c 	and.w	r3, r3, #12
 800be84:	2b08      	cmp	r3, #8
 800be86:	d05c      	beq.n	800bf42 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	699b      	ldr	r3, [r3, #24]
 800be8c:	2b02      	cmp	r3, #2
 800be8e:	d141      	bne.n	800bf14 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800be90:	4b48      	ldr	r3, [pc, #288]	; (800bfb4 <HAL_RCC_OscConfig+0x4dc>)
 800be92:	2200      	movs	r2, #0
 800be94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800be96:	f7fd f847 	bl	8008f28 <HAL_GetTick>
 800be9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800be9c:	e008      	b.n	800beb0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800be9e:	f7fd f843 	bl	8008f28 <HAL_GetTick>
 800bea2:	4602      	mov	r2, r0
 800bea4:	693b      	ldr	r3, [r7, #16]
 800bea6:	1ad3      	subs	r3, r2, r3
 800bea8:	2b02      	cmp	r3, #2
 800beaa:	d901      	bls.n	800beb0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800beac:	2303      	movs	r3, #3
 800beae:	e078      	b.n	800bfa2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800beb0:	4b3f      	ldr	r3, [pc, #252]	; (800bfb0 <HAL_RCC_OscConfig+0x4d8>)
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d1f0      	bne.n	800be9e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	69da      	ldr	r2, [r3, #28]
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6a1b      	ldr	r3, [r3, #32]
 800bec4:	431a      	orrs	r2, r3
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beca:	019b      	lsls	r3, r3, #6
 800becc:	431a      	orrs	r2, r3
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bed2:	085b      	lsrs	r3, r3, #1
 800bed4:	3b01      	subs	r3, #1
 800bed6:	041b      	lsls	r3, r3, #16
 800bed8:	431a      	orrs	r2, r3
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bede:	061b      	lsls	r3, r3, #24
 800bee0:	4933      	ldr	r1, [pc, #204]	; (800bfb0 <HAL_RCC_OscConfig+0x4d8>)
 800bee2:	4313      	orrs	r3, r2
 800bee4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bee6:	4b33      	ldr	r3, [pc, #204]	; (800bfb4 <HAL_RCC_OscConfig+0x4dc>)
 800bee8:	2201      	movs	r2, #1
 800beea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800beec:	f7fd f81c 	bl	8008f28 <HAL_GetTick>
 800bef0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bef2:	e008      	b.n	800bf06 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bef4:	f7fd f818 	bl	8008f28 <HAL_GetTick>
 800bef8:	4602      	mov	r2, r0
 800befa:	693b      	ldr	r3, [r7, #16]
 800befc:	1ad3      	subs	r3, r2, r3
 800befe:	2b02      	cmp	r3, #2
 800bf00:	d901      	bls.n	800bf06 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800bf02:	2303      	movs	r3, #3
 800bf04:	e04d      	b.n	800bfa2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bf06:	4b2a      	ldr	r3, [pc, #168]	; (800bfb0 <HAL_RCC_OscConfig+0x4d8>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d0f0      	beq.n	800bef4 <HAL_RCC_OscConfig+0x41c>
 800bf12:	e045      	b.n	800bfa0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bf14:	4b27      	ldr	r3, [pc, #156]	; (800bfb4 <HAL_RCC_OscConfig+0x4dc>)
 800bf16:	2200      	movs	r2, #0
 800bf18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bf1a:	f7fd f805 	bl	8008f28 <HAL_GetTick>
 800bf1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bf20:	e008      	b.n	800bf34 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bf22:	f7fd f801 	bl	8008f28 <HAL_GetTick>
 800bf26:	4602      	mov	r2, r0
 800bf28:	693b      	ldr	r3, [r7, #16]
 800bf2a:	1ad3      	subs	r3, r2, r3
 800bf2c:	2b02      	cmp	r3, #2
 800bf2e:	d901      	bls.n	800bf34 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800bf30:	2303      	movs	r3, #3
 800bf32:	e036      	b.n	800bfa2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bf34:	4b1e      	ldr	r3, [pc, #120]	; (800bfb0 <HAL_RCC_OscConfig+0x4d8>)
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d1f0      	bne.n	800bf22 <HAL_RCC_OscConfig+0x44a>
 800bf40:	e02e      	b.n	800bfa0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	699b      	ldr	r3, [r3, #24]
 800bf46:	2b01      	cmp	r3, #1
 800bf48:	d101      	bne.n	800bf4e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800bf4a:	2301      	movs	r3, #1
 800bf4c:	e029      	b.n	800bfa2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800bf4e:	4b18      	ldr	r3, [pc, #96]	; (800bfb0 <HAL_RCC_OscConfig+0x4d8>)
 800bf50:	685b      	ldr	r3, [r3, #4]
 800bf52:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	69db      	ldr	r3, [r3, #28]
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	d11c      	bne.n	800bf9c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bf6c:	429a      	cmp	r2, r3
 800bf6e:	d115      	bne.n	800bf9c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800bf70:	68fa      	ldr	r2, [r7, #12]
 800bf72:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800bf76:	4013      	ands	r3, r2
 800bf78:	687a      	ldr	r2, [r7, #4]
 800bf7a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800bf7c:	4293      	cmp	r3, r2
 800bf7e:	d10d      	bne.n	800bf9c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800bf8a:	429a      	cmp	r2, r3
 800bf8c:	d106      	bne.n	800bf9c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800bf98:	429a      	cmp	r2, r3
 800bf9a:	d001      	beq.n	800bfa0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	e000      	b.n	800bfa2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800bfa0:	2300      	movs	r3, #0
}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	3718      	adds	r7, #24
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}
 800bfaa:	bf00      	nop
 800bfac:	40007000 	.word	0x40007000
 800bfb0:	40023800 	.word	0x40023800
 800bfb4:	42470060 	.word	0x42470060

0800bfb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b084      	sub	sp, #16
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
 800bfc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d101      	bne.n	800bfcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bfc8:	2301      	movs	r3, #1
 800bfca:	e0cc      	b.n	800c166 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800bfcc:	4b68      	ldr	r3, [pc, #416]	; (800c170 <HAL_RCC_ClockConfig+0x1b8>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	f003 030f 	and.w	r3, r3, #15
 800bfd4:	683a      	ldr	r2, [r7, #0]
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	d90c      	bls.n	800bff4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bfda:	4b65      	ldr	r3, [pc, #404]	; (800c170 <HAL_RCC_ClockConfig+0x1b8>)
 800bfdc:	683a      	ldr	r2, [r7, #0]
 800bfde:	b2d2      	uxtb	r2, r2
 800bfe0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bfe2:	4b63      	ldr	r3, [pc, #396]	; (800c170 <HAL_RCC_ClockConfig+0x1b8>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	f003 030f 	and.w	r3, r3, #15
 800bfea:	683a      	ldr	r2, [r7, #0]
 800bfec:	429a      	cmp	r2, r3
 800bfee:	d001      	beq.n	800bff4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800bff0:	2301      	movs	r3, #1
 800bff2:	e0b8      	b.n	800c166 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	f003 0302 	and.w	r3, r3, #2
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d020      	beq.n	800c042 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	f003 0304 	and.w	r3, r3, #4
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d005      	beq.n	800c018 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c00c:	4b59      	ldr	r3, [pc, #356]	; (800c174 <HAL_RCC_ClockConfig+0x1bc>)
 800c00e:	689b      	ldr	r3, [r3, #8]
 800c010:	4a58      	ldr	r2, [pc, #352]	; (800c174 <HAL_RCC_ClockConfig+0x1bc>)
 800c012:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c016:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	f003 0308 	and.w	r3, r3, #8
 800c020:	2b00      	cmp	r3, #0
 800c022:	d005      	beq.n	800c030 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c024:	4b53      	ldr	r3, [pc, #332]	; (800c174 <HAL_RCC_ClockConfig+0x1bc>)
 800c026:	689b      	ldr	r3, [r3, #8]
 800c028:	4a52      	ldr	r2, [pc, #328]	; (800c174 <HAL_RCC_ClockConfig+0x1bc>)
 800c02a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c02e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c030:	4b50      	ldr	r3, [pc, #320]	; (800c174 <HAL_RCC_ClockConfig+0x1bc>)
 800c032:	689b      	ldr	r3, [r3, #8]
 800c034:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	689b      	ldr	r3, [r3, #8]
 800c03c:	494d      	ldr	r1, [pc, #308]	; (800c174 <HAL_RCC_ClockConfig+0x1bc>)
 800c03e:	4313      	orrs	r3, r2
 800c040:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f003 0301 	and.w	r3, r3, #1
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d044      	beq.n	800c0d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	685b      	ldr	r3, [r3, #4]
 800c052:	2b01      	cmp	r3, #1
 800c054:	d107      	bne.n	800c066 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c056:	4b47      	ldr	r3, [pc, #284]	; (800c174 <HAL_RCC_ClockConfig+0x1bc>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d119      	bne.n	800c096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c062:	2301      	movs	r3, #1
 800c064:	e07f      	b.n	800c166 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	685b      	ldr	r3, [r3, #4]
 800c06a:	2b02      	cmp	r3, #2
 800c06c:	d003      	beq.n	800c076 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c072:	2b03      	cmp	r3, #3
 800c074:	d107      	bne.n	800c086 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c076:	4b3f      	ldr	r3, [pc, #252]	; (800c174 <HAL_RCC_ClockConfig+0x1bc>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d109      	bne.n	800c096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c082:	2301      	movs	r3, #1
 800c084:	e06f      	b.n	800c166 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c086:	4b3b      	ldr	r3, [pc, #236]	; (800c174 <HAL_RCC_ClockConfig+0x1bc>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	f003 0302 	and.w	r3, r3, #2
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d101      	bne.n	800c096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c092:	2301      	movs	r3, #1
 800c094:	e067      	b.n	800c166 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c096:	4b37      	ldr	r3, [pc, #220]	; (800c174 <HAL_RCC_ClockConfig+0x1bc>)
 800c098:	689b      	ldr	r3, [r3, #8]
 800c09a:	f023 0203 	bic.w	r2, r3, #3
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	685b      	ldr	r3, [r3, #4]
 800c0a2:	4934      	ldr	r1, [pc, #208]	; (800c174 <HAL_RCC_ClockConfig+0x1bc>)
 800c0a4:	4313      	orrs	r3, r2
 800c0a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c0a8:	f7fc ff3e 	bl	8008f28 <HAL_GetTick>
 800c0ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c0ae:	e00a      	b.n	800c0c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c0b0:	f7fc ff3a 	bl	8008f28 <HAL_GetTick>
 800c0b4:	4602      	mov	r2, r0
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	1ad3      	subs	r3, r2, r3
 800c0ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800c0be:	4293      	cmp	r3, r2
 800c0c0:	d901      	bls.n	800c0c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c0c2:	2303      	movs	r3, #3
 800c0c4:	e04f      	b.n	800c166 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c0c6:	4b2b      	ldr	r3, [pc, #172]	; (800c174 <HAL_RCC_ClockConfig+0x1bc>)
 800c0c8:	689b      	ldr	r3, [r3, #8]
 800c0ca:	f003 020c 	and.w	r2, r3, #12
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	685b      	ldr	r3, [r3, #4]
 800c0d2:	009b      	lsls	r3, r3, #2
 800c0d4:	429a      	cmp	r2, r3
 800c0d6:	d1eb      	bne.n	800c0b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c0d8:	4b25      	ldr	r3, [pc, #148]	; (800c170 <HAL_RCC_ClockConfig+0x1b8>)
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	f003 030f 	and.w	r3, r3, #15
 800c0e0:	683a      	ldr	r2, [r7, #0]
 800c0e2:	429a      	cmp	r2, r3
 800c0e4:	d20c      	bcs.n	800c100 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c0e6:	4b22      	ldr	r3, [pc, #136]	; (800c170 <HAL_RCC_ClockConfig+0x1b8>)
 800c0e8:	683a      	ldr	r2, [r7, #0]
 800c0ea:	b2d2      	uxtb	r2, r2
 800c0ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c0ee:	4b20      	ldr	r3, [pc, #128]	; (800c170 <HAL_RCC_ClockConfig+0x1b8>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	f003 030f 	and.w	r3, r3, #15
 800c0f6:	683a      	ldr	r2, [r7, #0]
 800c0f8:	429a      	cmp	r2, r3
 800c0fa:	d001      	beq.n	800c100 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	e032      	b.n	800c166 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	f003 0304 	and.w	r3, r3, #4
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d008      	beq.n	800c11e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c10c:	4b19      	ldr	r3, [pc, #100]	; (800c174 <HAL_RCC_ClockConfig+0x1bc>)
 800c10e:	689b      	ldr	r3, [r3, #8]
 800c110:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	68db      	ldr	r3, [r3, #12]
 800c118:	4916      	ldr	r1, [pc, #88]	; (800c174 <HAL_RCC_ClockConfig+0x1bc>)
 800c11a:	4313      	orrs	r3, r2
 800c11c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	f003 0308 	and.w	r3, r3, #8
 800c126:	2b00      	cmp	r3, #0
 800c128:	d009      	beq.n	800c13e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c12a:	4b12      	ldr	r3, [pc, #72]	; (800c174 <HAL_RCC_ClockConfig+0x1bc>)
 800c12c:	689b      	ldr	r3, [r3, #8]
 800c12e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	691b      	ldr	r3, [r3, #16]
 800c136:	00db      	lsls	r3, r3, #3
 800c138:	490e      	ldr	r1, [pc, #56]	; (800c174 <HAL_RCC_ClockConfig+0x1bc>)
 800c13a:	4313      	orrs	r3, r2
 800c13c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c13e:	f000 f821 	bl	800c184 <HAL_RCC_GetSysClockFreq>
 800c142:	4601      	mov	r1, r0
 800c144:	4b0b      	ldr	r3, [pc, #44]	; (800c174 <HAL_RCC_ClockConfig+0x1bc>)
 800c146:	689b      	ldr	r3, [r3, #8]
 800c148:	091b      	lsrs	r3, r3, #4
 800c14a:	f003 030f 	and.w	r3, r3, #15
 800c14e:	4a0a      	ldr	r2, [pc, #40]	; (800c178 <HAL_RCC_ClockConfig+0x1c0>)
 800c150:	5cd3      	ldrb	r3, [r2, r3]
 800c152:	fa21 f303 	lsr.w	r3, r1, r3
 800c156:	4a09      	ldr	r2, [pc, #36]	; (800c17c <HAL_RCC_ClockConfig+0x1c4>)
 800c158:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c15a:	4b09      	ldr	r3, [pc, #36]	; (800c180 <HAL_RCC_ClockConfig+0x1c8>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	4618      	mov	r0, r3
 800c160:	f7fc fe9e 	bl	8008ea0 <HAL_InitTick>

  return HAL_OK;
 800c164:	2300      	movs	r3, #0
}
 800c166:	4618      	mov	r0, r3
 800c168:	3710      	adds	r7, #16
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bd80      	pop	{r7, pc}
 800c16e:	bf00      	nop
 800c170:	40023c00 	.word	0x40023c00
 800c174:	40023800 	.word	0x40023800
 800c178:	0800f6b8 	.word	0x0800f6b8
 800c17c:	20000000 	.word	0x20000000
 800c180:	20000004 	.word	0x20000004

0800c184 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c184:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c186:	b085      	sub	sp, #20
 800c188:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c18a:	2300      	movs	r3, #0
 800c18c:	607b      	str	r3, [r7, #4]
 800c18e:	2300      	movs	r3, #0
 800c190:	60fb      	str	r3, [r7, #12]
 800c192:	2300      	movs	r3, #0
 800c194:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800c196:	2300      	movs	r3, #0
 800c198:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c19a:	4b63      	ldr	r3, [pc, #396]	; (800c328 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c19c:	689b      	ldr	r3, [r3, #8]
 800c19e:	f003 030c 	and.w	r3, r3, #12
 800c1a2:	2b04      	cmp	r3, #4
 800c1a4:	d007      	beq.n	800c1b6 <HAL_RCC_GetSysClockFreq+0x32>
 800c1a6:	2b08      	cmp	r3, #8
 800c1a8:	d008      	beq.n	800c1bc <HAL_RCC_GetSysClockFreq+0x38>
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	f040 80b4 	bne.w	800c318 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c1b0:	4b5e      	ldr	r3, [pc, #376]	; (800c32c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c1b2:	60bb      	str	r3, [r7, #8]
       break;
 800c1b4:	e0b3      	b.n	800c31e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c1b6:	4b5e      	ldr	r3, [pc, #376]	; (800c330 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800c1b8:	60bb      	str	r3, [r7, #8]
      break;
 800c1ba:	e0b0      	b.n	800c31e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c1bc:	4b5a      	ldr	r3, [pc, #360]	; (800c328 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c1be:	685b      	ldr	r3, [r3, #4]
 800c1c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c1c4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c1c6:	4b58      	ldr	r3, [pc, #352]	; (800c328 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c1c8:	685b      	ldr	r3, [r3, #4]
 800c1ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d04a      	beq.n	800c268 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c1d2:	4b55      	ldr	r3, [pc, #340]	; (800c328 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c1d4:	685b      	ldr	r3, [r3, #4]
 800c1d6:	099b      	lsrs	r3, r3, #6
 800c1d8:	f04f 0400 	mov.w	r4, #0
 800c1dc:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c1e0:	f04f 0200 	mov.w	r2, #0
 800c1e4:	ea03 0501 	and.w	r5, r3, r1
 800c1e8:	ea04 0602 	and.w	r6, r4, r2
 800c1ec:	4629      	mov	r1, r5
 800c1ee:	4632      	mov	r2, r6
 800c1f0:	f04f 0300 	mov.w	r3, #0
 800c1f4:	f04f 0400 	mov.w	r4, #0
 800c1f8:	0154      	lsls	r4, r2, #5
 800c1fa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c1fe:	014b      	lsls	r3, r1, #5
 800c200:	4619      	mov	r1, r3
 800c202:	4622      	mov	r2, r4
 800c204:	1b49      	subs	r1, r1, r5
 800c206:	eb62 0206 	sbc.w	r2, r2, r6
 800c20a:	f04f 0300 	mov.w	r3, #0
 800c20e:	f04f 0400 	mov.w	r4, #0
 800c212:	0194      	lsls	r4, r2, #6
 800c214:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c218:	018b      	lsls	r3, r1, #6
 800c21a:	1a5b      	subs	r3, r3, r1
 800c21c:	eb64 0402 	sbc.w	r4, r4, r2
 800c220:	f04f 0100 	mov.w	r1, #0
 800c224:	f04f 0200 	mov.w	r2, #0
 800c228:	00e2      	lsls	r2, r4, #3
 800c22a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c22e:	00d9      	lsls	r1, r3, #3
 800c230:	460b      	mov	r3, r1
 800c232:	4614      	mov	r4, r2
 800c234:	195b      	adds	r3, r3, r5
 800c236:	eb44 0406 	adc.w	r4, r4, r6
 800c23a:	f04f 0100 	mov.w	r1, #0
 800c23e:	f04f 0200 	mov.w	r2, #0
 800c242:	0262      	lsls	r2, r4, #9
 800c244:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800c248:	0259      	lsls	r1, r3, #9
 800c24a:	460b      	mov	r3, r1
 800c24c:	4614      	mov	r4, r2
 800c24e:	4618      	mov	r0, r3
 800c250:	4621      	mov	r1, r4
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	f04f 0400 	mov.w	r4, #0
 800c258:	461a      	mov	r2, r3
 800c25a:	4623      	mov	r3, r4
 800c25c:	f7fb ffb4 	bl	80081c8 <__aeabi_uldivmod>
 800c260:	4603      	mov	r3, r0
 800c262:	460c      	mov	r4, r1
 800c264:	60fb      	str	r3, [r7, #12]
 800c266:	e049      	b.n	800c2fc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c268:	4b2f      	ldr	r3, [pc, #188]	; (800c328 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c26a:	685b      	ldr	r3, [r3, #4]
 800c26c:	099b      	lsrs	r3, r3, #6
 800c26e:	f04f 0400 	mov.w	r4, #0
 800c272:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c276:	f04f 0200 	mov.w	r2, #0
 800c27a:	ea03 0501 	and.w	r5, r3, r1
 800c27e:	ea04 0602 	and.w	r6, r4, r2
 800c282:	4629      	mov	r1, r5
 800c284:	4632      	mov	r2, r6
 800c286:	f04f 0300 	mov.w	r3, #0
 800c28a:	f04f 0400 	mov.w	r4, #0
 800c28e:	0154      	lsls	r4, r2, #5
 800c290:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c294:	014b      	lsls	r3, r1, #5
 800c296:	4619      	mov	r1, r3
 800c298:	4622      	mov	r2, r4
 800c29a:	1b49      	subs	r1, r1, r5
 800c29c:	eb62 0206 	sbc.w	r2, r2, r6
 800c2a0:	f04f 0300 	mov.w	r3, #0
 800c2a4:	f04f 0400 	mov.w	r4, #0
 800c2a8:	0194      	lsls	r4, r2, #6
 800c2aa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c2ae:	018b      	lsls	r3, r1, #6
 800c2b0:	1a5b      	subs	r3, r3, r1
 800c2b2:	eb64 0402 	sbc.w	r4, r4, r2
 800c2b6:	f04f 0100 	mov.w	r1, #0
 800c2ba:	f04f 0200 	mov.w	r2, #0
 800c2be:	00e2      	lsls	r2, r4, #3
 800c2c0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c2c4:	00d9      	lsls	r1, r3, #3
 800c2c6:	460b      	mov	r3, r1
 800c2c8:	4614      	mov	r4, r2
 800c2ca:	195b      	adds	r3, r3, r5
 800c2cc:	eb44 0406 	adc.w	r4, r4, r6
 800c2d0:	f04f 0100 	mov.w	r1, #0
 800c2d4:	f04f 0200 	mov.w	r2, #0
 800c2d8:	02a2      	lsls	r2, r4, #10
 800c2da:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c2de:	0299      	lsls	r1, r3, #10
 800c2e0:	460b      	mov	r3, r1
 800c2e2:	4614      	mov	r4, r2
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	4621      	mov	r1, r4
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f04f 0400 	mov.w	r4, #0
 800c2ee:	461a      	mov	r2, r3
 800c2f0:	4623      	mov	r3, r4
 800c2f2:	f7fb ff69 	bl	80081c8 <__aeabi_uldivmod>
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	460c      	mov	r4, r1
 800c2fa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c2fc:	4b0a      	ldr	r3, [pc, #40]	; (800c328 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c2fe:	685b      	ldr	r3, [r3, #4]
 800c300:	0c1b      	lsrs	r3, r3, #16
 800c302:	f003 0303 	and.w	r3, r3, #3
 800c306:	3301      	adds	r3, #1
 800c308:	005b      	lsls	r3, r3, #1
 800c30a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800c30c:	68fa      	ldr	r2, [r7, #12]
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	fbb2 f3f3 	udiv	r3, r2, r3
 800c314:	60bb      	str	r3, [r7, #8]
      break;
 800c316:	e002      	b.n	800c31e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c318:	4b04      	ldr	r3, [pc, #16]	; (800c32c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c31a:	60bb      	str	r3, [r7, #8]
      break;
 800c31c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c31e:	68bb      	ldr	r3, [r7, #8]
}
 800c320:	4618      	mov	r0, r3
 800c322:	3714      	adds	r7, #20
 800c324:	46bd      	mov	sp, r7
 800c326:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c328:	40023800 	.word	0x40023800
 800c32c:	00f42400 	.word	0x00f42400
 800c330:	007a1200 	.word	0x007a1200

0800c334 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c334:	b480      	push	{r7}
 800c336:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c338:	4b03      	ldr	r3, [pc, #12]	; (800c348 <HAL_RCC_GetHCLKFreq+0x14>)
 800c33a:	681b      	ldr	r3, [r3, #0]
}
 800c33c:	4618      	mov	r0, r3
 800c33e:	46bd      	mov	sp, r7
 800c340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c344:	4770      	bx	lr
 800c346:	bf00      	nop
 800c348:	20000000 	.word	0x20000000

0800c34c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c350:	f7ff fff0 	bl	800c334 <HAL_RCC_GetHCLKFreq>
 800c354:	4601      	mov	r1, r0
 800c356:	4b05      	ldr	r3, [pc, #20]	; (800c36c <HAL_RCC_GetPCLK1Freq+0x20>)
 800c358:	689b      	ldr	r3, [r3, #8]
 800c35a:	0a9b      	lsrs	r3, r3, #10
 800c35c:	f003 0307 	and.w	r3, r3, #7
 800c360:	4a03      	ldr	r2, [pc, #12]	; (800c370 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c362:	5cd3      	ldrb	r3, [r2, r3]
 800c364:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c368:	4618      	mov	r0, r3
 800c36a:	bd80      	pop	{r7, pc}
 800c36c:	40023800 	.word	0x40023800
 800c370:	0800f6c8 	.word	0x0800f6c8

0800c374 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c378:	f7ff ffdc 	bl	800c334 <HAL_RCC_GetHCLKFreq>
 800c37c:	4601      	mov	r1, r0
 800c37e:	4b05      	ldr	r3, [pc, #20]	; (800c394 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c380:	689b      	ldr	r3, [r3, #8]
 800c382:	0b5b      	lsrs	r3, r3, #13
 800c384:	f003 0307 	and.w	r3, r3, #7
 800c388:	4a03      	ldr	r2, [pc, #12]	; (800c398 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c38a:	5cd3      	ldrb	r3, [r2, r3]
 800c38c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c390:	4618      	mov	r0, r3
 800c392:	bd80      	pop	{r7, pc}
 800c394:	40023800 	.word	0x40023800
 800c398:	0800f6c8 	.word	0x0800f6c8

0800c39c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b086      	sub	sp, #24
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	f003 0301 	and.w	r3, r3, #1
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d105      	bne.n	800c3c4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d035      	beq.n	800c430 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c3c4:	4b62      	ldr	r3, [pc, #392]	; (800c550 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c3ca:	f7fc fdad 	bl	8008f28 <HAL_GetTick>
 800c3ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c3d0:	e008      	b.n	800c3e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c3d2:	f7fc fda9 	bl	8008f28 <HAL_GetTick>
 800c3d6:	4602      	mov	r2, r0
 800c3d8:	697b      	ldr	r3, [r7, #20]
 800c3da:	1ad3      	subs	r3, r2, r3
 800c3dc:	2b02      	cmp	r3, #2
 800c3de:	d901      	bls.n	800c3e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c3e0:	2303      	movs	r3, #3
 800c3e2:	e0b0      	b.n	800c546 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c3e4:	4b5b      	ldr	r3, [pc, #364]	; (800c554 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d1f0      	bne.n	800c3d2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	685b      	ldr	r3, [r3, #4]
 800c3f4:	019a      	lsls	r2, r3, #6
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	689b      	ldr	r3, [r3, #8]
 800c3fa:	071b      	lsls	r3, r3, #28
 800c3fc:	4955      	ldr	r1, [pc, #340]	; (800c554 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c3fe:	4313      	orrs	r3, r2
 800c400:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c404:	4b52      	ldr	r3, [pc, #328]	; (800c550 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800c406:	2201      	movs	r2, #1
 800c408:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c40a:	f7fc fd8d 	bl	8008f28 <HAL_GetTick>
 800c40e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c410:	e008      	b.n	800c424 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c412:	f7fc fd89 	bl	8008f28 <HAL_GetTick>
 800c416:	4602      	mov	r2, r0
 800c418:	697b      	ldr	r3, [r7, #20]
 800c41a:	1ad3      	subs	r3, r2, r3
 800c41c:	2b02      	cmp	r3, #2
 800c41e:	d901      	bls.n	800c424 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c420:	2303      	movs	r3, #3
 800c422:	e090      	b.n	800c546 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c424:	4b4b      	ldr	r3, [pc, #300]	; (800c554 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d0f0      	beq.n	800c412 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	f003 0302 	and.w	r3, r3, #2
 800c438:	2b00      	cmp	r3, #0
 800c43a:	f000 8083 	beq.w	800c544 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c43e:	2300      	movs	r3, #0
 800c440:	60fb      	str	r3, [r7, #12]
 800c442:	4b44      	ldr	r3, [pc, #272]	; (800c554 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c446:	4a43      	ldr	r2, [pc, #268]	; (800c554 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c44c:	6413      	str	r3, [r2, #64]	; 0x40
 800c44e:	4b41      	ldr	r3, [pc, #260]	; (800c554 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c456:	60fb      	str	r3, [r7, #12]
 800c458:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800c45a:	4b3f      	ldr	r3, [pc, #252]	; (800c558 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	4a3e      	ldr	r2, [pc, #248]	; (800c558 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800c460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c464:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c466:	f7fc fd5f 	bl	8008f28 <HAL_GetTick>
 800c46a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c46c:	e008      	b.n	800c480 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800c46e:	f7fc fd5b 	bl	8008f28 <HAL_GetTick>
 800c472:	4602      	mov	r2, r0
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	1ad3      	subs	r3, r2, r3
 800c478:	2b02      	cmp	r3, #2
 800c47a:	d901      	bls.n	800c480 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800c47c:	2303      	movs	r3, #3
 800c47e:	e062      	b.n	800c546 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c480:	4b35      	ldr	r3, [pc, #212]	; (800c558 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d0f0      	beq.n	800c46e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c48c:	4b31      	ldr	r3, [pc, #196]	; (800c554 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c48e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c490:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c494:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c496:	693b      	ldr	r3, [r7, #16]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d02f      	beq.n	800c4fc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	68db      	ldr	r3, [r3, #12]
 800c4a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c4a4:	693a      	ldr	r2, [r7, #16]
 800c4a6:	429a      	cmp	r2, r3
 800c4a8:	d028      	beq.n	800c4fc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c4aa:	4b2a      	ldr	r3, [pc, #168]	; (800c554 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c4ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c4b2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c4b4:	4b29      	ldr	r3, [pc, #164]	; (800c55c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800c4b6:	2201      	movs	r2, #1
 800c4b8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c4ba:	4b28      	ldr	r3, [pc, #160]	; (800c55c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800c4bc:	2200      	movs	r2, #0
 800c4be:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800c4c0:	4a24      	ldr	r2, [pc, #144]	; (800c554 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c4c2:	693b      	ldr	r3, [r7, #16]
 800c4c4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c4c6:	4b23      	ldr	r3, [pc, #140]	; (800c554 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c4c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4ca:	f003 0301 	and.w	r3, r3, #1
 800c4ce:	2b01      	cmp	r3, #1
 800c4d0:	d114      	bne.n	800c4fc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800c4d2:	f7fc fd29 	bl	8008f28 <HAL_GetTick>
 800c4d6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c4d8:	e00a      	b.n	800c4f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c4da:	f7fc fd25 	bl	8008f28 <HAL_GetTick>
 800c4de:	4602      	mov	r2, r0
 800c4e0:	697b      	ldr	r3, [r7, #20]
 800c4e2:	1ad3      	subs	r3, r2, r3
 800c4e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4e8:	4293      	cmp	r3, r2
 800c4ea:	d901      	bls.n	800c4f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800c4ec:	2303      	movs	r3, #3
 800c4ee:	e02a      	b.n	800c546 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c4f0:	4b18      	ldr	r3, [pc, #96]	; (800c554 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c4f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4f4:	f003 0302 	and.w	r3, r3, #2
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d0ee      	beq.n	800c4da <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	68db      	ldr	r3, [r3, #12]
 800c500:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c504:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c508:	d10d      	bne.n	800c526 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800c50a:	4b12      	ldr	r3, [pc, #72]	; (800c554 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c50c:	689b      	ldr	r3, [r3, #8]
 800c50e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	68db      	ldr	r3, [r3, #12]
 800c516:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c51a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c51e:	490d      	ldr	r1, [pc, #52]	; (800c554 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c520:	4313      	orrs	r3, r2
 800c522:	608b      	str	r3, [r1, #8]
 800c524:	e005      	b.n	800c532 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800c526:	4b0b      	ldr	r3, [pc, #44]	; (800c554 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c528:	689b      	ldr	r3, [r3, #8]
 800c52a:	4a0a      	ldr	r2, [pc, #40]	; (800c554 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c52c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c530:	6093      	str	r3, [r2, #8]
 800c532:	4b08      	ldr	r3, [pc, #32]	; (800c554 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c534:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	68db      	ldr	r3, [r3, #12]
 800c53a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c53e:	4905      	ldr	r1, [pc, #20]	; (800c554 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c540:	4313      	orrs	r3, r2
 800c542:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800c544:	2300      	movs	r3, #0
}
 800c546:	4618      	mov	r0, r3
 800c548:	3718      	adds	r7, #24
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bd80      	pop	{r7, pc}
 800c54e:	bf00      	nop
 800c550:	42470068 	.word	0x42470068
 800c554:	40023800 	.word	0x40023800
 800c558:	40007000 	.word	0x40007000
 800c55c:	42470e40 	.word	0x42470e40

0800c560 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800c560:	b480      	push	{r7}
 800c562:	b087      	sub	sp, #28
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800c568:	2300      	movs	r3, #0
 800c56a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800c56c:	2300      	movs	r3, #0
 800c56e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800c570:	2300      	movs	r3, #0
 800c572:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800c574:	2300      	movs	r3, #0
 800c576:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2b01      	cmp	r3, #1
 800c57c:	d13d      	bne.n	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800c57e:	4b22      	ldr	r3, [pc, #136]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800c580:	689b      	ldr	r3, [r3, #8]
 800c582:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c586:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d004      	beq.n	800c598 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800c58e:	2b01      	cmp	r3, #1
 800c590:	d12f      	bne.n	800c5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800c592:	4b1e      	ldr	r3, [pc, #120]	; (800c60c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800c594:	617b      	str	r3, [r7, #20]
          break;
 800c596:	e02f      	b.n	800c5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800c598:	4b1b      	ldr	r3, [pc, #108]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800c59a:	685b      	ldr	r3, [r3, #4]
 800c59c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c5a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c5a4:	d108      	bne.n	800c5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c5a6:	4b18      	ldr	r3, [pc, #96]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800c5a8:	685b      	ldr	r3, [r3, #4]
 800c5aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c5ae:	4a18      	ldr	r2, [pc, #96]	; (800c610 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800c5b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5b4:	613b      	str	r3, [r7, #16]
 800c5b6:	e007      	b.n	800c5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c5b8:	4b13      	ldr	r3, [pc, #76]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800c5ba:	685b      	ldr	r3, [r3, #4]
 800c5bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c5c0:	4a14      	ldr	r2, [pc, #80]	; (800c614 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800c5c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5c6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800c5c8:	4b0f      	ldr	r3, [pc, #60]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800c5ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c5ce:	099b      	lsrs	r3, r3, #6
 800c5d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c5d4:	693b      	ldr	r3, [r7, #16]
 800c5d6:	fb02 f303 	mul.w	r3, r2, r3
 800c5da:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800c5dc:	4b0a      	ldr	r3, [pc, #40]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800c5de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c5e2:	0f1b      	lsrs	r3, r3, #28
 800c5e4:	f003 0307 	and.w	r3, r3, #7
 800c5e8:	68ba      	ldr	r2, [r7, #8]
 800c5ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5ee:	617b      	str	r3, [r7, #20]
          break;
 800c5f0:	e002      	b.n	800c5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	617b      	str	r3, [r7, #20]
          break;
 800c5f6:	bf00      	nop
        }
      }
      break;
 800c5f8:	bf00      	nop
    }
  }
  return frequency;
 800c5fa:	697b      	ldr	r3, [r7, #20]
}
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	371c      	adds	r7, #28
 800c600:	46bd      	mov	sp, r7
 800c602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c606:	4770      	bx	lr
 800c608:	40023800 	.word	0x40023800
 800c60c:	00bb8000 	.word	0x00bb8000
 800c610:	007a1200 	.word	0x007a1200
 800c614:	00f42400 	.word	0x00f42400

0800c618 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b082      	sub	sp, #8
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d101      	bne.n	800c62a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c626:	2301      	movs	r3, #1
 800c628:	e056      	b.n	800c6d8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	2200      	movs	r2, #0
 800c62e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c636:	b2db      	uxtb	r3, r3
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d106      	bne.n	800c64a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2200      	movs	r2, #0
 800c640:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c644:	6878      	ldr	r0, [r7, #4]
 800c646:	f7fc facb 	bl	8008be0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2202      	movs	r2, #2
 800c64e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	681a      	ldr	r2, [r3, #0]
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c660:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	685a      	ldr	r2, [r3, #4]
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	689b      	ldr	r3, [r3, #8]
 800c66a:	431a      	orrs	r2, r3
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	68db      	ldr	r3, [r3, #12]
 800c670:	431a      	orrs	r2, r3
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	691b      	ldr	r3, [r3, #16]
 800c676:	431a      	orrs	r2, r3
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	695b      	ldr	r3, [r3, #20]
 800c67c:	431a      	orrs	r2, r3
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	699b      	ldr	r3, [r3, #24]
 800c682:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c686:	431a      	orrs	r2, r3
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	69db      	ldr	r3, [r3, #28]
 800c68c:	431a      	orrs	r2, r3
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6a1b      	ldr	r3, [r3, #32]
 800c692:	ea42 0103 	orr.w	r1, r2, r3
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	430a      	orrs	r2, r1
 800c6a0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	699b      	ldr	r3, [r3, #24]
 800c6a6:	0c1b      	lsrs	r3, r3, #16
 800c6a8:	f003 0104 	and.w	r1, r3, #4
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	430a      	orrs	r2, r1
 800c6b6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	69da      	ldr	r2, [r3, #28]
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c6c6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2201      	movs	r2, #1
 800c6d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800c6d6:	2300      	movs	r3, #0
}
 800c6d8:	4618      	mov	r0, r3
 800c6da:	3708      	adds	r7, #8
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	bd80      	pop	{r7, pc}

0800c6e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b082      	sub	sp, #8
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d101      	bne.n	800c6f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c6ee:	2301      	movs	r3, #1
 800c6f0:	e03f      	b.n	800c772 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c6f8:	b2db      	uxtb	r3, r3
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d106      	bne.n	800c70c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	2200      	movs	r2, #0
 800c702:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	f7fc fab2 	bl	8008c70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2224      	movs	r2, #36	; 0x24
 800c710:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	68da      	ldr	r2, [r3, #12]
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c722:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c724:	6878      	ldr	r0, [r7, #4]
 800c726:	f000 f90b 	bl	800c940 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	691a      	ldr	r2, [r3, #16]
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c738:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	695a      	ldr	r2, [r3, #20]
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c748:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	68da      	ldr	r2, [r3, #12]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c758:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2200      	movs	r2, #0
 800c75e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2220      	movs	r2, #32
 800c764:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2220      	movs	r2, #32
 800c76c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800c770:	2300      	movs	r3, #0
}
 800c772:	4618      	mov	r0, r3
 800c774:	3708      	adds	r7, #8
 800c776:	46bd      	mov	sp, r7
 800c778:	bd80      	pop	{r7, pc}

0800c77a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c77a:	b580      	push	{r7, lr}
 800c77c:	b088      	sub	sp, #32
 800c77e:	af02      	add	r7, sp, #8
 800c780:	60f8      	str	r0, [r7, #12]
 800c782:	60b9      	str	r1, [r7, #8]
 800c784:	603b      	str	r3, [r7, #0]
 800c786:	4613      	mov	r3, r2
 800c788:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800c78a:	2300      	movs	r3, #0
 800c78c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c794:	b2db      	uxtb	r3, r3
 800c796:	2b20      	cmp	r3, #32
 800c798:	f040 8083 	bne.w	800c8a2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800c79c:	68bb      	ldr	r3, [r7, #8]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d002      	beq.n	800c7a8 <HAL_UART_Transmit+0x2e>
 800c7a2:	88fb      	ldrh	r3, [r7, #6]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d101      	bne.n	800c7ac <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	e07b      	b.n	800c8a4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c7b2:	2b01      	cmp	r3, #1
 800c7b4:	d101      	bne.n	800c7ba <HAL_UART_Transmit+0x40>
 800c7b6:	2302      	movs	r3, #2
 800c7b8:	e074      	b.n	800c8a4 <HAL_UART_Transmit+0x12a>
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	2201      	movs	r2, #1
 800c7be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	2221      	movs	r2, #33	; 0x21
 800c7cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800c7d0:	f7fc fbaa 	bl	8008f28 <HAL_GetTick>
 800c7d4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	88fa      	ldrh	r2, [r7, #6]
 800c7da:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	88fa      	ldrh	r2, [r7, #6]
 800c7e0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800c7ea:	e042      	b.n	800c872 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c7f0:	b29b      	uxth	r3, r3
 800c7f2:	3b01      	subs	r3, #1
 800c7f4:	b29a      	uxth	r2, r3
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	689b      	ldr	r3, [r3, #8]
 800c7fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c802:	d122      	bne.n	800c84a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	9300      	str	r3, [sp, #0]
 800c808:	697b      	ldr	r3, [r7, #20]
 800c80a:	2200      	movs	r2, #0
 800c80c:	2180      	movs	r1, #128	; 0x80
 800c80e:	68f8      	ldr	r0, [r7, #12]
 800c810:	f000 f84c 	bl	800c8ac <UART_WaitOnFlagUntilTimeout>
 800c814:	4603      	mov	r3, r0
 800c816:	2b00      	cmp	r3, #0
 800c818:	d001      	beq.n	800c81e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800c81a:	2303      	movs	r3, #3
 800c81c:	e042      	b.n	800c8a4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800c822:	693b      	ldr	r3, [r7, #16]
 800c824:	881b      	ldrh	r3, [r3, #0]
 800c826:	461a      	mov	r2, r3
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c830:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	691b      	ldr	r3, [r3, #16]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d103      	bne.n	800c842 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800c83a:	68bb      	ldr	r3, [r7, #8]
 800c83c:	3302      	adds	r3, #2
 800c83e:	60bb      	str	r3, [r7, #8]
 800c840:	e017      	b.n	800c872 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800c842:	68bb      	ldr	r3, [r7, #8]
 800c844:	3301      	adds	r3, #1
 800c846:	60bb      	str	r3, [r7, #8]
 800c848:	e013      	b.n	800c872 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	9300      	str	r3, [sp, #0]
 800c84e:	697b      	ldr	r3, [r7, #20]
 800c850:	2200      	movs	r2, #0
 800c852:	2180      	movs	r1, #128	; 0x80
 800c854:	68f8      	ldr	r0, [r7, #12]
 800c856:	f000 f829 	bl	800c8ac <UART_WaitOnFlagUntilTimeout>
 800c85a:	4603      	mov	r3, r0
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d001      	beq.n	800c864 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800c860:	2303      	movs	r3, #3
 800c862:	e01f      	b.n	800c8a4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800c864:	68bb      	ldr	r3, [r7, #8]
 800c866:	1c5a      	adds	r2, r3, #1
 800c868:	60ba      	str	r2, [r7, #8]
 800c86a:	781a      	ldrb	r2, [r3, #0]
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c876:	b29b      	uxth	r3, r3
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d1b7      	bne.n	800c7ec <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	9300      	str	r3, [sp, #0]
 800c880:	697b      	ldr	r3, [r7, #20]
 800c882:	2200      	movs	r2, #0
 800c884:	2140      	movs	r1, #64	; 0x40
 800c886:	68f8      	ldr	r0, [r7, #12]
 800c888:	f000 f810 	bl	800c8ac <UART_WaitOnFlagUntilTimeout>
 800c88c:	4603      	mov	r3, r0
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d001      	beq.n	800c896 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800c892:	2303      	movs	r3, #3
 800c894:	e006      	b.n	800c8a4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	2220      	movs	r2, #32
 800c89a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800c89e:	2300      	movs	r3, #0
 800c8a0:	e000      	b.n	800c8a4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800c8a2:	2302      	movs	r3, #2
  }
}
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	3718      	adds	r7, #24
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}

0800c8ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b084      	sub	sp, #16
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	60f8      	str	r0, [r7, #12]
 800c8b4:	60b9      	str	r1, [r7, #8]
 800c8b6:	603b      	str	r3, [r7, #0]
 800c8b8:	4613      	mov	r3, r2
 800c8ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c8bc:	e02c      	b.n	800c918 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c8be:	69bb      	ldr	r3, [r7, #24]
 800c8c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8c4:	d028      	beq.n	800c918 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c8c6:	69bb      	ldr	r3, [r7, #24]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d007      	beq.n	800c8dc <UART_WaitOnFlagUntilTimeout+0x30>
 800c8cc:	f7fc fb2c 	bl	8008f28 <HAL_GetTick>
 800c8d0:	4602      	mov	r2, r0
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	1ad3      	subs	r3, r2, r3
 800c8d6:	69ba      	ldr	r2, [r7, #24]
 800c8d8:	429a      	cmp	r2, r3
 800c8da:	d21d      	bcs.n	800c918 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	68da      	ldr	r2, [r3, #12]
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c8ea:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	695a      	ldr	r2, [r3, #20]
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	f022 0201 	bic.w	r2, r2, #1
 800c8fa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	2220      	movs	r2, #32
 800c900:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	2220      	movs	r2, #32
 800c908:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	2200      	movs	r2, #0
 800c910:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800c914:	2303      	movs	r3, #3
 800c916:	e00f      	b.n	800c938 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	681a      	ldr	r2, [r3, #0]
 800c91e:	68bb      	ldr	r3, [r7, #8]
 800c920:	4013      	ands	r3, r2
 800c922:	68ba      	ldr	r2, [r7, #8]
 800c924:	429a      	cmp	r2, r3
 800c926:	bf0c      	ite	eq
 800c928:	2301      	moveq	r3, #1
 800c92a:	2300      	movne	r3, #0
 800c92c:	b2db      	uxtb	r3, r3
 800c92e:	461a      	mov	r2, r3
 800c930:	79fb      	ldrb	r3, [r7, #7]
 800c932:	429a      	cmp	r2, r3
 800c934:	d0c3      	beq.n	800c8be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c936:	2300      	movs	r3, #0
}
 800c938:	4618      	mov	r0, r3
 800c93a:	3710      	adds	r7, #16
 800c93c:	46bd      	mov	sp, r7
 800c93e:	bd80      	pop	{r7, pc}

0800c940 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c944:	b085      	sub	sp, #20
 800c946:	af00      	add	r7, sp, #0
 800c948:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	691b      	ldr	r3, [r3, #16]
 800c950:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	68da      	ldr	r2, [r3, #12]
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	430a      	orrs	r2, r1
 800c95e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	689a      	ldr	r2, [r3, #8]
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	691b      	ldr	r3, [r3, #16]
 800c968:	431a      	orrs	r2, r3
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	695b      	ldr	r3, [r3, #20]
 800c96e:	431a      	orrs	r2, r3
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	69db      	ldr	r3, [r3, #28]
 800c974:	4313      	orrs	r3, r2
 800c976:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	68db      	ldr	r3, [r3, #12]
 800c97e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800c982:	f023 030c 	bic.w	r3, r3, #12
 800c986:	687a      	ldr	r2, [r7, #4]
 800c988:	6812      	ldr	r2, [r2, #0]
 800c98a:	68f9      	ldr	r1, [r7, #12]
 800c98c:	430b      	orrs	r3, r1
 800c98e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	695b      	ldr	r3, [r3, #20]
 800c996:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	699a      	ldr	r2, [r3, #24]
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	430a      	orrs	r2, r1
 800c9a4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	69db      	ldr	r3, [r3, #28]
 800c9aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c9ae:	f040 818b 	bne.w	800ccc8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	4ac1      	ldr	r2, [pc, #772]	; (800ccbc <UART_SetConfig+0x37c>)
 800c9b8:	4293      	cmp	r3, r2
 800c9ba:	d005      	beq.n	800c9c8 <UART_SetConfig+0x88>
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	4abf      	ldr	r2, [pc, #764]	; (800ccc0 <UART_SetConfig+0x380>)
 800c9c2:	4293      	cmp	r3, r2
 800c9c4:	f040 80bd 	bne.w	800cb42 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c9c8:	f7ff fcd4 	bl	800c374 <HAL_RCC_GetPCLK2Freq>
 800c9cc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c9ce:	68bb      	ldr	r3, [r7, #8]
 800c9d0:	461d      	mov	r5, r3
 800c9d2:	f04f 0600 	mov.w	r6, #0
 800c9d6:	46a8      	mov	r8, r5
 800c9d8:	46b1      	mov	r9, r6
 800c9da:	eb18 0308 	adds.w	r3, r8, r8
 800c9de:	eb49 0409 	adc.w	r4, r9, r9
 800c9e2:	4698      	mov	r8, r3
 800c9e4:	46a1      	mov	r9, r4
 800c9e6:	eb18 0805 	adds.w	r8, r8, r5
 800c9ea:	eb49 0906 	adc.w	r9, r9, r6
 800c9ee:	f04f 0100 	mov.w	r1, #0
 800c9f2:	f04f 0200 	mov.w	r2, #0
 800c9f6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800c9fa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800c9fe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ca02:	4688      	mov	r8, r1
 800ca04:	4691      	mov	r9, r2
 800ca06:	eb18 0005 	adds.w	r0, r8, r5
 800ca0a:	eb49 0106 	adc.w	r1, r9, r6
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	685b      	ldr	r3, [r3, #4]
 800ca12:	461d      	mov	r5, r3
 800ca14:	f04f 0600 	mov.w	r6, #0
 800ca18:	196b      	adds	r3, r5, r5
 800ca1a:	eb46 0406 	adc.w	r4, r6, r6
 800ca1e:	461a      	mov	r2, r3
 800ca20:	4623      	mov	r3, r4
 800ca22:	f7fb fbd1 	bl	80081c8 <__aeabi_uldivmod>
 800ca26:	4603      	mov	r3, r0
 800ca28:	460c      	mov	r4, r1
 800ca2a:	461a      	mov	r2, r3
 800ca2c:	4ba5      	ldr	r3, [pc, #660]	; (800ccc4 <UART_SetConfig+0x384>)
 800ca2e:	fba3 2302 	umull	r2, r3, r3, r2
 800ca32:	095b      	lsrs	r3, r3, #5
 800ca34:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	461d      	mov	r5, r3
 800ca3c:	f04f 0600 	mov.w	r6, #0
 800ca40:	46a9      	mov	r9, r5
 800ca42:	46b2      	mov	sl, r6
 800ca44:	eb19 0309 	adds.w	r3, r9, r9
 800ca48:	eb4a 040a 	adc.w	r4, sl, sl
 800ca4c:	4699      	mov	r9, r3
 800ca4e:	46a2      	mov	sl, r4
 800ca50:	eb19 0905 	adds.w	r9, r9, r5
 800ca54:	eb4a 0a06 	adc.w	sl, sl, r6
 800ca58:	f04f 0100 	mov.w	r1, #0
 800ca5c:	f04f 0200 	mov.w	r2, #0
 800ca60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ca64:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ca68:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ca6c:	4689      	mov	r9, r1
 800ca6e:	4692      	mov	sl, r2
 800ca70:	eb19 0005 	adds.w	r0, r9, r5
 800ca74:	eb4a 0106 	adc.w	r1, sl, r6
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	685b      	ldr	r3, [r3, #4]
 800ca7c:	461d      	mov	r5, r3
 800ca7e:	f04f 0600 	mov.w	r6, #0
 800ca82:	196b      	adds	r3, r5, r5
 800ca84:	eb46 0406 	adc.w	r4, r6, r6
 800ca88:	461a      	mov	r2, r3
 800ca8a:	4623      	mov	r3, r4
 800ca8c:	f7fb fb9c 	bl	80081c8 <__aeabi_uldivmod>
 800ca90:	4603      	mov	r3, r0
 800ca92:	460c      	mov	r4, r1
 800ca94:	461a      	mov	r2, r3
 800ca96:	4b8b      	ldr	r3, [pc, #556]	; (800ccc4 <UART_SetConfig+0x384>)
 800ca98:	fba3 1302 	umull	r1, r3, r3, r2
 800ca9c:	095b      	lsrs	r3, r3, #5
 800ca9e:	2164      	movs	r1, #100	; 0x64
 800caa0:	fb01 f303 	mul.w	r3, r1, r3
 800caa4:	1ad3      	subs	r3, r2, r3
 800caa6:	00db      	lsls	r3, r3, #3
 800caa8:	3332      	adds	r3, #50	; 0x32
 800caaa:	4a86      	ldr	r2, [pc, #536]	; (800ccc4 <UART_SetConfig+0x384>)
 800caac:	fba2 2303 	umull	r2, r3, r2, r3
 800cab0:	095b      	lsrs	r3, r3, #5
 800cab2:	005b      	lsls	r3, r3, #1
 800cab4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800cab8:	4498      	add	r8, r3
 800caba:	68bb      	ldr	r3, [r7, #8]
 800cabc:	461d      	mov	r5, r3
 800cabe:	f04f 0600 	mov.w	r6, #0
 800cac2:	46a9      	mov	r9, r5
 800cac4:	46b2      	mov	sl, r6
 800cac6:	eb19 0309 	adds.w	r3, r9, r9
 800caca:	eb4a 040a 	adc.w	r4, sl, sl
 800cace:	4699      	mov	r9, r3
 800cad0:	46a2      	mov	sl, r4
 800cad2:	eb19 0905 	adds.w	r9, r9, r5
 800cad6:	eb4a 0a06 	adc.w	sl, sl, r6
 800cada:	f04f 0100 	mov.w	r1, #0
 800cade:	f04f 0200 	mov.w	r2, #0
 800cae2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cae6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800caea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800caee:	4689      	mov	r9, r1
 800caf0:	4692      	mov	sl, r2
 800caf2:	eb19 0005 	adds.w	r0, r9, r5
 800caf6:	eb4a 0106 	adc.w	r1, sl, r6
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	685b      	ldr	r3, [r3, #4]
 800cafe:	461d      	mov	r5, r3
 800cb00:	f04f 0600 	mov.w	r6, #0
 800cb04:	196b      	adds	r3, r5, r5
 800cb06:	eb46 0406 	adc.w	r4, r6, r6
 800cb0a:	461a      	mov	r2, r3
 800cb0c:	4623      	mov	r3, r4
 800cb0e:	f7fb fb5b 	bl	80081c8 <__aeabi_uldivmod>
 800cb12:	4603      	mov	r3, r0
 800cb14:	460c      	mov	r4, r1
 800cb16:	461a      	mov	r2, r3
 800cb18:	4b6a      	ldr	r3, [pc, #424]	; (800ccc4 <UART_SetConfig+0x384>)
 800cb1a:	fba3 1302 	umull	r1, r3, r3, r2
 800cb1e:	095b      	lsrs	r3, r3, #5
 800cb20:	2164      	movs	r1, #100	; 0x64
 800cb22:	fb01 f303 	mul.w	r3, r1, r3
 800cb26:	1ad3      	subs	r3, r2, r3
 800cb28:	00db      	lsls	r3, r3, #3
 800cb2a:	3332      	adds	r3, #50	; 0x32
 800cb2c:	4a65      	ldr	r2, [pc, #404]	; (800ccc4 <UART_SetConfig+0x384>)
 800cb2e:	fba2 2303 	umull	r2, r3, r2, r3
 800cb32:	095b      	lsrs	r3, r3, #5
 800cb34:	f003 0207 	and.w	r2, r3, #7
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	4442      	add	r2, r8
 800cb3e:	609a      	str	r2, [r3, #8]
 800cb40:	e26f      	b.n	800d022 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800cb42:	f7ff fc03 	bl	800c34c <HAL_RCC_GetPCLK1Freq>
 800cb46:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cb48:	68bb      	ldr	r3, [r7, #8]
 800cb4a:	461d      	mov	r5, r3
 800cb4c:	f04f 0600 	mov.w	r6, #0
 800cb50:	46a8      	mov	r8, r5
 800cb52:	46b1      	mov	r9, r6
 800cb54:	eb18 0308 	adds.w	r3, r8, r8
 800cb58:	eb49 0409 	adc.w	r4, r9, r9
 800cb5c:	4698      	mov	r8, r3
 800cb5e:	46a1      	mov	r9, r4
 800cb60:	eb18 0805 	adds.w	r8, r8, r5
 800cb64:	eb49 0906 	adc.w	r9, r9, r6
 800cb68:	f04f 0100 	mov.w	r1, #0
 800cb6c:	f04f 0200 	mov.w	r2, #0
 800cb70:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800cb74:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800cb78:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800cb7c:	4688      	mov	r8, r1
 800cb7e:	4691      	mov	r9, r2
 800cb80:	eb18 0005 	adds.w	r0, r8, r5
 800cb84:	eb49 0106 	adc.w	r1, r9, r6
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	685b      	ldr	r3, [r3, #4]
 800cb8c:	461d      	mov	r5, r3
 800cb8e:	f04f 0600 	mov.w	r6, #0
 800cb92:	196b      	adds	r3, r5, r5
 800cb94:	eb46 0406 	adc.w	r4, r6, r6
 800cb98:	461a      	mov	r2, r3
 800cb9a:	4623      	mov	r3, r4
 800cb9c:	f7fb fb14 	bl	80081c8 <__aeabi_uldivmod>
 800cba0:	4603      	mov	r3, r0
 800cba2:	460c      	mov	r4, r1
 800cba4:	461a      	mov	r2, r3
 800cba6:	4b47      	ldr	r3, [pc, #284]	; (800ccc4 <UART_SetConfig+0x384>)
 800cba8:	fba3 2302 	umull	r2, r3, r3, r2
 800cbac:	095b      	lsrs	r3, r3, #5
 800cbae:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	461d      	mov	r5, r3
 800cbb6:	f04f 0600 	mov.w	r6, #0
 800cbba:	46a9      	mov	r9, r5
 800cbbc:	46b2      	mov	sl, r6
 800cbbe:	eb19 0309 	adds.w	r3, r9, r9
 800cbc2:	eb4a 040a 	adc.w	r4, sl, sl
 800cbc6:	4699      	mov	r9, r3
 800cbc8:	46a2      	mov	sl, r4
 800cbca:	eb19 0905 	adds.w	r9, r9, r5
 800cbce:	eb4a 0a06 	adc.w	sl, sl, r6
 800cbd2:	f04f 0100 	mov.w	r1, #0
 800cbd6:	f04f 0200 	mov.w	r2, #0
 800cbda:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cbde:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800cbe2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800cbe6:	4689      	mov	r9, r1
 800cbe8:	4692      	mov	sl, r2
 800cbea:	eb19 0005 	adds.w	r0, r9, r5
 800cbee:	eb4a 0106 	adc.w	r1, sl, r6
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	685b      	ldr	r3, [r3, #4]
 800cbf6:	461d      	mov	r5, r3
 800cbf8:	f04f 0600 	mov.w	r6, #0
 800cbfc:	196b      	adds	r3, r5, r5
 800cbfe:	eb46 0406 	adc.w	r4, r6, r6
 800cc02:	461a      	mov	r2, r3
 800cc04:	4623      	mov	r3, r4
 800cc06:	f7fb fadf 	bl	80081c8 <__aeabi_uldivmod>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	460c      	mov	r4, r1
 800cc0e:	461a      	mov	r2, r3
 800cc10:	4b2c      	ldr	r3, [pc, #176]	; (800ccc4 <UART_SetConfig+0x384>)
 800cc12:	fba3 1302 	umull	r1, r3, r3, r2
 800cc16:	095b      	lsrs	r3, r3, #5
 800cc18:	2164      	movs	r1, #100	; 0x64
 800cc1a:	fb01 f303 	mul.w	r3, r1, r3
 800cc1e:	1ad3      	subs	r3, r2, r3
 800cc20:	00db      	lsls	r3, r3, #3
 800cc22:	3332      	adds	r3, #50	; 0x32
 800cc24:	4a27      	ldr	r2, [pc, #156]	; (800ccc4 <UART_SetConfig+0x384>)
 800cc26:	fba2 2303 	umull	r2, r3, r2, r3
 800cc2a:	095b      	lsrs	r3, r3, #5
 800cc2c:	005b      	lsls	r3, r3, #1
 800cc2e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800cc32:	4498      	add	r8, r3
 800cc34:	68bb      	ldr	r3, [r7, #8]
 800cc36:	461d      	mov	r5, r3
 800cc38:	f04f 0600 	mov.w	r6, #0
 800cc3c:	46a9      	mov	r9, r5
 800cc3e:	46b2      	mov	sl, r6
 800cc40:	eb19 0309 	adds.w	r3, r9, r9
 800cc44:	eb4a 040a 	adc.w	r4, sl, sl
 800cc48:	4699      	mov	r9, r3
 800cc4a:	46a2      	mov	sl, r4
 800cc4c:	eb19 0905 	adds.w	r9, r9, r5
 800cc50:	eb4a 0a06 	adc.w	sl, sl, r6
 800cc54:	f04f 0100 	mov.w	r1, #0
 800cc58:	f04f 0200 	mov.w	r2, #0
 800cc5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cc60:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800cc64:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800cc68:	4689      	mov	r9, r1
 800cc6a:	4692      	mov	sl, r2
 800cc6c:	eb19 0005 	adds.w	r0, r9, r5
 800cc70:	eb4a 0106 	adc.w	r1, sl, r6
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	685b      	ldr	r3, [r3, #4]
 800cc78:	461d      	mov	r5, r3
 800cc7a:	f04f 0600 	mov.w	r6, #0
 800cc7e:	196b      	adds	r3, r5, r5
 800cc80:	eb46 0406 	adc.w	r4, r6, r6
 800cc84:	461a      	mov	r2, r3
 800cc86:	4623      	mov	r3, r4
 800cc88:	f7fb fa9e 	bl	80081c8 <__aeabi_uldivmod>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	460c      	mov	r4, r1
 800cc90:	461a      	mov	r2, r3
 800cc92:	4b0c      	ldr	r3, [pc, #48]	; (800ccc4 <UART_SetConfig+0x384>)
 800cc94:	fba3 1302 	umull	r1, r3, r3, r2
 800cc98:	095b      	lsrs	r3, r3, #5
 800cc9a:	2164      	movs	r1, #100	; 0x64
 800cc9c:	fb01 f303 	mul.w	r3, r1, r3
 800cca0:	1ad3      	subs	r3, r2, r3
 800cca2:	00db      	lsls	r3, r3, #3
 800cca4:	3332      	adds	r3, #50	; 0x32
 800cca6:	4a07      	ldr	r2, [pc, #28]	; (800ccc4 <UART_SetConfig+0x384>)
 800cca8:	fba2 2303 	umull	r2, r3, r2, r3
 800ccac:	095b      	lsrs	r3, r3, #5
 800ccae:	f003 0207 	and.w	r2, r3, #7
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	4442      	add	r2, r8
 800ccb8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800ccba:	e1b2      	b.n	800d022 <UART_SetConfig+0x6e2>
 800ccbc:	40011000 	.word	0x40011000
 800ccc0:	40011400 	.word	0x40011400
 800ccc4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	4ad7      	ldr	r2, [pc, #860]	; (800d02c <UART_SetConfig+0x6ec>)
 800ccce:	4293      	cmp	r3, r2
 800ccd0:	d005      	beq.n	800ccde <UART_SetConfig+0x39e>
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	4ad6      	ldr	r2, [pc, #856]	; (800d030 <UART_SetConfig+0x6f0>)
 800ccd8:	4293      	cmp	r3, r2
 800ccda:	f040 80d1 	bne.w	800ce80 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800ccde:	f7ff fb49 	bl	800c374 <HAL_RCC_GetPCLK2Freq>
 800cce2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cce4:	68bb      	ldr	r3, [r7, #8]
 800cce6:	469a      	mov	sl, r3
 800cce8:	f04f 0b00 	mov.w	fp, #0
 800ccec:	46d0      	mov	r8, sl
 800ccee:	46d9      	mov	r9, fp
 800ccf0:	eb18 0308 	adds.w	r3, r8, r8
 800ccf4:	eb49 0409 	adc.w	r4, r9, r9
 800ccf8:	4698      	mov	r8, r3
 800ccfa:	46a1      	mov	r9, r4
 800ccfc:	eb18 080a 	adds.w	r8, r8, sl
 800cd00:	eb49 090b 	adc.w	r9, r9, fp
 800cd04:	f04f 0100 	mov.w	r1, #0
 800cd08:	f04f 0200 	mov.w	r2, #0
 800cd0c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800cd10:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800cd14:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800cd18:	4688      	mov	r8, r1
 800cd1a:	4691      	mov	r9, r2
 800cd1c:	eb1a 0508 	adds.w	r5, sl, r8
 800cd20:	eb4b 0609 	adc.w	r6, fp, r9
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	685b      	ldr	r3, [r3, #4]
 800cd28:	4619      	mov	r1, r3
 800cd2a:	f04f 0200 	mov.w	r2, #0
 800cd2e:	f04f 0300 	mov.w	r3, #0
 800cd32:	f04f 0400 	mov.w	r4, #0
 800cd36:	0094      	lsls	r4, r2, #2
 800cd38:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800cd3c:	008b      	lsls	r3, r1, #2
 800cd3e:	461a      	mov	r2, r3
 800cd40:	4623      	mov	r3, r4
 800cd42:	4628      	mov	r0, r5
 800cd44:	4631      	mov	r1, r6
 800cd46:	f7fb fa3f 	bl	80081c8 <__aeabi_uldivmod>
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	460c      	mov	r4, r1
 800cd4e:	461a      	mov	r2, r3
 800cd50:	4bb8      	ldr	r3, [pc, #736]	; (800d034 <UART_SetConfig+0x6f4>)
 800cd52:	fba3 2302 	umull	r2, r3, r3, r2
 800cd56:	095b      	lsrs	r3, r3, #5
 800cd58:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	469b      	mov	fp, r3
 800cd60:	f04f 0c00 	mov.w	ip, #0
 800cd64:	46d9      	mov	r9, fp
 800cd66:	46e2      	mov	sl, ip
 800cd68:	eb19 0309 	adds.w	r3, r9, r9
 800cd6c:	eb4a 040a 	adc.w	r4, sl, sl
 800cd70:	4699      	mov	r9, r3
 800cd72:	46a2      	mov	sl, r4
 800cd74:	eb19 090b 	adds.w	r9, r9, fp
 800cd78:	eb4a 0a0c 	adc.w	sl, sl, ip
 800cd7c:	f04f 0100 	mov.w	r1, #0
 800cd80:	f04f 0200 	mov.w	r2, #0
 800cd84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cd88:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800cd8c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800cd90:	4689      	mov	r9, r1
 800cd92:	4692      	mov	sl, r2
 800cd94:	eb1b 0509 	adds.w	r5, fp, r9
 800cd98:	eb4c 060a 	adc.w	r6, ip, sl
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	685b      	ldr	r3, [r3, #4]
 800cda0:	4619      	mov	r1, r3
 800cda2:	f04f 0200 	mov.w	r2, #0
 800cda6:	f04f 0300 	mov.w	r3, #0
 800cdaa:	f04f 0400 	mov.w	r4, #0
 800cdae:	0094      	lsls	r4, r2, #2
 800cdb0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800cdb4:	008b      	lsls	r3, r1, #2
 800cdb6:	461a      	mov	r2, r3
 800cdb8:	4623      	mov	r3, r4
 800cdba:	4628      	mov	r0, r5
 800cdbc:	4631      	mov	r1, r6
 800cdbe:	f7fb fa03 	bl	80081c8 <__aeabi_uldivmod>
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	460c      	mov	r4, r1
 800cdc6:	461a      	mov	r2, r3
 800cdc8:	4b9a      	ldr	r3, [pc, #616]	; (800d034 <UART_SetConfig+0x6f4>)
 800cdca:	fba3 1302 	umull	r1, r3, r3, r2
 800cdce:	095b      	lsrs	r3, r3, #5
 800cdd0:	2164      	movs	r1, #100	; 0x64
 800cdd2:	fb01 f303 	mul.w	r3, r1, r3
 800cdd6:	1ad3      	subs	r3, r2, r3
 800cdd8:	011b      	lsls	r3, r3, #4
 800cdda:	3332      	adds	r3, #50	; 0x32
 800cddc:	4a95      	ldr	r2, [pc, #596]	; (800d034 <UART_SetConfig+0x6f4>)
 800cdde:	fba2 2303 	umull	r2, r3, r2, r3
 800cde2:	095b      	lsrs	r3, r3, #5
 800cde4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cde8:	4498      	add	r8, r3
 800cdea:	68bb      	ldr	r3, [r7, #8]
 800cdec:	469b      	mov	fp, r3
 800cdee:	f04f 0c00 	mov.w	ip, #0
 800cdf2:	46d9      	mov	r9, fp
 800cdf4:	46e2      	mov	sl, ip
 800cdf6:	eb19 0309 	adds.w	r3, r9, r9
 800cdfa:	eb4a 040a 	adc.w	r4, sl, sl
 800cdfe:	4699      	mov	r9, r3
 800ce00:	46a2      	mov	sl, r4
 800ce02:	eb19 090b 	adds.w	r9, r9, fp
 800ce06:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ce0a:	f04f 0100 	mov.w	r1, #0
 800ce0e:	f04f 0200 	mov.w	r2, #0
 800ce12:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ce16:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ce1a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ce1e:	4689      	mov	r9, r1
 800ce20:	4692      	mov	sl, r2
 800ce22:	eb1b 0509 	adds.w	r5, fp, r9
 800ce26:	eb4c 060a 	adc.w	r6, ip, sl
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	685b      	ldr	r3, [r3, #4]
 800ce2e:	4619      	mov	r1, r3
 800ce30:	f04f 0200 	mov.w	r2, #0
 800ce34:	f04f 0300 	mov.w	r3, #0
 800ce38:	f04f 0400 	mov.w	r4, #0
 800ce3c:	0094      	lsls	r4, r2, #2
 800ce3e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ce42:	008b      	lsls	r3, r1, #2
 800ce44:	461a      	mov	r2, r3
 800ce46:	4623      	mov	r3, r4
 800ce48:	4628      	mov	r0, r5
 800ce4a:	4631      	mov	r1, r6
 800ce4c:	f7fb f9bc 	bl	80081c8 <__aeabi_uldivmod>
 800ce50:	4603      	mov	r3, r0
 800ce52:	460c      	mov	r4, r1
 800ce54:	461a      	mov	r2, r3
 800ce56:	4b77      	ldr	r3, [pc, #476]	; (800d034 <UART_SetConfig+0x6f4>)
 800ce58:	fba3 1302 	umull	r1, r3, r3, r2
 800ce5c:	095b      	lsrs	r3, r3, #5
 800ce5e:	2164      	movs	r1, #100	; 0x64
 800ce60:	fb01 f303 	mul.w	r3, r1, r3
 800ce64:	1ad3      	subs	r3, r2, r3
 800ce66:	011b      	lsls	r3, r3, #4
 800ce68:	3332      	adds	r3, #50	; 0x32
 800ce6a:	4a72      	ldr	r2, [pc, #456]	; (800d034 <UART_SetConfig+0x6f4>)
 800ce6c:	fba2 2303 	umull	r2, r3, r2, r3
 800ce70:	095b      	lsrs	r3, r3, #5
 800ce72:	f003 020f 	and.w	r2, r3, #15
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	4442      	add	r2, r8
 800ce7c:	609a      	str	r2, [r3, #8]
 800ce7e:	e0d0      	b.n	800d022 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800ce80:	f7ff fa64 	bl	800c34c <HAL_RCC_GetPCLK1Freq>
 800ce84:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ce86:	68bb      	ldr	r3, [r7, #8]
 800ce88:	469a      	mov	sl, r3
 800ce8a:	f04f 0b00 	mov.w	fp, #0
 800ce8e:	46d0      	mov	r8, sl
 800ce90:	46d9      	mov	r9, fp
 800ce92:	eb18 0308 	adds.w	r3, r8, r8
 800ce96:	eb49 0409 	adc.w	r4, r9, r9
 800ce9a:	4698      	mov	r8, r3
 800ce9c:	46a1      	mov	r9, r4
 800ce9e:	eb18 080a 	adds.w	r8, r8, sl
 800cea2:	eb49 090b 	adc.w	r9, r9, fp
 800cea6:	f04f 0100 	mov.w	r1, #0
 800ceaa:	f04f 0200 	mov.w	r2, #0
 800ceae:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ceb2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ceb6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ceba:	4688      	mov	r8, r1
 800cebc:	4691      	mov	r9, r2
 800cebe:	eb1a 0508 	adds.w	r5, sl, r8
 800cec2:	eb4b 0609 	adc.w	r6, fp, r9
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	685b      	ldr	r3, [r3, #4]
 800ceca:	4619      	mov	r1, r3
 800cecc:	f04f 0200 	mov.w	r2, #0
 800ced0:	f04f 0300 	mov.w	r3, #0
 800ced4:	f04f 0400 	mov.w	r4, #0
 800ced8:	0094      	lsls	r4, r2, #2
 800ceda:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800cede:	008b      	lsls	r3, r1, #2
 800cee0:	461a      	mov	r2, r3
 800cee2:	4623      	mov	r3, r4
 800cee4:	4628      	mov	r0, r5
 800cee6:	4631      	mov	r1, r6
 800cee8:	f7fb f96e 	bl	80081c8 <__aeabi_uldivmod>
 800ceec:	4603      	mov	r3, r0
 800ceee:	460c      	mov	r4, r1
 800cef0:	461a      	mov	r2, r3
 800cef2:	4b50      	ldr	r3, [pc, #320]	; (800d034 <UART_SetConfig+0x6f4>)
 800cef4:	fba3 2302 	umull	r2, r3, r3, r2
 800cef8:	095b      	lsrs	r3, r3, #5
 800cefa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800cefe:	68bb      	ldr	r3, [r7, #8]
 800cf00:	469b      	mov	fp, r3
 800cf02:	f04f 0c00 	mov.w	ip, #0
 800cf06:	46d9      	mov	r9, fp
 800cf08:	46e2      	mov	sl, ip
 800cf0a:	eb19 0309 	adds.w	r3, r9, r9
 800cf0e:	eb4a 040a 	adc.w	r4, sl, sl
 800cf12:	4699      	mov	r9, r3
 800cf14:	46a2      	mov	sl, r4
 800cf16:	eb19 090b 	adds.w	r9, r9, fp
 800cf1a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800cf1e:	f04f 0100 	mov.w	r1, #0
 800cf22:	f04f 0200 	mov.w	r2, #0
 800cf26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cf2a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800cf2e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800cf32:	4689      	mov	r9, r1
 800cf34:	4692      	mov	sl, r2
 800cf36:	eb1b 0509 	adds.w	r5, fp, r9
 800cf3a:	eb4c 060a 	adc.w	r6, ip, sl
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	685b      	ldr	r3, [r3, #4]
 800cf42:	4619      	mov	r1, r3
 800cf44:	f04f 0200 	mov.w	r2, #0
 800cf48:	f04f 0300 	mov.w	r3, #0
 800cf4c:	f04f 0400 	mov.w	r4, #0
 800cf50:	0094      	lsls	r4, r2, #2
 800cf52:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800cf56:	008b      	lsls	r3, r1, #2
 800cf58:	461a      	mov	r2, r3
 800cf5a:	4623      	mov	r3, r4
 800cf5c:	4628      	mov	r0, r5
 800cf5e:	4631      	mov	r1, r6
 800cf60:	f7fb f932 	bl	80081c8 <__aeabi_uldivmod>
 800cf64:	4603      	mov	r3, r0
 800cf66:	460c      	mov	r4, r1
 800cf68:	461a      	mov	r2, r3
 800cf6a:	4b32      	ldr	r3, [pc, #200]	; (800d034 <UART_SetConfig+0x6f4>)
 800cf6c:	fba3 1302 	umull	r1, r3, r3, r2
 800cf70:	095b      	lsrs	r3, r3, #5
 800cf72:	2164      	movs	r1, #100	; 0x64
 800cf74:	fb01 f303 	mul.w	r3, r1, r3
 800cf78:	1ad3      	subs	r3, r2, r3
 800cf7a:	011b      	lsls	r3, r3, #4
 800cf7c:	3332      	adds	r3, #50	; 0x32
 800cf7e:	4a2d      	ldr	r2, [pc, #180]	; (800d034 <UART_SetConfig+0x6f4>)
 800cf80:	fba2 2303 	umull	r2, r3, r2, r3
 800cf84:	095b      	lsrs	r3, r3, #5
 800cf86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cf8a:	4498      	add	r8, r3
 800cf8c:	68bb      	ldr	r3, [r7, #8]
 800cf8e:	469b      	mov	fp, r3
 800cf90:	f04f 0c00 	mov.w	ip, #0
 800cf94:	46d9      	mov	r9, fp
 800cf96:	46e2      	mov	sl, ip
 800cf98:	eb19 0309 	adds.w	r3, r9, r9
 800cf9c:	eb4a 040a 	adc.w	r4, sl, sl
 800cfa0:	4699      	mov	r9, r3
 800cfa2:	46a2      	mov	sl, r4
 800cfa4:	eb19 090b 	adds.w	r9, r9, fp
 800cfa8:	eb4a 0a0c 	adc.w	sl, sl, ip
 800cfac:	f04f 0100 	mov.w	r1, #0
 800cfb0:	f04f 0200 	mov.w	r2, #0
 800cfb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cfb8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800cfbc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800cfc0:	4689      	mov	r9, r1
 800cfc2:	4692      	mov	sl, r2
 800cfc4:	eb1b 0509 	adds.w	r5, fp, r9
 800cfc8:	eb4c 060a 	adc.w	r6, ip, sl
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	685b      	ldr	r3, [r3, #4]
 800cfd0:	4619      	mov	r1, r3
 800cfd2:	f04f 0200 	mov.w	r2, #0
 800cfd6:	f04f 0300 	mov.w	r3, #0
 800cfda:	f04f 0400 	mov.w	r4, #0
 800cfde:	0094      	lsls	r4, r2, #2
 800cfe0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800cfe4:	008b      	lsls	r3, r1, #2
 800cfe6:	461a      	mov	r2, r3
 800cfe8:	4623      	mov	r3, r4
 800cfea:	4628      	mov	r0, r5
 800cfec:	4631      	mov	r1, r6
 800cfee:	f7fb f8eb 	bl	80081c8 <__aeabi_uldivmod>
 800cff2:	4603      	mov	r3, r0
 800cff4:	460c      	mov	r4, r1
 800cff6:	461a      	mov	r2, r3
 800cff8:	4b0e      	ldr	r3, [pc, #56]	; (800d034 <UART_SetConfig+0x6f4>)
 800cffa:	fba3 1302 	umull	r1, r3, r3, r2
 800cffe:	095b      	lsrs	r3, r3, #5
 800d000:	2164      	movs	r1, #100	; 0x64
 800d002:	fb01 f303 	mul.w	r3, r1, r3
 800d006:	1ad3      	subs	r3, r2, r3
 800d008:	011b      	lsls	r3, r3, #4
 800d00a:	3332      	adds	r3, #50	; 0x32
 800d00c:	4a09      	ldr	r2, [pc, #36]	; (800d034 <UART_SetConfig+0x6f4>)
 800d00e:	fba2 2303 	umull	r2, r3, r2, r3
 800d012:	095b      	lsrs	r3, r3, #5
 800d014:	f003 020f 	and.w	r2, r3, #15
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	4442      	add	r2, r8
 800d01e:	609a      	str	r2, [r3, #8]
}
 800d020:	e7ff      	b.n	800d022 <UART_SetConfig+0x6e2>
 800d022:	bf00      	nop
 800d024:	3714      	adds	r7, #20
 800d026:	46bd      	mov	sp, r7
 800d028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d02c:	40011000 	.word	0x40011000
 800d030:	40011400 	.word	0x40011400
 800d034:	51eb851f 	.word	0x51eb851f

0800d038 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d038:	b084      	sub	sp, #16
 800d03a:	b580      	push	{r7, lr}
 800d03c:	b084      	sub	sp, #16
 800d03e:	af00      	add	r7, sp, #0
 800d040:	6078      	str	r0, [r7, #4]
 800d042:	f107 001c 	add.w	r0, r7, #28
 800d046:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d04c:	2b01      	cmp	r3, #1
 800d04e:	d122      	bne.n	800d096 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d054:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	68db      	ldr	r3, [r3, #12]
 800d060:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800d064:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d068:	687a      	ldr	r2, [r7, #4]
 800d06a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	68db      	ldr	r3, [r3, #12]
 800d070:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d07a:	2b01      	cmp	r3, #1
 800d07c:	d105      	bne.n	800d08a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	68db      	ldr	r3, [r3, #12]
 800d082:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800d08a:	6878      	ldr	r0, [r7, #4]
 800d08c:	f000 f94a 	bl	800d324 <USB_CoreReset>
 800d090:	4603      	mov	r3, r0
 800d092:	73fb      	strb	r3, [r7, #15]
 800d094:	e01a      	b.n	800d0cc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	68db      	ldr	r3, [r3, #12]
 800d09a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d0a2:	6878      	ldr	r0, [r7, #4]
 800d0a4:	f000 f93e 	bl	800d324 <USB_CoreReset>
 800d0a8:	4603      	mov	r3, r0
 800d0aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d0ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d106      	bne.n	800d0c0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	639a      	str	r2, [r3, #56]	; 0x38
 800d0be:	e005      	b.n	800d0cc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ce:	2b01      	cmp	r3, #1
 800d0d0:	d10b      	bne.n	800d0ea <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	689b      	ldr	r3, [r3, #8]
 800d0d6:	f043 0206 	orr.w	r2, r3, #6
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	689b      	ldr	r3, [r3, #8]
 800d0e2:	f043 0220 	orr.w	r2, r3, #32
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d0ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	3710      	adds	r7, #16
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d0f6:	b004      	add	sp, #16
 800d0f8:	4770      	bx	lr

0800d0fa <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d0fa:	b480      	push	{r7}
 800d0fc:	b083      	sub	sp, #12
 800d0fe:	af00      	add	r7, sp, #0
 800d100:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	689b      	ldr	r3, [r3, #8]
 800d106:	f043 0201 	orr.w	r2, r3, #1
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d10e:	2300      	movs	r3, #0
}
 800d110:	4618      	mov	r0, r3
 800d112:	370c      	adds	r7, #12
 800d114:	46bd      	mov	sp, r7
 800d116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11a:	4770      	bx	lr

0800d11c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d11c:	b480      	push	{r7}
 800d11e:	b083      	sub	sp, #12
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	689b      	ldr	r3, [r3, #8]
 800d128:	f023 0201 	bic.w	r2, r3, #1
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d130:	2300      	movs	r3, #0
}
 800d132:	4618      	mov	r0, r3
 800d134:	370c      	adds	r7, #12
 800d136:	46bd      	mov	sp, r7
 800d138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13c:	4770      	bx	lr

0800d13e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d13e:	b580      	push	{r7, lr}
 800d140:	b082      	sub	sp, #8
 800d142:	af00      	add	r7, sp, #0
 800d144:	6078      	str	r0, [r7, #4]
 800d146:	460b      	mov	r3, r1
 800d148:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	68db      	ldr	r3, [r3, #12]
 800d14e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d156:	78fb      	ldrb	r3, [r7, #3]
 800d158:	2b01      	cmp	r3, #1
 800d15a:	d106      	bne.n	800d16a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	68db      	ldr	r3, [r3, #12]
 800d160:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	60da      	str	r2, [r3, #12]
 800d168:	e00b      	b.n	800d182 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800d16a:	78fb      	ldrb	r3, [r7, #3]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d106      	bne.n	800d17e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	68db      	ldr	r3, [r3, #12]
 800d174:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	60da      	str	r2, [r3, #12]
 800d17c:	e001      	b.n	800d182 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800d17e:	2301      	movs	r3, #1
 800d180:	e003      	b.n	800d18a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800d182:	2032      	movs	r0, #50	; 0x32
 800d184:	f7fb fedc 	bl	8008f40 <HAL_Delay>

  return HAL_OK;
 800d188:	2300      	movs	r3, #0
}
 800d18a:	4618      	mov	r0, r3
 800d18c:	3708      	adds	r7, #8
 800d18e:	46bd      	mov	sp, r7
 800d190:	bd80      	pop	{r7, pc}
	...

0800d194 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d194:	b480      	push	{r7}
 800d196:	b085      	sub	sp, #20
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
 800d19c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800d19e:	2300      	movs	r3, #0
 800d1a0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	019b      	lsls	r3, r3, #6
 800d1a6:	f043 0220 	orr.w	r2, r3, #32
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	3301      	adds	r3, #1
 800d1b2:	60fb      	str	r3, [r7, #12]
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	4a09      	ldr	r2, [pc, #36]	; (800d1dc <USB_FlushTxFifo+0x48>)
 800d1b8:	4293      	cmp	r3, r2
 800d1ba:	d901      	bls.n	800d1c0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800d1bc:	2303      	movs	r3, #3
 800d1be:	e006      	b.n	800d1ce <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	691b      	ldr	r3, [r3, #16]
 800d1c4:	f003 0320 	and.w	r3, r3, #32
 800d1c8:	2b20      	cmp	r3, #32
 800d1ca:	d0f0      	beq.n	800d1ae <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800d1cc:	2300      	movs	r3, #0
}
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	3714      	adds	r7, #20
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d8:	4770      	bx	lr
 800d1da:	bf00      	nop
 800d1dc:	00030d40 	.word	0x00030d40

0800d1e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d1e0:	b480      	push	{r7}
 800d1e2:	b085      	sub	sp, #20
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2210      	movs	r2, #16
 800d1f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	3301      	adds	r3, #1
 800d1f6:	60fb      	str	r3, [r7, #12]
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	4a09      	ldr	r2, [pc, #36]	; (800d220 <USB_FlushRxFifo+0x40>)
 800d1fc:	4293      	cmp	r3, r2
 800d1fe:	d901      	bls.n	800d204 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800d200:	2303      	movs	r3, #3
 800d202:	e006      	b.n	800d212 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	691b      	ldr	r3, [r3, #16]
 800d208:	f003 0310 	and.w	r3, r3, #16
 800d20c:	2b10      	cmp	r3, #16
 800d20e:	d0f0      	beq.n	800d1f2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800d210:	2300      	movs	r3, #0
}
 800d212:	4618      	mov	r0, r3
 800d214:	3714      	adds	r7, #20
 800d216:	46bd      	mov	sp, r7
 800d218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21c:	4770      	bx	lr
 800d21e:	bf00      	nop
 800d220:	00030d40 	.word	0x00030d40

0800d224 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d224:	b480      	push	{r7}
 800d226:	b089      	sub	sp, #36	; 0x24
 800d228:	af00      	add	r7, sp, #0
 800d22a:	60f8      	str	r0, [r7, #12]
 800d22c:	60b9      	str	r1, [r7, #8]
 800d22e:	4611      	mov	r1, r2
 800d230:	461a      	mov	r2, r3
 800d232:	460b      	mov	r3, r1
 800d234:	71fb      	strb	r3, [r7, #7]
 800d236:	4613      	mov	r3, r2
 800d238:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800d23e:	68bb      	ldr	r3, [r7, #8]
 800d240:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800d242:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d246:	2b00      	cmp	r3, #0
 800d248:	d11a      	bne.n	800d280 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d24a:	88bb      	ldrh	r3, [r7, #4]
 800d24c:	3303      	adds	r3, #3
 800d24e:	089b      	lsrs	r3, r3, #2
 800d250:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d252:	2300      	movs	r3, #0
 800d254:	61bb      	str	r3, [r7, #24]
 800d256:	e00f      	b.n	800d278 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d258:	79fb      	ldrb	r3, [r7, #7]
 800d25a:	031a      	lsls	r2, r3, #12
 800d25c:	697b      	ldr	r3, [r7, #20]
 800d25e:	4413      	add	r3, r2
 800d260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d264:	461a      	mov	r2, r3
 800d266:	69fb      	ldr	r3, [r7, #28]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d26c:	69fb      	ldr	r3, [r7, #28]
 800d26e:	3304      	adds	r3, #4
 800d270:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d272:	69bb      	ldr	r3, [r7, #24]
 800d274:	3301      	adds	r3, #1
 800d276:	61bb      	str	r3, [r7, #24]
 800d278:	69ba      	ldr	r2, [r7, #24]
 800d27a:	693b      	ldr	r3, [r7, #16]
 800d27c:	429a      	cmp	r2, r3
 800d27e:	d3eb      	bcc.n	800d258 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d280:	2300      	movs	r3, #0
}
 800d282:	4618      	mov	r0, r3
 800d284:	3724      	adds	r7, #36	; 0x24
 800d286:	46bd      	mov	sp, r7
 800d288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28c:	4770      	bx	lr

0800d28e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d28e:	b480      	push	{r7}
 800d290:	b089      	sub	sp, #36	; 0x24
 800d292:	af00      	add	r7, sp, #0
 800d294:	60f8      	str	r0, [r7, #12]
 800d296:	60b9      	str	r1, [r7, #8]
 800d298:	4613      	mov	r3, r2
 800d29a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800d2a4:	88fb      	ldrh	r3, [r7, #6]
 800d2a6:	3303      	adds	r3, #3
 800d2a8:	089b      	lsrs	r3, r3, #2
 800d2aa:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	61bb      	str	r3, [r7, #24]
 800d2b0:	e00b      	b.n	800d2ca <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d2b2:	697b      	ldr	r3, [r7, #20]
 800d2b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2b8:	681a      	ldr	r2, [r3, #0]
 800d2ba:	69fb      	ldr	r3, [r7, #28]
 800d2bc:	601a      	str	r2, [r3, #0]
    pDest++;
 800d2be:	69fb      	ldr	r3, [r7, #28]
 800d2c0:	3304      	adds	r3, #4
 800d2c2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800d2c4:	69bb      	ldr	r3, [r7, #24]
 800d2c6:	3301      	adds	r3, #1
 800d2c8:	61bb      	str	r3, [r7, #24]
 800d2ca:	69ba      	ldr	r2, [r7, #24]
 800d2cc:	693b      	ldr	r3, [r7, #16]
 800d2ce:	429a      	cmp	r2, r3
 800d2d0:	d3ef      	bcc.n	800d2b2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800d2d2:	69fb      	ldr	r3, [r7, #28]
}
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	3724      	adds	r7, #36	; 0x24
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2de:	4770      	bx	lr

0800d2e0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d2e0:	b480      	push	{r7}
 800d2e2:	b085      	sub	sp, #20
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	695b      	ldr	r3, [r3, #20]
 800d2ec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	699b      	ldr	r3, [r3, #24]
 800d2f2:	68fa      	ldr	r2, [r7, #12]
 800d2f4:	4013      	ands	r3, r2
 800d2f6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d2f8:	68fb      	ldr	r3, [r7, #12]
}
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	3714      	adds	r7, #20
 800d2fe:	46bd      	mov	sp, r7
 800d300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d304:	4770      	bx	lr

0800d306 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d306:	b480      	push	{r7}
 800d308:	b083      	sub	sp, #12
 800d30a:	af00      	add	r7, sp, #0
 800d30c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	695b      	ldr	r3, [r3, #20]
 800d312:	f003 0301 	and.w	r3, r3, #1
}
 800d316:	4618      	mov	r0, r3
 800d318:	370c      	adds	r7, #12
 800d31a:	46bd      	mov	sp, r7
 800d31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d320:	4770      	bx	lr
	...

0800d324 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d324:	b480      	push	{r7}
 800d326:	b085      	sub	sp, #20
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800d32c:	2300      	movs	r3, #0
 800d32e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	3301      	adds	r3, #1
 800d334:	60fb      	str	r3, [r7, #12]
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	4a13      	ldr	r2, [pc, #76]	; (800d388 <USB_CoreReset+0x64>)
 800d33a:	4293      	cmp	r3, r2
 800d33c:	d901      	bls.n	800d342 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d33e:	2303      	movs	r3, #3
 800d340:	e01b      	b.n	800d37a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	691b      	ldr	r3, [r3, #16]
 800d346:	2b00      	cmp	r3, #0
 800d348:	daf2      	bge.n	800d330 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d34a:	2300      	movs	r3, #0
 800d34c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	691b      	ldr	r3, [r3, #16]
 800d352:	f043 0201 	orr.w	r2, r3, #1
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	3301      	adds	r3, #1
 800d35e:	60fb      	str	r3, [r7, #12]
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	4a09      	ldr	r2, [pc, #36]	; (800d388 <USB_CoreReset+0x64>)
 800d364:	4293      	cmp	r3, r2
 800d366:	d901      	bls.n	800d36c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d368:	2303      	movs	r3, #3
 800d36a:	e006      	b.n	800d37a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	691b      	ldr	r3, [r3, #16]
 800d370:	f003 0301 	and.w	r3, r3, #1
 800d374:	2b01      	cmp	r3, #1
 800d376:	d0f0      	beq.n	800d35a <USB_CoreReset+0x36>

  return HAL_OK;
 800d378:	2300      	movs	r3, #0
}
 800d37a:	4618      	mov	r0, r3
 800d37c:	3714      	adds	r7, #20
 800d37e:	46bd      	mov	sp, r7
 800d380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d384:	4770      	bx	lr
 800d386:	bf00      	nop
 800d388:	00030d40 	.word	0x00030d40

0800d38c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d38c:	b084      	sub	sp, #16
 800d38e:	b580      	push	{r7, lr}
 800d390:	b084      	sub	sp, #16
 800d392:	af00      	add	r7, sp, #0
 800d394:	6078      	str	r0, [r7, #4]
 800d396:	f107 001c 	add.w	r0, r7, #28
 800d39a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d3a2:	68bb      	ldr	r3, [r7, #8]
 800d3a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d3a8:	461a      	mov	r2, r3
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3be:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3ca:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d018      	beq.n	800d410 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800d3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3e0:	2b01      	cmp	r3, #1
 800d3e2:	d10a      	bne.n	800d3fa <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800d3e4:	68bb      	ldr	r3, [r7, #8]
 800d3e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	68ba      	ldr	r2, [r7, #8]
 800d3ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d3f2:	f043 0304 	orr.w	r3, r3, #4
 800d3f6:	6013      	str	r3, [r2, #0]
 800d3f8:	e014      	b.n	800d424 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d3fa:	68bb      	ldr	r3, [r7, #8]
 800d3fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	68ba      	ldr	r2, [r7, #8]
 800d404:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d408:	f023 0304 	bic.w	r3, r3, #4
 800d40c:	6013      	str	r3, [r2, #0]
 800d40e:	e009      	b.n	800d424 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d410:	68bb      	ldr	r3, [r7, #8]
 800d412:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	68ba      	ldr	r2, [r7, #8]
 800d41a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d41e:	f023 0304 	bic.w	r3, r3, #4
 800d422:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800d424:	2110      	movs	r1, #16
 800d426:	6878      	ldr	r0, [r7, #4]
 800d428:	f7ff feb4 	bl	800d194 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800d42c:	6878      	ldr	r0, [r7, #4]
 800d42e:	f7ff fed7 	bl	800d1e0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800d432:	2300      	movs	r3, #0
 800d434:	60fb      	str	r3, [r7, #12]
 800d436:	e015      	b.n	800d464 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	015a      	lsls	r2, r3, #5
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	4413      	add	r3, r2
 800d440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d444:	461a      	mov	r2, r3
 800d446:	f04f 33ff 	mov.w	r3, #4294967295
 800d44a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	015a      	lsls	r2, r3, #5
 800d450:	68bb      	ldr	r3, [r7, #8]
 800d452:	4413      	add	r3, r2
 800d454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d458:	461a      	mov	r2, r3
 800d45a:	2300      	movs	r3, #0
 800d45c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	3301      	adds	r3, #1
 800d462:	60fb      	str	r3, [r7, #12]
 800d464:	6a3b      	ldr	r3, [r7, #32]
 800d466:	68fa      	ldr	r2, [r7, #12]
 800d468:	429a      	cmp	r2, r3
 800d46a:	d3e5      	bcc.n	800d438 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800d46c:	2101      	movs	r1, #1
 800d46e:	6878      	ldr	r0, [r7, #4]
 800d470:	f000 f882 	bl	800d578 <USB_DriveVbus>

  HAL_Delay(200U);
 800d474:	20c8      	movs	r0, #200	; 0xc8
 800d476:	f7fb fd63 	bl	8008f40 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	2200      	movs	r2, #0
 800d47e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	f04f 32ff 	mov.w	r2, #4294967295
 800d486:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d48c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d490:	2b00      	cmp	r3, #0
 800d492:	d00b      	beq.n	800d4ac <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d49a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	4a14      	ldr	r2, [pc, #80]	; (800d4f0 <USB_HostInit+0x164>)
 800d4a0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	4a13      	ldr	r2, [pc, #76]	; (800d4f4 <USB_HostInit+0x168>)
 800d4a6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800d4aa:	e009      	b.n	800d4c0 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2280      	movs	r2, #128	; 0x80
 800d4b0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	4a10      	ldr	r2, [pc, #64]	; (800d4f8 <USB_HostInit+0x16c>)
 800d4b6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	4a10      	ldr	r2, [pc, #64]	; (800d4fc <USB_HostInit+0x170>)
 800d4bc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d105      	bne.n	800d4d2 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	699b      	ldr	r3, [r3, #24]
 800d4ca:	f043 0210 	orr.w	r2, r3, #16
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	699a      	ldr	r2, [r3, #24]
 800d4d6:	4b0a      	ldr	r3, [pc, #40]	; (800d500 <USB_HostInit+0x174>)
 800d4d8:	4313      	orrs	r3, r2
 800d4da:	687a      	ldr	r2, [r7, #4]
 800d4dc:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800d4de:	2300      	movs	r3, #0
}
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	3710      	adds	r7, #16
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d4ea:	b004      	add	sp, #16
 800d4ec:	4770      	bx	lr
 800d4ee:	bf00      	nop
 800d4f0:	01000200 	.word	0x01000200
 800d4f4:	00e00300 	.word	0x00e00300
 800d4f8:	00600080 	.word	0x00600080
 800d4fc:	004000e0 	.word	0x004000e0
 800d500:	a3200008 	.word	0xa3200008

0800d504 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800d504:	b480      	push	{r7}
 800d506:	b085      	sub	sp, #20
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
 800d50c:	460b      	mov	r3, r1
 800d50e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	68fa      	ldr	r2, [r7, #12]
 800d51e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d522:	f023 0303 	bic.w	r3, r3, #3
 800d526:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d52e:	681a      	ldr	r2, [r3, #0]
 800d530:	78fb      	ldrb	r3, [r7, #3]
 800d532:	f003 0303 	and.w	r3, r3, #3
 800d536:	68f9      	ldr	r1, [r7, #12]
 800d538:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d53c:	4313      	orrs	r3, r2
 800d53e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800d540:	78fb      	ldrb	r3, [r7, #3]
 800d542:	2b01      	cmp	r3, #1
 800d544:	d107      	bne.n	800d556 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d54c:	461a      	mov	r2, r3
 800d54e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800d552:	6053      	str	r3, [r2, #4]
 800d554:	e009      	b.n	800d56a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800d556:	78fb      	ldrb	r3, [r7, #3]
 800d558:	2b02      	cmp	r3, #2
 800d55a:	d106      	bne.n	800d56a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d562:	461a      	mov	r2, r3
 800d564:	f241 7370 	movw	r3, #6000	; 0x1770
 800d568:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800d56a:	2300      	movs	r3, #0
}
 800d56c:	4618      	mov	r0, r3
 800d56e:	3714      	adds	r7, #20
 800d570:	46bd      	mov	sp, r7
 800d572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d576:	4770      	bx	lr

0800d578 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800d578:	b480      	push	{r7}
 800d57a:	b085      	sub	sp, #20
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
 800d580:	460b      	mov	r3, r1
 800d582:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800d588:	2300      	movs	r3, #0
 800d58a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d596:	68bb      	ldr	r3, [r7, #8]
 800d598:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800d59c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800d59e:	68bb      	ldr	r3, [r7, #8]
 800d5a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d109      	bne.n	800d5bc <USB_DriveVbus+0x44>
 800d5a8:	78fb      	ldrb	r3, [r7, #3]
 800d5aa:	2b01      	cmp	r3, #1
 800d5ac:	d106      	bne.n	800d5bc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800d5ae:	68bb      	ldr	r3, [r7, #8]
 800d5b0:	68fa      	ldr	r2, [r7, #12]
 800d5b2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d5b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d5ba:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800d5bc:	68bb      	ldr	r3, [r7, #8]
 800d5be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d5c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d5c6:	d109      	bne.n	800d5dc <USB_DriveVbus+0x64>
 800d5c8:	78fb      	ldrb	r3, [r7, #3]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d106      	bne.n	800d5dc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800d5ce:	68bb      	ldr	r3, [r7, #8]
 800d5d0:	68fa      	ldr	r2, [r7, #12]
 800d5d2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d5d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d5da:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800d5dc:	2300      	movs	r3, #0
}
 800d5de:	4618      	mov	r0, r3
 800d5e0:	3714      	adds	r7, #20
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e8:	4770      	bx	lr

0800d5ea <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800d5ea:	b480      	push	{r7}
 800d5ec:	b085      	sub	sp, #20
 800d5ee:	af00      	add	r7, sp, #0
 800d5f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d5fc:	689b      	ldr	r3, [r3, #8]
 800d5fe:	b29b      	uxth	r3, r3
}
 800d600:	4618      	mov	r0, r3
 800d602:	3714      	adds	r7, #20
 800d604:	46bd      	mov	sp, r7
 800d606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60a:	4770      	bx	lr

0800d60c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800d60c:	b480      	push	{r7}
 800d60e:	b087      	sub	sp, #28
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
 800d614:	4608      	mov	r0, r1
 800d616:	4611      	mov	r1, r2
 800d618:	461a      	mov	r2, r3
 800d61a:	4603      	mov	r3, r0
 800d61c:	70fb      	strb	r3, [r7, #3]
 800d61e:	460b      	mov	r3, r1
 800d620:	70bb      	strb	r3, [r7, #2]
 800d622:	4613      	mov	r3, r2
 800d624:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800d626:	2300      	movs	r3, #0
 800d628:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800d62e:	78fb      	ldrb	r3, [r7, #3]
 800d630:	015a      	lsls	r2, r3, #5
 800d632:	68bb      	ldr	r3, [r7, #8]
 800d634:	4413      	add	r3, r2
 800d636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d63a:	461a      	mov	r2, r3
 800d63c:	f04f 33ff 	mov.w	r3, #4294967295
 800d640:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800d642:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d646:	2b03      	cmp	r3, #3
 800d648:	d87e      	bhi.n	800d748 <USB_HC_Init+0x13c>
 800d64a:	a201      	add	r2, pc, #4	; (adr r2, 800d650 <USB_HC_Init+0x44>)
 800d64c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d650:	0800d661 	.word	0x0800d661
 800d654:	0800d70b 	.word	0x0800d70b
 800d658:	0800d661 	.word	0x0800d661
 800d65c:	0800d6cd 	.word	0x0800d6cd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d660:	78fb      	ldrb	r3, [r7, #3]
 800d662:	015a      	lsls	r2, r3, #5
 800d664:	68bb      	ldr	r3, [r7, #8]
 800d666:	4413      	add	r3, r2
 800d668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d66c:	461a      	mov	r2, r3
 800d66e:	f240 439d 	movw	r3, #1181	; 0x49d
 800d672:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800d674:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	da10      	bge.n	800d69e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d67c:	78fb      	ldrb	r3, [r7, #3]
 800d67e:	015a      	lsls	r2, r3, #5
 800d680:	68bb      	ldr	r3, [r7, #8]
 800d682:	4413      	add	r3, r2
 800d684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d688:	68db      	ldr	r3, [r3, #12]
 800d68a:	78fa      	ldrb	r2, [r7, #3]
 800d68c:	0151      	lsls	r1, r2, #5
 800d68e:	68ba      	ldr	r2, [r7, #8]
 800d690:	440a      	add	r2, r1
 800d692:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d69a:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800d69c:	e057      	b.n	800d74e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d051      	beq.n	800d74e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800d6aa:	78fb      	ldrb	r3, [r7, #3]
 800d6ac:	015a      	lsls	r2, r3, #5
 800d6ae:	68bb      	ldr	r3, [r7, #8]
 800d6b0:	4413      	add	r3, r2
 800d6b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d6b6:	68db      	ldr	r3, [r3, #12]
 800d6b8:	78fa      	ldrb	r2, [r7, #3]
 800d6ba:	0151      	lsls	r1, r2, #5
 800d6bc:	68ba      	ldr	r2, [r7, #8]
 800d6be:	440a      	add	r2, r1
 800d6c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d6c4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d6c8:	60d3      	str	r3, [r2, #12]
      break;
 800d6ca:	e040      	b.n	800d74e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d6cc:	78fb      	ldrb	r3, [r7, #3]
 800d6ce:	015a      	lsls	r2, r3, #5
 800d6d0:	68bb      	ldr	r3, [r7, #8]
 800d6d2:	4413      	add	r3, r2
 800d6d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d6d8:	461a      	mov	r2, r3
 800d6da:	f240 639d 	movw	r3, #1693	; 0x69d
 800d6de:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d6e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	da34      	bge.n	800d752 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d6e8:	78fb      	ldrb	r3, [r7, #3]
 800d6ea:	015a      	lsls	r2, r3, #5
 800d6ec:	68bb      	ldr	r3, [r7, #8]
 800d6ee:	4413      	add	r3, r2
 800d6f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d6f4:	68db      	ldr	r3, [r3, #12]
 800d6f6:	78fa      	ldrb	r2, [r7, #3]
 800d6f8:	0151      	lsls	r1, r2, #5
 800d6fa:	68ba      	ldr	r2, [r7, #8]
 800d6fc:	440a      	add	r2, r1
 800d6fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d706:	60d3      	str	r3, [r2, #12]
      }

      break;
 800d708:	e023      	b.n	800d752 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d70a:	78fb      	ldrb	r3, [r7, #3]
 800d70c:	015a      	lsls	r2, r3, #5
 800d70e:	68bb      	ldr	r3, [r7, #8]
 800d710:	4413      	add	r3, r2
 800d712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d716:	461a      	mov	r2, r3
 800d718:	f240 2325 	movw	r3, #549	; 0x225
 800d71c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d71e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d722:	2b00      	cmp	r3, #0
 800d724:	da17      	bge.n	800d756 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800d726:	78fb      	ldrb	r3, [r7, #3]
 800d728:	015a      	lsls	r2, r3, #5
 800d72a:	68bb      	ldr	r3, [r7, #8]
 800d72c:	4413      	add	r3, r2
 800d72e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d732:	68db      	ldr	r3, [r3, #12]
 800d734:	78fa      	ldrb	r2, [r7, #3]
 800d736:	0151      	lsls	r1, r2, #5
 800d738:	68ba      	ldr	r2, [r7, #8]
 800d73a:	440a      	add	r2, r1
 800d73c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d740:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800d744:	60d3      	str	r3, [r2, #12]
      }
      break;
 800d746:	e006      	b.n	800d756 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800d748:	2301      	movs	r3, #1
 800d74a:	75fb      	strb	r3, [r7, #23]
      break;
 800d74c:	e004      	b.n	800d758 <USB_HC_Init+0x14c>
      break;
 800d74e:	bf00      	nop
 800d750:	e002      	b.n	800d758 <USB_HC_Init+0x14c>
      break;
 800d752:	bf00      	nop
 800d754:	e000      	b.n	800d758 <USB_HC_Init+0x14c>
      break;
 800d756:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800d758:	68bb      	ldr	r3, [r7, #8]
 800d75a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d75e:	699a      	ldr	r2, [r3, #24]
 800d760:	78fb      	ldrb	r3, [r7, #3]
 800d762:	f003 030f 	and.w	r3, r3, #15
 800d766:	2101      	movs	r1, #1
 800d768:	fa01 f303 	lsl.w	r3, r1, r3
 800d76c:	68b9      	ldr	r1, [r7, #8]
 800d76e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d772:	4313      	orrs	r3, r2
 800d774:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	699b      	ldr	r3, [r3, #24]
 800d77a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800d782:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d786:	2b00      	cmp	r3, #0
 800d788:	da03      	bge.n	800d792 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800d78a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d78e:	613b      	str	r3, [r7, #16]
 800d790:	e001      	b.n	800d796 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800d792:	2300      	movs	r3, #0
 800d794:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800d796:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d79a:	2b02      	cmp	r3, #2
 800d79c:	d103      	bne.n	800d7a6 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800d79e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d7a2:	60fb      	str	r3, [r7, #12]
 800d7a4:	e001      	b.n	800d7aa <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d7aa:	787b      	ldrb	r3, [r7, #1]
 800d7ac:	059b      	lsls	r3, r3, #22
 800d7ae:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800d7b2:	78bb      	ldrb	r3, [r7, #2]
 800d7b4:	02db      	lsls	r3, r3, #11
 800d7b6:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d7ba:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d7bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d7c0:	049b      	lsls	r3, r3, #18
 800d7c2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800d7c6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d7c8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d7ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d7ce:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d7d0:	693b      	ldr	r3, [r7, #16]
 800d7d2:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d7d4:	78fb      	ldrb	r3, [r7, #3]
 800d7d6:	0159      	lsls	r1, r3, #5
 800d7d8:	68bb      	ldr	r3, [r7, #8]
 800d7da:	440b      	add	r3, r1
 800d7dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d7e0:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d7e6:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800d7e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d7ec:	2b03      	cmp	r3, #3
 800d7ee:	d10f      	bne.n	800d810 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800d7f0:	78fb      	ldrb	r3, [r7, #3]
 800d7f2:	015a      	lsls	r2, r3, #5
 800d7f4:	68bb      	ldr	r3, [r7, #8]
 800d7f6:	4413      	add	r3, r2
 800d7f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	78fa      	ldrb	r2, [r7, #3]
 800d800:	0151      	lsls	r1, r2, #5
 800d802:	68ba      	ldr	r2, [r7, #8]
 800d804:	440a      	add	r2, r1
 800d806:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d80a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d80e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800d810:	7dfb      	ldrb	r3, [r7, #23]
}
 800d812:	4618      	mov	r0, r3
 800d814:	371c      	adds	r7, #28
 800d816:	46bd      	mov	sp, r7
 800d818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81c:	4770      	bx	lr
 800d81e:	bf00      	nop

0800d820 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b08c      	sub	sp, #48	; 0x30
 800d824:	af02      	add	r7, sp, #8
 800d826:	60f8      	str	r0, [r7, #12]
 800d828:	60b9      	str	r1, [r7, #8]
 800d82a:	4613      	mov	r3, r2
 800d82c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800d832:	68bb      	ldr	r3, [r7, #8]
 800d834:	785b      	ldrb	r3, [r3, #1]
 800d836:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800d838:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d83c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d846:	2b00      	cmp	r3, #0
 800d848:	d028      	beq.n	800d89c <USB_HC_StartXfer+0x7c>
 800d84a:	68bb      	ldr	r3, [r7, #8]
 800d84c:	791b      	ldrb	r3, [r3, #4]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d124      	bne.n	800d89c <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800d852:	79fb      	ldrb	r3, [r7, #7]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d10b      	bne.n	800d870 <USB_HC_StartXfer+0x50>
 800d858:	68bb      	ldr	r3, [r7, #8]
 800d85a:	795b      	ldrb	r3, [r3, #5]
 800d85c:	2b01      	cmp	r3, #1
 800d85e:	d107      	bne.n	800d870 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800d860:	68bb      	ldr	r3, [r7, #8]
 800d862:	785b      	ldrb	r3, [r3, #1]
 800d864:	4619      	mov	r1, r3
 800d866:	68f8      	ldr	r0, [r7, #12]
 800d868:	f000 fa30 	bl	800dccc <USB_DoPing>
      return HAL_OK;
 800d86c:	2300      	movs	r3, #0
 800d86e:	e114      	b.n	800da9a <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 800d870:	79fb      	ldrb	r3, [r7, #7]
 800d872:	2b01      	cmp	r3, #1
 800d874:	d112      	bne.n	800d89c <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800d876:	69fb      	ldr	r3, [r7, #28]
 800d878:	015a      	lsls	r2, r3, #5
 800d87a:	6a3b      	ldr	r3, [r7, #32]
 800d87c:	4413      	add	r3, r2
 800d87e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d882:	68db      	ldr	r3, [r3, #12]
 800d884:	69fa      	ldr	r2, [r7, #28]
 800d886:	0151      	lsls	r1, r2, #5
 800d888:	6a3a      	ldr	r2, [r7, #32]
 800d88a:	440a      	add	r2, r1
 800d88c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d890:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800d894:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800d896:	68bb      	ldr	r3, [r7, #8]
 800d898:	2200      	movs	r2, #0
 800d89a:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800d89c:	68bb      	ldr	r3, [r7, #8]
 800d89e:	691b      	ldr	r3, [r3, #16]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d018      	beq.n	800d8d6 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800d8a4:	68bb      	ldr	r3, [r7, #8]
 800d8a6:	691b      	ldr	r3, [r3, #16]
 800d8a8:	68ba      	ldr	r2, [r7, #8]
 800d8aa:	8912      	ldrh	r2, [r2, #8]
 800d8ac:	4413      	add	r3, r2
 800d8ae:	3b01      	subs	r3, #1
 800d8b0:	68ba      	ldr	r2, [r7, #8]
 800d8b2:	8912      	ldrh	r2, [r2, #8]
 800d8b4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d8b8:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800d8ba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d8bc:	8b7b      	ldrh	r3, [r7, #26]
 800d8be:	429a      	cmp	r2, r3
 800d8c0:	d90b      	bls.n	800d8da <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800d8c2:	8b7b      	ldrh	r3, [r7, #26]
 800d8c4:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800d8c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d8c8:	68ba      	ldr	r2, [r7, #8]
 800d8ca:	8912      	ldrh	r2, [r2, #8]
 800d8cc:	fb02 f203 	mul.w	r2, r2, r3
 800d8d0:	68bb      	ldr	r3, [r7, #8]
 800d8d2:	611a      	str	r2, [r3, #16]
 800d8d4:	e001      	b.n	800d8da <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800d8d6:	2301      	movs	r3, #1
 800d8d8:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800d8da:	68bb      	ldr	r3, [r7, #8]
 800d8dc:	78db      	ldrb	r3, [r3, #3]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d006      	beq.n	800d8f0 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800d8e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d8e4:	68ba      	ldr	r2, [r7, #8]
 800d8e6:	8912      	ldrh	r2, [r2, #8]
 800d8e8:	fb02 f203 	mul.w	r2, r2, r3
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	691b      	ldr	r3, [r3, #16]
 800d8f4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d8f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d8fa:	04d9      	lsls	r1, r3, #19
 800d8fc:	4b69      	ldr	r3, [pc, #420]	; (800daa4 <USB_HC_StartXfer+0x284>)
 800d8fe:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800d900:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800d902:	68bb      	ldr	r3, [r7, #8]
 800d904:	7a9b      	ldrb	r3, [r3, #10]
 800d906:	075b      	lsls	r3, r3, #29
 800d908:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800d90c:	69f9      	ldr	r1, [r7, #28]
 800d90e:	0148      	lsls	r0, r1, #5
 800d910:	6a39      	ldr	r1, [r7, #32]
 800d912:	4401      	add	r1, r0
 800d914:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d918:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800d91a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800d91c:	79fb      	ldrb	r3, [r7, #7]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d009      	beq.n	800d936 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800d922:	68bb      	ldr	r3, [r7, #8]
 800d924:	68d9      	ldr	r1, [r3, #12]
 800d926:	69fb      	ldr	r3, [r7, #28]
 800d928:	015a      	lsls	r2, r3, #5
 800d92a:	6a3b      	ldr	r3, [r7, #32]
 800d92c:	4413      	add	r3, r2
 800d92e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d932:	460a      	mov	r2, r1
 800d934:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800d936:	6a3b      	ldr	r3, [r7, #32]
 800d938:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d93c:	689b      	ldr	r3, [r3, #8]
 800d93e:	f003 0301 	and.w	r3, r3, #1
 800d942:	2b00      	cmp	r3, #0
 800d944:	bf0c      	ite	eq
 800d946:	2301      	moveq	r3, #1
 800d948:	2300      	movne	r3, #0
 800d94a:	b2db      	uxtb	r3, r3
 800d94c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800d94e:	69fb      	ldr	r3, [r7, #28]
 800d950:	015a      	lsls	r2, r3, #5
 800d952:	6a3b      	ldr	r3, [r7, #32]
 800d954:	4413      	add	r3, r2
 800d956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	69fa      	ldr	r2, [r7, #28]
 800d95e:	0151      	lsls	r1, r2, #5
 800d960:	6a3a      	ldr	r2, [r7, #32]
 800d962:	440a      	add	r2, r1
 800d964:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d968:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d96c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800d96e:	69fb      	ldr	r3, [r7, #28]
 800d970:	015a      	lsls	r2, r3, #5
 800d972:	6a3b      	ldr	r3, [r7, #32]
 800d974:	4413      	add	r3, r2
 800d976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d97a:	681a      	ldr	r2, [r3, #0]
 800d97c:	7e7b      	ldrb	r3, [r7, #25]
 800d97e:	075b      	lsls	r3, r3, #29
 800d980:	69f9      	ldr	r1, [r7, #28]
 800d982:	0148      	lsls	r0, r1, #5
 800d984:	6a39      	ldr	r1, [r7, #32]
 800d986:	4401      	add	r1, r0
 800d988:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800d98c:	4313      	orrs	r3, r2
 800d98e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800d990:	69fb      	ldr	r3, [r7, #28]
 800d992:	015a      	lsls	r2, r3, #5
 800d994:	6a3b      	ldr	r3, [r7, #32]
 800d996:	4413      	add	r3, r2
 800d998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	4a42      	ldr	r2, [pc, #264]	; (800daa8 <USB_HC_StartXfer+0x288>)
 800d9a0:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d9a2:	4b41      	ldr	r3, [pc, #260]	; (800daa8 <USB_HC_StartXfer+0x288>)
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d9aa:	4a3f      	ldr	r2, [pc, #252]	; (800daa8 <USB_HC_StartXfer+0x288>)
 800d9ac:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800d9ae:	68bb      	ldr	r3, [r7, #8]
 800d9b0:	78db      	ldrb	r3, [r3, #3]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d006      	beq.n	800d9c4 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800d9b6:	4b3c      	ldr	r3, [pc, #240]	; (800daa8 <USB_HC_StartXfer+0x288>)
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d9be:	4a3a      	ldr	r2, [pc, #232]	; (800daa8 <USB_HC_StartXfer+0x288>)
 800d9c0:	6013      	str	r3, [r2, #0]
 800d9c2:	e005      	b.n	800d9d0 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800d9c4:	4b38      	ldr	r3, [pc, #224]	; (800daa8 <USB_HC_StartXfer+0x288>)
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d9cc:	4a36      	ldr	r2, [pc, #216]	; (800daa8 <USB_HC_StartXfer+0x288>)
 800d9ce:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d9d0:	4b35      	ldr	r3, [pc, #212]	; (800daa8 <USB_HC_StartXfer+0x288>)
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d9d8:	4a33      	ldr	r2, [pc, #204]	; (800daa8 <USB_HC_StartXfer+0x288>)
 800d9da:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800d9dc:	69fb      	ldr	r3, [r7, #28]
 800d9de:	015a      	lsls	r2, r3, #5
 800d9e0:	6a3b      	ldr	r3, [r7, #32]
 800d9e2:	4413      	add	r3, r2
 800d9e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d9e8:	461a      	mov	r2, r3
 800d9ea:	4b2f      	ldr	r3, [pc, #188]	; (800daa8 <USB_HC_StartXfer+0x288>)
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800d9f0:	79fb      	ldrb	r3, [r7, #7]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d001      	beq.n	800d9fa <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	e04f      	b.n	800da9a <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800d9fa:	68bb      	ldr	r3, [r7, #8]
 800d9fc:	78db      	ldrb	r3, [r3, #3]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d14a      	bne.n	800da98 <USB_HC_StartXfer+0x278>
 800da02:	68bb      	ldr	r3, [r7, #8]
 800da04:	691b      	ldr	r3, [r3, #16]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d046      	beq.n	800da98 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 800da0a:	68bb      	ldr	r3, [r7, #8]
 800da0c:	79db      	ldrb	r3, [r3, #7]
 800da0e:	2b03      	cmp	r3, #3
 800da10:	d830      	bhi.n	800da74 <USB_HC_StartXfer+0x254>
 800da12:	a201      	add	r2, pc, #4	; (adr r2, 800da18 <USB_HC_StartXfer+0x1f8>)
 800da14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da18:	0800da29 	.word	0x0800da29
 800da1c:	0800da4d 	.word	0x0800da4d
 800da20:	0800da29 	.word	0x0800da29
 800da24:	0800da4d 	.word	0x0800da4d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800da28:	68bb      	ldr	r3, [r7, #8]
 800da2a:	691b      	ldr	r3, [r3, #16]
 800da2c:	3303      	adds	r3, #3
 800da2e:	089b      	lsrs	r3, r3, #2
 800da30:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800da32:	8afa      	ldrh	r2, [r7, #22]
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da38:	b29b      	uxth	r3, r3
 800da3a:	429a      	cmp	r2, r3
 800da3c:	d91c      	bls.n	800da78 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	699b      	ldr	r3, [r3, #24]
 800da42:	f043 0220 	orr.w	r2, r3, #32
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	619a      	str	r2, [r3, #24]
        }
        break;
 800da4a:	e015      	b.n	800da78 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800da4c:	68bb      	ldr	r3, [r7, #8]
 800da4e:	691b      	ldr	r3, [r3, #16]
 800da50:	3303      	adds	r3, #3
 800da52:	089b      	lsrs	r3, r3, #2
 800da54:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800da56:	8afa      	ldrh	r2, [r7, #22]
 800da58:	6a3b      	ldr	r3, [r7, #32]
 800da5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800da5e:	691b      	ldr	r3, [r3, #16]
 800da60:	b29b      	uxth	r3, r3
 800da62:	429a      	cmp	r2, r3
 800da64:	d90a      	bls.n	800da7c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	699b      	ldr	r3, [r3, #24]
 800da6a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	619a      	str	r2, [r3, #24]
        }
        break;
 800da72:	e003      	b.n	800da7c <USB_HC_StartXfer+0x25c>

      default:
        break;
 800da74:	bf00      	nop
 800da76:	e002      	b.n	800da7e <USB_HC_StartXfer+0x25e>
        break;
 800da78:	bf00      	nop
 800da7a:	e000      	b.n	800da7e <USB_HC_StartXfer+0x25e>
        break;
 800da7c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800da7e:	68bb      	ldr	r3, [r7, #8]
 800da80:	68d9      	ldr	r1, [r3, #12]
 800da82:	68bb      	ldr	r3, [r7, #8]
 800da84:	785a      	ldrb	r2, [r3, #1]
 800da86:	68bb      	ldr	r3, [r7, #8]
 800da88:	691b      	ldr	r3, [r3, #16]
 800da8a:	b298      	uxth	r0, r3
 800da8c:	2300      	movs	r3, #0
 800da8e:	9300      	str	r3, [sp, #0]
 800da90:	4603      	mov	r3, r0
 800da92:	68f8      	ldr	r0, [r7, #12]
 800da94:	f7ff fbc6 	bl	800d224 <USB_WritePacket>
  }

  return HAL_OK;
 800da98:	2300      	movs	r3, #0
}
 800da9a:	4618      	mov	r0, r3
 800da9c:	3728      	adds	r7, #40	; 0x28
 800da9e:	46bd      	mov	sp, r7
 800daa0:	bd80      	pop	{r7, pc}
 800daa2:	bf00      	nop
 800daa4:	1ff80000 	.word	0x1ff80000
 800daa8:	200000b0 	.word	0x200000b0

0800daac <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800daac:	b480      	push	{r7}
 800daae:	b085      	sub	sp, #20
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dabe:	695b      	ldr	r3, [r3, #20]
 800dac0:	b29b      	uxth	r3, r3
}
 800dac2:	4618      	mov	r0, r3
 800dac4:	3714      	adds	r7, #20
 800dac6:	46bd      	mov	sp, r7
 800dac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dacc:	4770      	bx	lr

0800dace <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800dace:	b480      	push	{r7}
 800dad0:	b087      	sub	sp, #28
 800dad2:	af00      	add	r7, sp, #0
 800dad4:	6078      	str	r0, [r7, #4]
 800dad6:	460b      	mov	r3, r1
 800dad8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800dade:	78fb      	ldrb	r3, [r7, #3]
 800dae0:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800dae2:	2300      	movs	r3, #0
 800dae4:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	015a      	lsls	r2, r3, #5
 800daea:	693b      	ldr	r3, [r7, #16]
 800daec:	4413      	add	r3, r2
 800daee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	0c9b      	lsrs	r3, r3, #18
 800daf6:	f003 0303 	and.w	r3, r3, #3
 800dafa:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800dafc:	68bb      	ldr	r3, [r7, #8]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d002      	beq.n	800db08 <USB_HC_Halt+0x3a>
 800db02:	68bb      	ldr	r3, [r7, #8]
 800db04:	2b02      	cmp	r3, #2
 800db06:	d16c      	bne.n	800dbe2 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	015a      	lsls	r2, r3, #5
 800db0c:	693b      	ldr	r3, [r7, #16]
 800db0e:	4413      	add	r3, r2
 800db10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	68fa      	ldr	r2, [r7, #12]
 800db18:	0151      	lsls	r1, r2, #5
 800db1a:	693a      	ldr	r2, [r7, #16]
 800db1c:	440a      	add	r2, r1
 800db1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800db22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800db26:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800db30:	2b00      	cmp	r3, #0
 800db32:	d143      	bne.n	800dbbc <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	015a      	lsls	r2, r3, #5
 800db38:	693b      	ldr	r3, [r7, #16]
 800db3a:	4413      	add	r3, r2
 800db3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	68fa      	ldr	r2, [r7, #12]
 800db44:	0151      	lsls	r1, r2, #5
 800db46:	693a      	ldr	r2, [r7, #16]
 800db48:	440a      	add	r2, r1
 800db4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800db4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800db52:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	015a      	lsls	r2, r3, #5
 800db58:	693b      	ldr	r3, [r7, #16]
 800db5a:	4413      	add	r3, r2
 800db5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	68fa      	ldr	r2, [r7, #12]
 800db64:	0151      	lsls	r1, r2, #5
 800db66:	693a      	ldr	r2, [r7, #16]
 800db68:	440a      	add	r2, r1
 800db6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800db6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800db72:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	015a      	lsls	r2, r3, #5
 800db78:	693b      	ldr	r3, [r7, #16]
 800db7a:	4413      	add	r3, r2
 800db7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	68fa      	ldr	r2, [r7, #12]
 800db84:	0151      	lsls	r1, r2, #5
 800db86:	693a      	ldr	r2, [r7, #16]
 800db88:	440a      	add	r2, r1
 800db8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800db8e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800db92:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800db94:	697b      	ldr	r3, [r7, #20]
 800db96:	3301      	adds	r3, #1
 800db98:	617b      	str	r3, [r7, #20]
 800db9a:	697b      	ldr	r3, [r7, #20]
 800db9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dba0:	d81d      	bhi.n	800dbde <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	015a      	lsls	r2, r3, #5
 800dba6:	693b      	ldr	r3, [r7, #16]
 800dba8:	4413      	add	r3, r2
 800dbaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dbb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dbb8:	d0ec      	beq.n	800db94 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800dbba:	e080      	b.n	800dcbe <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	015a      	lsls	r2, r3, #5
 800dbc0:	693b      	ldr	r3, [r7, #16]
 800dbc2:	4413      	add	r3, r2
 800dbc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	68fa      	ldr	r2, [r7, #12]
 800dbcc:	0151      	lsls	r1, r2, #5
 800dbce:	693a      	ldr	r2, [r7, #16]
 800dbd0:	440a      	add	r2, r1
 800dbd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dbd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dbda:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800dbdc:	e06f      	b.n	800dcbe <USB_HC_Halt+0x1f0>
          break;
 800dbde:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800dbe0:	e06d      	b.n	800dcbe <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	015a      	lsls	r2, r3, #5
 800dbe6:	693b      	ldr	r3, [r7, #16]
 800dbe8:	4413      	add	r3, r2
 800dbea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	68fa      	ldr	r2, [r7, #12]
 800dbf2:	0151      	lsls	r1, r2, #5
 800dbf4:	693a      	ldr	r2, [r7, #16]
 800dbf6:	440a      	add	r2, r1
 800dbf8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dbfc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dc00:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800dc02:	693b      	ldr	r3, [r7, #16]
 800dc04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dc08:	691b      	ldr	r3, [r3, #16]
 800dc0a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d143      	bne.n	800dc9a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	015a      	lsls	r2, r3, #5
 800dc16:	693b      	ldr	r3, [r7, #16]
 800dc18:	4413      	add	r3, r2
 800dc1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	68fa      	ldr	r2, [r7, #12]
 800dc22:	0151      	lsls	r1, r2, #5
 800dc24:	693a      	ldr	r2, [r7, #16]
 800dc26:	440a      	add	r2, r1
 800dc28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dc2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dc30:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	015a      	lsls	r2, r3, #5
 800dc36:	693b      	ldr	r3, [r7, #16]
 800dc38:	4413      	add	r3, r2
 800dc3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	68fa      	ldr	r2, [r7, #12]
 800dc42:	0151      	lsls	r1, r2, #5
 800dc44:	693a      	ldr	r2, [r7, #16]
 800dc46:	440a      	add	r2, r1
 800dc48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dc4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dc50:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	015a      	lsls	r2, r3, #5
 800dc56:	693b      	ldr	r3, [r7, #16]
 800dc58:	4413      	add	r3, r2
 800dc5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	68fa      	ldr	r2, [r7, #12]
 800dc62:	0151      	lsls	r1, r2, #5
 800dc64:	693a      	ldr	r2, [r7, #16]
 800dc66:	440a      	add	r2, r1
 800dc68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dc6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800dc70:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800dc72:	697b      	ldr	r3, [r7, #20]
 800dc74:	3301      	adds	r3, #1
 800dc76:	617b      	str	r3, [r7, #20]
 800dc78:	697b      	ldr	r3, [r7, #20]
 800dc7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dc7e:	d81d      	bhi.n	800dcbc <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	015a      	lsls	r2, r3, #5
 800dc84:	693b      	ldr	r3, [r7, #16]
 800dc86:	4413      	add	r3, r2
 800dc88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dc92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dc96:	d0ec      	beq.n	800dc72 <USB_HC_Halt+0x1a4>
 800dc98:	e011      	b.n	800dcbe <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	015a      	lsls	r2, r3, #5
 800dc9e:	693b      	ldr	r3, [r7, #16]
 800dca0:	4413      	add	r3, r2
 800dca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	68fa      	ldr	r2, [r7, #12]
 800dcaa:	0151      	lsls	r1, r2, #5
 800dcac:	693a      	ldr	r2, [r7, #16]
 800dcae:	440a      	add	r2, r1
 800dcb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dcb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dcb8:	6013      	str	r3, [r2, #0]
 800dcba:	e000      	b.n	800dcbe <USB_HC_Halt+0x1f0>
          break;
 800dcbc:	bf00      	nop
    }
  }

  return HAL_OK;
 800dcbe:	2300      	movs	r3, #0
}
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	371c      	adds	r7, #28
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcca:	4770      	bx	lr

0800dccc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800dccc:	b480      	push	{r7}
 800dcce:	b087      	sub	sp, #28
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
 800dcd4:	460b      	mov	r3, r1
 800dcd6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800dcdc:	78fb      	ldrb	r3, [r7, #3]
 800dcde:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800dce0:	2301      	movs	r3, #1
 800dce2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	04da      	lsls	r2, r3, #19
 800dce8:	4b15      	ldr	r3, [pc, #84]	; (800dd40 <USB_DoPing+0x74>)
 800dcea:	4013      	ands	r3, r2
 800dcec:	693a      	ldr	r2, [r7, #16]
 800dcee:	0151      	lsls	r1, r2, #5
 800dcf0:	697a      	ldr	r2, [r7, #20]
 800dcf2:	440a      	add	r2, r1
 800dcf4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dcf8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dcfc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800dcfe:	693b      	ldr	r3, [r7, #16]
 800dd00:	015a      	lsls	r2, r3, #5
 800dd02:	697b      	ldr	r3, [r7, #20]
 800dd04:	4413      	add	r3, r2
 800dd06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800dd0e:	68bb      	ldr	r3, [r7, #8]
 800dd10:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800dd14:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800dd16:	68bb      	ldr	r3, [r7, #8]
 800dd18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dd1c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800dd1e:	693b      	ldr	r3, [r7, #16]
 800dd20:	015a      	lsls	r2, r3, #5
 800dd22:	697b      	ldr	r3, [r7, #20]
 800dd24:	4413      	add	r3, r2
 800dd26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dd2a:	461a      	mov	r2, r3
 800dd2c:	68bb      	ldr	r3, [r7, #8]
 800dd2e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800dd30:	2300      	movs	r3, #0
}
 800dd32:	4618      	mov	r0, r3
 800dd34:	371c      	adds	r7, #28
 800dd36:	46bd      	mov	sp, r7
 800dd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3c:	4770      	bx	lr
 800dd3e:	bf00      	nop
 800dd40:	1ff80000 	.word	0x1ff80000

0800dd44 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b086      	sub	sp, #24
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800dd50:	2300      	movs	r3, #0
 800dd52:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800dd54:	6878      	ldr	r0, [r7, #4]
 800dd56:	f7ff f9e1 	bl	800d11c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800dd5a:	2110      	movs	r1, #16
 800dd5c:	6878      	ldr	r0, [r7, #4]
 800dd5e:	f7ff fa19 	bl	800d194 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800dd62:	6878      	ldr	r0, [r7, #4]
 800dd64:	f7ff fa3c 	bl	800d1e0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800dd68:	2300      	movs	r3, #0
 800dd6a:	613b      	str	r3, [r7, #16]
 800dd6c:	e01f      	b.n	800ddae <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800dd6e:	693b      	ldr	r3, [r7, #16]
 800dd70:	015a      	lsls	r2, r3, #5
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	4413      	add	r3, r2
 800dd76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800dd7e:	68bb      	ldr	r3, [r7, #8]
 800dd80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dd84:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800dd86:	68bb      	ldr	r3, [r7, #8]
 800dd88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dd8c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800dd8e:	68bb      	ldr	r3, [r7, #8]
 800dd90:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800dd94:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800dd96:	693b      	ldr	r3, [r7, #16]
 800dd98:	015a      	lsls	r2, r3, #5
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	4413      	add	r3, r2
 800dd9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dda2:	461a      	mov	r2, r3
 800dda4:	68bb      	ldr	r3, [r7, #8]
 800dda6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800dda8:	693b      	ldr	r3, [r7, #16]
 800ddaa:	3301      	adds	r3, #1
 800ddac:	613b      	str	r3, [r7, #16]
 800ddae:	693b      	ldr	r3, [r7, #16]
 800ddb0:	2b0f      	cmp	r3, #15
 800ddb2:	d9dc      	bls.n	800dd6e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	613b      	str	r3, [r7, #16]
 800ddb8:	e034      	b.n	800de24 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800ddba:	693b      	ldr	r3, [r7, #16]
 800ddbc:	015a      	lsls	r2, r3, #5
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	4413      	add	r3, r2
 800ddc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800ddca:	68bb      	ldr	r3, [r7, #8]
 800ddcc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ddd0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800ddd2:	68bb      	ldr	r3, [r7, #8]
 800ddd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ddd8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800ddda:	68bb      	ldr	r3, [r7, #8]
 800dddc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800dde0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800dde2:	693b      	ldr	r3, [r7, #16]
 800dde4:	015a      	lsls	r2, r3, #5
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	4413      	add	r3, r2
 800ddea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ddee:	461a      	mov	r2, r3
 800ddf0:	68bb      	ldr	r3, [r7, #8]
 800ddf2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800ddf4:	697b      	ldr	r3, [r7, #20]
 800ddf6:	3301      	adds	r3, #1
 800ddf8:	617b      	str	r3, [r7, #20]
 800ddfa:	697b      	ldr	r3, [r7, #20]
 800ddfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800de00:	d80c      	bhi.n	800de1c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800de02:	693b      	ldr	r3, [r7, #16]
 800de04:	015a      	lsls	r2, r3, #5
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	4413      	add	r3, r2
 800de0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800de14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800de18:	d0ec      	beq.n	800ddf4 <USB_StopHost+0xb0>
 800de1a:	e000      	b.n	800de1e <USB_StopHost+0xda>
        break;
 800de1c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800de1e:	693b      	ldr	r3, [r7, #16]
 800de20:	3301      	adds	r3, #1
 800de22:	613b      	str	r3, [r7, #16]
 800de24:	693b      	ldr	r3, [r7, #16]
 800de26:	2b0f      	cmp	r3, #15
 800de28:	d9c7      	bls.n	800ddba <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800de30:	461a      	mov	r2, r3
 800de32:	f04f 33ff 	mov.w	r3, #4294967295
 800de36:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	f04f 32ff 	mov.w	r2, #4294967295
 800de3e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800de40:	6878      	ldr	r0, [r7, #4]
 800de42:	f7ff f95a 	bl	800d0fa <USB_EnableGlobalInt>

  return HAL_OK;
 800de46:	2300      	movs	r3, #0
}
 800de48:	4618      	mov	r0, r3
 800de4a:	3718      	adds	r7, #24
 800de4c:	46bd      	mov	sp, r7
 800de4e:	bd80      	pop	{r7, pc}

0800de50 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800de50:	b590      	push	{r4, r7, lr}
 800de52:	b089      	sub	sp, #36	; 0x24
 800de54:	af04      	add	r7, sp, #16
 800de56:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800de58:	2301      	movs	r3, #1
 800de5a:	2202      	movs	r2, #2
 800de5c:	2102      	movs	r1, #2
 800de5e:	6878      	ldr	r0, [r7, #4]
 800de60:	f000 fc68 	bl	800e734 <USBH_FindInterface>
 800de64:	4603      	mov	r3, r0
 800de66:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800de68:	7bfb      	ldrb	r3, [r7, #15]
 800de6a:	2bff      	cmp	r3, #255	; 0xff
 800de6c:	d002      	beq.n	800de74 <USBH_CDC_InterfaceInit+0x24>
 800de6e:	7bfb      	ldrb	r3, [r7, #15]
 800de70:	2b01      	cmp	r3, #1
 800de72:	d901      	bls.n	800de78 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800de74:	2302      	movs	r3, #2
 800de76:	e13d      	b.n	800e0f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800de78:	7bfb      	ldrb	r3, [r7, #15]
 800de7a:	4619      	mov	r1, r3
 800de7c:	6878      	ldr	r0, [r7, #4]
 800de7e:	f000 fc3d 	bl	800e6fc <USBH_SelectInterface>
 800de82:	4603      	mov	r3, r0
 800de84:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800de86:	7bbb      	ldrb	r3, [r7, #14]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d001      	beq.n	800de90 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800de8c:	2302      	movs	r3, #2
 800de8e:	e131      	b.n	800e0f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800de96:	2050      	movs	r0, #80	; 0x50
 800de98:	f001 fb1a 	bl	800f4d0 <malloc>
 800de9c:	4603      	mov	r3, r0
 800de9e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dea6:	69db      	ldr	r3, [r3, #28]
 800dea8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800deaa:	68bb      	ldr	r3, [r7, #8]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d101      	bne.n	800deb4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800deb0:	2302      	movs	r3, #2
 800deb2:	e11f      	b.n	800e0f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800deb4:	2250      	movs	r2, #80	; 0x50
 800deb6:	2100      	movs	r1, #0
 800deb8:	68b8      	ldr	r0, [r7, #8]
 800deba:	f001 fb19 	bl	800f4f0 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800debe:	7bfb      	ldrb	r3, [r7, #15]
 800dec0:	687a      	ldr	r2, [r7, #4]
 800dec2:	211a      	movs	r1, #26
 800dec4:	fb01 f303 	mul.w	r3, r1, r3
 800dec8:	4413      	add	r3, r2
 800deca:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800dece:	781b      	ldrb	r3, [r3, #0]
 800ded0:	b25b      	sxtb	r3, r3
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	da15      	bge.n	800df02 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800ded6:	7bfb      	ldrb	r3, [r7, #15]
 800ded8:	687a      	ldr	r2, [r7, #4]
 800deda:	211a      	movs	r1, #26
 800dedc:	fb01 f303 	mul.w	r3, r1, r3
 800dee0:	4413      	add	r3, r2
 800dee2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800dee6:	781a      	ldrb	r2, [r3, #0]
 800dee8:	68bb      	ldr	r3, [r7, #8]
 800deea:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800deec:	7bfb      	ldrb	r3, [r7, #15]
 800deee:	687a      	ldr	r2, [r7, #4]
 800def0:	211a      	movs	r1, #26
 800def2:	fb01 f303 	mul.w	r3, r1, r3
 800def6:	4413      	add	r3, r2
 800def8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800defc:	881a      	ldrh	r2, [r3, #0]
 800defe:	68bb      	ldr	r3, [r7, #8]
 800df00:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800df02:	68bb      	ldr	r3, [r7, #8]
 800df04:	785b      	ldrb	r3, [r3, #1]
 800df06:	4619      	mov	r1, r3
 800df08:	6878      	ldr	r0, [r7, #4]
 800df0a:	f000 ffa0 	bl	800ee4e <USBH_AllocPipe>
 800df0e:	4603      	mov	r3, r0
 800df10:	461a      	mov	r2, r3
 800df12:	68bb      	ldr	r3, [r7, #8]
 800df14:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800df16:	68bb      	ldr	r3, [r7, #8]
 800df18:	7819      	ldrb	r1, [r3, #0]
 800df1a:	68bb      	ldr	r3, [r7, #8]
 800df1c:	7858      	ldrb	r0, [r3, #1]
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800df2a:	68ba      	ldr	r2, [r7, #8]
 800df2c:	8952      	ldrh	r2, [r2, #10]
 800df2e:	9202      	str	r2, [sp, #8]
 800df30:	2203      	movs	r2, #3
 800df32:	9201      	str	r2, [sp, #4]
 800df34:	9300      	str	r3, [sp, #0]
 800df36:	4623      	mov	r3, r4
 800df38:	4602      	mov	r2, r0
 800df3a:	6878      	ldr	r0, [r7, #4]
 800df3c:	f000 ff58 	bl	800edf0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800df40:	68bb      	ldr	r3, [r7, #8]
 800df42:	781b      	ldrb	r3, [r3, #0]
 800df44:	2200      	movs	r2, #0
 800df46:	4619      	mov	r1, r3
 800df48:	6878      	ldr	r0, [r7, #4]
 800df4a:	f001 fa1b 	bl	800f384 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800df4e:	2300      	movs	r3, #0
 800df50:	2200      	movs	r2, #0
 800df52:	210a      	movs	r1, #10
 800df54:	6878      	ldr	r0, [r7, #4]
 800df56:	f000 fbed 	bl	800e734 <USBH_FindInterface>
 800df5a:	4603      	mov	r3, r0
 800df5c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800df5e:	7bfb      	ldrb	r3, [r7, #15]
 800df60:	2bff      	cmp	r3, #255	; 0xff
 800df62:	d002      	beq.n	800df6a <USBH_CDC_InterfaceInit+0x11a>
 800df64:	7bfb      	ldrb	r3, [r7, #15]
 800df66:	2b01      	cmp	r3, #1
 800df68:	d901      	bls.n	800df6e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800df6a:	2302      	movs	r3, #2
 800df6c:	e0c2      	b.n	800e0f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800df6e:	7bfb      	ldrb	r3, [r7, #15]
 800df70:	687a      	ldr	r2, [r7, #4]
 800df72:	211a      	movs	r1, #26
 800df74:	fb01 f303 	mul.w	r3, r1, r3
 800df78:	4413      	add	r3, r2
 800df7a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800df7e:	781b      	ldrb	r3, [r3, #0]
 800df80:	b25b      	sxtb	r3, r3
 800df82:	2b00      	cmp	r3, #0
 800df84:	da16      	bge.n	800dfb4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800df86:	7bfb      	ldrb	r3, [r7, #15]
 800df88:	687a      	ldr	r2, [r7, #4]
 800df8a:	211a      	movs	r1, #26
 800df8c:	fb01 f303 	mul.w	r3, r1, r3
 800df90:	4413      	add	r3, r2
 800df92:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800df96:	781a      	ldrb	r2, [r3, #0]
 800df98:	68bb      	ldr	r3, [r7, #8]
 800df9a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800df9c:	7bfb      	ldrb	r3, [r7, #15]
 800df9e:	687a      	ldr	r2, [r7, #4]
 800dfa0:	211a      	movs	r1, #26
 800dfa2:	fb01 f303 	mul.w	r3, r1, r3
 800dfa6:	4413      	add	r3, r2
 800dfa8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800dfac:	881a      	ldrh	r2, [r3, #0]
 800dfae:	68bb      	ldr	r3, [r7, #8]
 800dfb0:	835a      	strh	r2, [r3, #26]
 800dfb2:	e015      	b.n	800dfe0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800dfb4:	7bfb      	ldrb	r3, [r7, #15]
 800dfb6:	687a      	ldr	r2, [r7, #4]
 800dfb8:	211a      	movs	r1, #26
 800dfba:	fb01 f303 	mul.w	r3, r1, r3
 800dfbe:	4413      	add	r3, r2
 800dfc0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800dfc4:	781a      	ldrb	r2, [r3, #0]
 800dfc6:	68bb      	ldr	r3, [r7, #8]
 800dfc8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800dfca:	7bfb      	ldrb	r3, [r7, #15]
 800dfcc:	687a      	ldr	r2, [r7, #4]
 800dfce:	211a      	movs	r1, #26
 800dfd0:	fb01 f303 	mul.w	r3, r1, r3
 800dfd4:	4413      	add	r3, r2
 800dfd6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800dfda:	881a      	ldrh	r2, [r3, #0]
 800dfdc:	68bb      	ldr	r3, [r7, #8]
 800dfde:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800dfe0:	7bfb      	ldrb	r3, [r7, #15]
 800dfe2:	687a      	ldr	r2, [r7, #4]
 800dfe4:	211a      	movs	r1, #26
 800dfe6:	fb01 f303 	mul.w	r3, r1, r3
 800dfea:	4413      	add	r3, r2
 800dfec:	f203 3356 	addw	r3, r3, #854	; 0x356
 800dff0:	781b      	ldrb	r3, [r3, #0]
 800dff2:	b25b      	sxtb	r3, r3
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	da16      	bge.n	800e026 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800dff8:	7bfb      	ldrb	r3, [r7, #15]
 800dffa:	687a      	ldr	r2, [r7, #4]
 800dffc:	211a      	movs	r1, #26
 800dffe:	fb01 f303 	mul.w	r3, r1, r3
 800e002:	4413      	add	r3, r2
 800e004:	f203 3356 	addw	r3, r3, #854	; 0x356
 800e008:	781a      	ldrb	r2, [r3, #0]
 800e00a:	68bb      	ldr	r3, [r7, #8]
 800e00c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800e00e:	7bfb      	ldrb	r3, [r7, #15]
 800e010:	687a      	ldr	r2, [r7, #4]
 800e012:	211a      	movs	r1, #26
 800e014:	fb01 f303 	mul.w	r3, r1, r3
 800e018:	4413      	add	r3, r2
 800e01a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800e01e:	881a      	ldrh	r2, [r3, #0]
 800e020:	68bb      	ldr	r3, [r7, #8]
 800e022:	835a      	strh	r2, [r3, #26]
 800e024:	e015      	b.n	800e052 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800e026:	7bfb      	ldrb	r3, [r7, #15]
 800e028:	687a      	ldr	r2, [r7, #4]
 800e02a:	211a      	movs	r1, #26
 800e02c:	fb01 f303 	mul.w	r3, r1, r3
 800e030:	4413      	add	r3, r2
 800e032:	f203 3356 	addw	r3, r3, #854	; 0x356
 800e036:	781a      	ldrb	r2, [r3, #0]
 800e038:	68bb      	ldr	r3, [r7, #8]
 800e03a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800e03c:	7bfb      	ldrb	r3, [r7, #15]
 800e03e:	687a      	ldr	r2, [r7, #4]
 800e040:	211a      	movs	r1, #26
 800e042:	fb01 f303 	mul.w	r3, r1, r3
 800e046:	4413      	add	r3, r2
 800e048:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800e04c:	881a      	ldrh	r2, [r3, #0]
 800e04e:	68bb      	ldr	r3, [r7, #8]
 800e050:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800e052:	68bb      	ldr	r3, [r7, #8]
 800e054:	7b9b      	ldrb	r3, [r3, #14]
 800e056:	4619      	mov	r1, r3
 800e058:	6878      	ldr	r0, [r7, #4]
 800e05a:	f000 fef8 	bl	800ee4e <USBH_AllocPipe>
 800e05e:	4603      	mov	r3, r0
 800e060:	461a      	mov	r2, r3
 800e062:	68bb      	ldr	r3, [r7, #8]
 800e064:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800e066:	68bb      	ldr	r3, [r7, #8]
 800e068:	7bdb      	ldrb	r3, [r3, #15]
 800e06a:	4619      	mov	r1, r3
 800e06c:	6878      	ldr	r0, [r7, #4]
 800e06e:	f000 feee 	bl	800ee4e <USBH_AllocPipe>
 800e072:	4603      	mov	r3, r0
 800e074:	461a      	mov	r2, r3
 800e076:	68bb      	ldr	r3, [r7, #8]
 800e078:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800e07a:	68bb      	ldr	r3, [r7, #8]
 800e07c:	7b59      	ldrb	r1, [r3, #13]
 800e07e:	68bb      	ldr	r3, [r7, #8]
 800e080:	7b98      	ldrb	r0, [r3, #14]
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e08e:	68ba      	ldr	r2, [r7, #8]
 800e090:	8b12      	ldrh	r2, [r2, #24]
 800e092:	9202      	str	r2, [sp, #8]
 800e094:	2202      	movs	r2, #2
 800e096:	9201      	str	r2, [sp, #4]
 800e098:	9300      	str	r3, [sp, #0]
 800e09a:	4623      	mov	r3, r4
 800e09c:	4602      	mov	r2, r0
 800e09e:	6878      	ldr	r0, [r7, #4]
 800e0a0:	f000 fea6 	bl	800edf0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800e0a4:	68bb      	ldr	r3, [r7, #8]
 800e0a6:	7b19      	ldrb	r1, [r3, #12]
 800e0a8:	68bb      	ldr	r3, [r7, #8]
 800e0aa:	7bd8      	ldrb	r0, [r3, #15]
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e0b8:	68ba      	ldr	r2, [r7, #8]
 800e0ba:	8b52      	ldrh	r2, [r2, #26]
 800e0bc:	9202      	str	r2, [sp, #8]
 800e0be:	2202      	movs	r2, #2
 800e0c0:	9201      	str	r2, [sp, #4]
 800e0c2:	9300      	str	r3, [sp, #0]
 800e0c4:	4623      	mov	r3, r4
 800e0c6:	4602      	mov	r2, r0
 800e0c8:	6878      	ldr	r0, [r7, #4]
 800e0ca:	f000 fe91 	bl	800edf0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800e0ce:	68bb      	ldr	r3, [r7, #8]
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800e0d6:	68bb      	ldr	r3, [r7, #8]
 800e0d8:	7b5b      	ldrb	r3, [r3, #13]
 800e0da:	2200      	movs	r2, #0
 800e0dc:	4619      	mov	r1, r3
 800e0de:	6878      	ldr	r0, [r7, #4]
 800e0e0:	f001 f950 	bl	800f384 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800e0e4:	68bb      	ldr	r3, [r7, #8]
 800e0e6:	7b1b      	ldrb	r3, [r3, #12]
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	4619      	mov	r1, r3
 800e0ec:	6878      	ldr	r0, [r7, #4]
 800e0ee:	f001 f949 	bl	800f384 <USBH_LL_SetToggle>

  return USBH_OK;
 800e0f2:	2300      	movs	r3, #0
}
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	3714      	adds	r7, #20
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd90      	pop	{r4, r7, pc}

0800e0fc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b084      	sub	sp, #16
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e10a:	69db      	ldr	r3, [r3, #28]
 800e10c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	781b      	ldrb	r3, [r3, #0]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d00e      	beq.n	800e134 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	781b      	ldrb	r3, [r3, #0]
 800e11a:	4619      	mov	r1, r3
 800e11c:	6878      	ldr	r0, [r7, #4]
 800e11e:	f000 fe86 	bl	800ee2e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	781b      	ldrb	r3, [r3, #0]
 800e126:	4619      	mov	r1, r3
 800e128:	6878      	ldr	r0, [r7, #4]
 800e12a:	f000 feb1 	bl	800ee90 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	2200      	movs	r2, #0
 800e132:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	7b1b      	ldrb	r3, [r3, #12]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d00e      	beq.n	800e15a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	7b1b      	ldrb	r3, [r3, #12]
 800e140:	4619      	mov	r1, r3
 800e142:	6878      	ldr	r0, [r7, #4]
 800e144:	f000 fe73 	bl	800ee2e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	7b1b      	ldrb	r3, [r3, #12]
 800e14c:	4619      	mov	r1, r3
 800e14e:	6878      	ldr	r0, [r7, #4]
 800e150:	f000 fe9e 	bl	800ee90 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	2200      	movs	r2, #0
 800e158:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	7b5b      	ldrb	r3, [r3, #13]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d00e      	beq.n	800e180 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	7b5b      	ldrb	r3, [r3, #13]
 800e166:	4619      	mov	r1, r3
 800e168:	6878      	ldr	r0, [r7, #4]
 800e16a:	f000 fe60 	bl	800ee2e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	7b5b      	ldrb	r3, [r3, #13]
 800e172:	4619      	mov	r1, r3
 800e174:	6878      	ldr	r0, [r7, #4]
 800e176:	f000 fe8b 	bl	800ee90 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	2200      	movs	r2, #0
 800e17e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e186:	69db      	ldr	r3, [r3, #28]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d00b      	beq.n	800e1a4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e192:	69db      	ldr	r3, [r3, #28]
 800e194:	4618      	mov	r0, r3
 800e196:	f001 f9a3 	bl	800f4e0 <free>
    phost->pActiveClass->pData = 0U;
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800e1a4:	2300      	movs	r3, #0
}
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	3710      	adds	r7, #16
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	bd80      	pop	{r7, pc}

0800e1ae <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800e1ae:	b580      	push	{r7, lr}
 800e1b0:	b084      	sub	sp, #16
 800e1b2:	af00      	add	r7, sp, #0
 800e1b4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e1bc:	69db      	ldr	r3, [r3, #28]
 800e1be:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	3340      	adds	r3, #64	; 0x40
 800e1c4:	4619      	mov	r1, r3
 800e1c6:	6878      	ldr	r0, [r7, #4]
 800e1c8:	f000 f8b1 	bl	800e32e <GetLineCoding>
 800e1cc:	4603      	mov	r3, r0
 800e1ce:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800e1d0:	7afb      	ldrb	r3, [r7, #11]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d105      	bne.n	800e1e2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e1dc:	2102      	movs	r1, #2
 800e1de:	6878      	ldr	r0, [r7, #4]
 800e1e0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800e1e2:	7afb      	ldrb	r3, [r7, #11]
}
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	3710      	adds	r7, #16
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd80      	pop	{r7, pc}

0800e1ec <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b084      	sub	sp, #16
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800e1f4:	2301      	movs	r3, #1
 800e1f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e202:	69db      	ldr	r3, [r3, #28]
 800e204:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800e206:	68bb      	ldr	r3, [r7, #8]
 800e208:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800e20c:	2b04      	cmp	r3, #4
 800e20e:	d877      	bhi.n	800e300 <USBH_CDC_Process+0x114>
 800e210:	a201      	add	r2, pc, #4	; (adr r2, 800e218 <USBH_CDC_Process+0x2c>)
 800e212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e216:	bf00      	nop
 800e218:	0800e22d 	.word	0x0800e22d
 800e21c:	0800e233 	.word	0x0800e233
 800e220:	0800e263 	.word	0x0800e263
 800e224:	0800e2d7 	.word	0x0800e2d7
 800e228:	0800e2e5 	.word	0x0800e2e5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800e22c:	2300      	movs	r3, #0
 800e22e:	73fb      	strb	r3, [r7, #15]
      break;
 800e230:	e06d      	b.n	800e30e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800e232:	68bb      	ldr	r3, [r7, #8]
 800e234:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e236:	4619      	mov	r1, r3
 800e238:	6878      	ldr	r0, [r7, #4]
 800e23a:	f000 f897 	bl	800e36c <SetLineCoding>
 800e23e:	4603      	mov	r3, r0
 800e240:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e242:	7bbb      	ldrb	r3, [r7, #14]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d104      	bne.n	800e252 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800e248:	68bb      	ldr	r3, [r7, #8]
 800e24a:	2202      	movs	r2, #2
 800e24c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800e250:	e058      	b.n	800e304 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800e252:	7bbb      	ldrb	r3, [r7, #14]
 800e254:	2b01      	cmp	r3, #1
 800e256:	d055      	beq.n	800e304 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800e258:	68bb      	ldr	r3, [r7, #8]
 800e25a:	2204      	movs	r2, #4
 800e25c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800e260:	e050      	b.n	800e304 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800e262:	68bb      	ldr	r3, [r7, #8]
 800e264:	3340      	adds	r3, #64	; 0x40
 800e266:	4619      	mov	r1, r3
 800e268:	6878      	ldr	r0, [r7, #4]
 800e26a:	f000 f860 	bl	800e32e <GetLineCoding>
 800e26e:	4603      	mov	r3, r0
 800e270:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e272:	7bbb      	ldrb	r3, [r7, #14]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d126      	bne.n	800e2c6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800e278:	68bb      	ldr	r3, [r7, #8]
 800e27a:	2200      	movs	r2, #0
 800e27c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800e280:	68bb      	ldr	r3, [r7, #8]
 800e282:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800e286:	68bb      	ldr	r3, [r7, #8]
 800e288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e28a:	791b      	ldrb	r3, [r3, #4]
 800e28c:	429a      	cmp	r2, r3
 800e28e:	d13b      	bne.n	800e308 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800e290:	68bb      	ldr	r3, [r7, #8]
 800e292:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800e296:	68bb      	ldr	r3, [r7, #8]
 800e298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e29a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800e29c:	429a      	cmp	r2, r3
 800e29e:	d133      	bne.n	800e308 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800e2a0:	68bb      	ldr	r3, [r7, #8]
 800e2a2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800e2a6:	68bb      	ldr	r3, [r7, #8]
 800e2a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e2aa:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800e2ac:	429a      	cmp	r2, r3
 800e2ae:	d12b      	bne.n	800e308 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800e2b0:	68bb      	ldr	r3, [r7, #8]
 800e2b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e2b4:	68bb      	ldr	r3, [r7, #8]
 800e2b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e2b8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800e2ba:	429a      	cmp	r2, r3
 800e2bc:	d124      	bne.n	800e308 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800e2be:	6878      	ldr	r0, [r7, #4]
 800e2c0:	f000 f95a 	bl	800e578 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800e2c4:	e020      	b.n	800e308 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800e2c6:	7bbb      	ldrb	r3, [r7, #14]
 800e2c8:	2b01      	cmp	r3, #1
 800e2ca:	d01d      	beq.n	800e308 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800e2cc:	68bb      	ldr	r3, [r7, #8]
 800e2ce:	2204      	movs	r2, #4
 800e2d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800e2d4:	e018      	b.n	800e308 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800e2d6:	6878      	ldr	r0, [r7, #4]
 800e2d8:	f000 f867 	bl	800e3aa <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800e2dc:	6878      	ldr	r0, [r7, #4]
 800e2de:	f000 f8dc 	bl	800e49a <CDC_ProcessReception>
      break;
 800e2e2:	e014      	b.n	800e30e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800e2e4:	2100      	movs	r1, #0
 800e2e6:	6878      	ldr	r0, [r7, #4]
 800e2e8:	f000 fb0a 	bl	800e900 <USBH_ClrFeature>
 800e2ec:	4603      	mov	r3, r0
 800e2ee:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e2f0:	7bbb      	ldrb	r3, [r7, #14]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d10a      	bne.n	800e30c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800e2f6:	68bb      	ldr	r3, [r7, #8]
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800e2fe:	e005      	b.n	800e30c <USBH_CDC_Process+0x120>

    default:
      break;
 800e300:	bf00      	nop
 800e302:	e004      	b.n	800e30e <USBH_CDC_Process+0x122>
      break;
 800e304:	bf00      	nop
 800e306:	e002      	b.n	800e30e <USBH_CDC_Process+0x122>
      break;
 800e308:	bf00      	nop
 800e30a:	e000      	b.n	800e30e <USBH_CDC_Process+0x122>
      break;
 800e30c:	bf00      	nop

  }

  return status;
 800e30e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e310:	4618      	mov	r0, r3
 800e312:	3710      	adds	r7, #16
 800e314:	46bd      	mov	sp, r7
 800e316:	bd80      	pop	{r7, pc}

0800e318 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800e318:	b480      	push	{r7}
 800e31a:	b083      	sub	sp, #12
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800e320:	2300      	movs	r3, #0
}
 800e322:	4618      	mov	r0, r3
 800e324:	370c      	adds	r7, #12
 800e326:	46bd      	mov	sp, r7
 800e328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32c:	4770      	bx	lr

0800e32e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800e32e:	b580      	push	{r7, lr}
 800e330:	b082      	sub	sp, #8
 800e332:	af00      	add	r7, sp, #0
 800e334:	6078      	str	r0, [r7, #4]
 800e336:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	22a1      	movs	r2, #161	; 0xa1
 800e33c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	2221      	movs	r2, #33	; 0x21
 800e342:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	2200      	movs	r2, #0
 800e348:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	2200      	movs	r2, #0
 800e34e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2207      	movs	r2, #7
 800e354:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800e356:	683b      	ldr	r3, [r7, #0]
 800e358:	2207      	movs	r2, #7
 800e35a:	4619      	mov	r1, r3
 800e35c:	6878      	ldr	r0, [r7, #4]
 800e35e:	f000 faf3 	bl	800e948 <USBH_CtlReq>
 800e362:	4603      	mov	r3, r0
}
 800e364:	4618      	mov	r0, r3
 800e366:	3708      	adds	r7, #8
 800e368:	46bd      	mov	sp, r7
 800e36a:	bd80      	pop	{r7, pc}

0800e36c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b082      	sub	sp, #8
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
 800e374:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	2221      	movs	r2, #33	; 0x21
 800e37a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	2220      	movs	r2, #32
 800e380:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	2200      	movs	r2, #0
 800e386:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	2200      	movs	r2, #0
 800e38c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	2207      	movs	r2, #7
 800e392:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800e394:	683b      	ldr	r3, [r7, #0]
 800e396:	2207      	movs	r2, #7
 800e398:	4619      	mov	r1, r3
 800e39a:	6878      	ldr	r0, [r7, #4]
 800e39c:	f000 fad4 	bl	800e948 <USBH_CtlReq>
 800e3a0:	4603      	mov	r3, r0
}
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	3708      	adds	r7, #8
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	bd80      	pop	{r7, pc}

0800e3aa <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800e3aa:	b580      	push	{r7, lr}
 800e3ac:	b086      	sub	sp, #24
 800e3ae:	af02      	add	r7, sp, #8
 800e3b0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e3b8:	69db      	ldr	r3, [r3, #28]
 800e3ba:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e3bc:	2300      	movs	r3, #0
 800e3be:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800e3c6:	2b01      	cmp	r3, #1
 800e3c8:	d002      	beq.n	800e3d0 <CDC_ProcessTransmission+0x26>
 800e3ca:	2b02      	cmp	r3, #2
 800e3cc:	d025      	beq.n	800e41a <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800e3ce:	e060      	b.n	800e492 <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3d4:	68fa      	ldr	r2, [r7, #12]
 800e3d6:	8b12      	ldrh	r2, [r2, #24]
 800e3d8:	4293      	cmp	r3, r2
 800e3da:	d90c      	bls.n	800e3f6 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	69d9      	ldr	r1, [r3, #28]
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	8b1a      	ldrh	r2, [r3, #24]
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	7b58      	ldrb	r0, [r3, #13]
 800e3e8:	2301      	movs	r3, #1
 800e3ea:	9300      	str	r3, [sp, #0]
 800e3ec:	4603      	mov	r3, r0
 800e3ee:	6878      	ldr	r0, [r7, #4]
 800e3f0:	f000 fcbb 	bl	800ed6a <USBH_BulkSendData>
 800e3f4:	e00c      	b.n	800e410 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800e3fe:	b29a      	uxth	r2, r3
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	7b58      	ldrb	r0, [r3, #13]
 800e404:	2301      	movs	r3, #1
 800e406:	9300      	str	r3, [sp, #0]
 800e408:	4603      	mov	r3, r0
 800e40a:	6878      	ldr	r0, [r7, #4]
 800e40c:	f000 fcad 	bl	800ed6a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	2202      	movs	r2, #2
 800e414:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800e418:	e03b      	b.n	800e492 <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	7b5b      	ldrb	r3, [r3, #13]
 800e41e:	4619      	mov	r1, r3
 800e420:	6878      	ldr	r0, [r7, #4]
 800e422:	f000 ff85 	bl	800f330 <USBH_LL_GetURBState>
 800e426:	4603      	mov	r3, r0
 800e428:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800e42a:	7afb      	ldrb	r3, [r7, #11]
 800e42c:	2b01      	cmp	r3, #1
 800e42e:	d128      	bne.n	800e482 <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e434:	68fa      	ldr	r2, [r7, #12]
 800e436:	8b12      	ldrh	r2, [r2, #24]
 800e438:	4293      	cmp	r3, r2
 800e43a:	d90e      	bls.n	800e45a <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e440:	68fa      	ldr	r2, [r7, #12]
 800e442:	8b12      	ldrh	r2, [r2, #24]
 800e444:	1a9a      	subs	r2, r3, r2
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	69db      	ldr	r3, [r3, #28]
 800e44e:	68fa      	ldr	r2, [r7, #12]
 800e450:	8b12      	ldrh	r2, [r2, #24]
 800e452:	441a      	add	r2, r3
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	61da      	str	r2, [r3, #28]
 800e458:	e002      	b.n	800e460 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	2200      	movs	r2, #0
 800e45e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e464:	2b00      	cmp	r3, #0
 800e466:	d004      	beq.n	800e472 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	2201      	movs	r2, #1
 800e46c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800e470:	e00e      	b.n	800e490 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	2200      	movs	r2, #0
 800e476:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800e47a:	6878      	ldr	r0, [r7, #4]
 800e47c:	f000 f868 	bl	800e550 <USBH_CDC_TransmitCallback>
      break;
 800e480:	e006      	b.n	800e490 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 800e482:	7afb      	ldrb	r3, [r7, #11]
 800e484:	2b02      	cmp	r3, #2
 800e486:	d103      	bne.n	800e490 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	2201      	movs	r2, #1
 800e48c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800e490:	bf00      	nop
  }
}
 800e492:	bf00      	nop
 800e494:	3710      	adds	r7, #16
 800e496:	46bd      	mov	sp, r7
 800e498:	bd80      	pop	{r7, pc}

0800e49a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800e49a:	b580      	push	{r7, lr}
 800e49c:	b086      	sub	sp, #24
 800e49e:	af00      	add	r7, sp, #0
 800e4a0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e4a8:	69db      	ldr	r3, [r3, #28]
 800e4aa:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800e4b0:	697b      	ldr	r3, [r7, #20]
 800e4b2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800e4b6:	2b03      	cmp	r3, #3
 800e4b8:	d002      	beq.n	800e4c0 <CDC_ProcessReception+0x26>
 800e4ba:	2b04      	cmp	r3, #4
 800e4bc:	d00e      	beq.n	800e4dc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800e4be:	e043      	b.n	800e548 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800e4c0:	697b      	ldr	r3, [r7, #20]
 800e4c2:	6a19      	ldr	r1, [r3, #32]
 800e4c4:	697b      	ldr	r3, [r7, #20]
 800e4c6:	8b5a      	ldrh	r2, [r3, #26]
 800e4c8:	697b      	ldr	r3, [r7, #20]
 800e4ca:	7b1b      	ldrb	r3, [r3, #12]
 800e4cc:	6878      	ldr	r0, [r7, #4]
 800e4ce:	f000 fc71 	bl	800edb4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800e4d2:	697b      	ldr	r3, [r7, #20]
 800e4d4:	2204      	movs	r2, #4
 800e4d6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800e4da:	e035      	b.n	800e548 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800e4dc:	697b      	ldr	r3, [r7, #20]
 800e4de:	7b1b      	ldrb	r3, [r3, #12]
 800e4e0:	4619      	mov	r1, r3
 800e4e2:	6878      	ldr	r0, [r7, #4]
 800e4e4:	f000 ff24 	bl	800f330 <USBH_LL_GetURBState>
 800e4e8:	4603      	mov	r3, r0
 800e4ea:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800e4ec:	7cfb      	ldrb	r3, [r7, #19]
 800e4ee:	2b01      	cmp	r3, #1
 800e4f0:	d129      	bne.n	800e546 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800e4f2:	697b      	ldr	r3, [r7, #20]
 800e4f4:	7b1b      	ldrb	r3, [r3, #12]
 800e4f6:	4619      	mov	r1, r3
 800e4f8:	6878      	ldr	r0, [r7, #4]
 800e4fa:	f000 fe87 	bl	800f20c <USBH_LL_GetLastXferSize>
 800e4fe:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800e500:	697b      	ldr	r3, [r7, #20]
 800e502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e504:	68fa      	ldr	r2, [r7, #12]
 800e506:	429a      	cmp	r2, r3
 800e508:	d016      	beq.n	800e538 <CDC_ProcessReception+0x9e>
 800e50a:	697b      	ldr	r3, [r7, #20]
 800e50c:	8b5b      	ldrh	r3, [r3, #26]
 800e50e:	461a      	mov	r2, r3
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	4293      	cmp	r3, r2
 800e514:	d910      	bls.n	800e538 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800e516:	697b      	ldr	r3, [r7, #20]
 800e518:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	1ad2      	subs	r2, r2, r3
 800e51e:	697b      	ldr	r3, [r7, #20]
 800e520:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800e522:	697b      	ldr	r3, [r7, #20]
 800e524:	6a1a      	ldr	r2, [r3, #32]
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	441a      	add	r2, r3
 800e52a:	697b      	ldr	r3, [r7, #20]
 800e52c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800e52e:	697b      	ldr	r3, [r7, #20]
 800e530:	2203      	movs	r2, #3
 800e532:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800e536:	e006      	b.n	800e546 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800e538:	697b      	ldr	r3, [r7, #20]
 800e53a:	2200      	movs	r2, #0
 800e53c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800e540:	6878      	ldr	r0, [r7, #4]
 800e542:	f000 f80f 	bl	800e564 <USBH_CDC_ReceiveCallback>
      break;
 800e546:	bf00      	nop
  }
}
 800e548:	bf00      	nop
 800e54a:	3718      	adds	r7, #24
 800e54c:	46bd      	mov	sp, r7
 800e54e:	bd80      	pop	{r7, pc}

0800e550 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800e550:	b480      	push	{r7}
 800e552:	b083      	sub	sp, #12
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e558:	bf00      	nop
 800e55a:	370c      	adds	r7, #12
 800e55c:	46bd      	mov	sp, r7
 800e55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e562:	4770      	bx	lr

0800e564 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800e564:	b480      	push	{r7}
 800e566:	b083      	sub	sp, #12
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e56c:	bf00      	nop
 800e56e:	370c      	adds	r7, #12
 800e570:	46bd      	mov	sp, r7
 800e572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e576:	4770      	bx	lr

0800e578 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800e578:	b480      	push	{r7}
 800e57a:	b083      	sub	sp, #12
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e580:	bf00      	nop
 800e582:	370c      	adds	r7, #12
 800e584:	46bd      	mov	sp, r7
 800e586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58a:	4770      	bx	lr

0800e58c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b084      	sub	sp, #16
 800e590:	af00      	add	r7, sp, #0
 800e592:	60f8      	str	r0, [r7, #12]
 800e594:	60b9      	str	r1, [r7, #8]
 800e596:	4613      	mov	r3, r2
 800e598:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d101      	bne.n	800e5a4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800e5a0:	2302      	movs	r3, #2
 800e5a2:	e029      	b.n	800e5f8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	79fa      	ldrb	r2, [r7, #7]
 800e5a8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800e5bc:	68f8      	ldr	r0, [r7, #12]
 800e5be:	f000 f81f 	bl	800e600 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	2200      	movs	r2, #0
 800e5de:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800e5e2:	68bb      	ldr	r3, [r7, #8]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d003      	beq.n	800e5f0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	68ba      	ldr	r2, [r7, #8]
 800e5ec:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800e5f0:	68f8      	ldr	r0, [r7, #12]
 800e5f2:	f000 fd99 	bl	800f128 <USBH_LL_Init>

  return USBH_OK;
 800e5f6:	2300      	movs	r3, #0
}
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	3710      	adds	r7, #16
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	bd80      	pop	{r7, pc}

0800e600 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800e600:	b480      	push	{r7}
 800e602:	b085      	sub	sp, #20
 800e604:	af00      	add	r7, sp, #0
 800e606:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800e608:	2300      	movs	r3, #0
 800e60a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e60c:	2300      	movs	r3, #0
 800e60e:	60fb      	str	r3, [r7, #12]
 800e610:	e009      	b.n	800e626 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800e612:	687a      	ldr	r2, [r7, #4]
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	33e0      	adds	r3, #224	; 0xe0
 800e618:	009b      	lsls	r3, r3, #2
 800e61a:	4413      	add	r3, r2
 800e61c:	2200      	movs	r2, #0
 800e61e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	3301      	adds	r3, #1
 800e624:	60fb      	str	r3, [r7, #12]
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	2b0e      	cmp	r3, #14
 800e62a:	d9f2      	bls.n	800e612 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e62c:	2300      	movs	r3, #0
 800e62e:	60fb      	str	r3, [r7, #12]
 800e630:	e009      	b.n	800e646 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800e632:	687a      	ldr	r2, [r7, #4]
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	4413      	add	r3, r2
 800e638:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800e63c:	2200      	movs	r2, #0
 800e63e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	3301      	adds	r3, #1
 800e644:	60fb      	str	r3, [r7, #12]
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e64c:	d3f1      	bcc.n	800e632 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	2200      	movs	r2, #0
 800e652:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2200      	movs	r2, #0
 800e658:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	2201      	movs	r2, #1
 800e65e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	2200      	movs	r2, #0
 800e664:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	2201      	movs	r2, #1
 800e66c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	2240      	movs	r2, #64	; 0x40
 800e672:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	2200      	movs	r2, #0
 800e678:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	2200      	movs	r2, #0
 800e67e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	2201      	movs	r2, #1
 800e686:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	2200      	movs	r2, #0
 800e68e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	2200      	movs	r2, #0
 800e696:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800e69a:	2300      	movs	r3, #0
}
 800e69c:	4618      	mov	r0, r3
 800e69e:	3714      	adds	r7, #20
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a6:	4770      	bx	lr

0800e6a8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800e6a8:	b480      	push	{r7}
 800e6aa:	b085      	sub	sp, #20
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
 800e6b0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800e6b6:	683b      	ldr	r3, [r7, #0]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d016      	beq.n	800e6ea <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d10e      	bne.n	800e6e4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e6cc:	1c59      	adds	r1, r3, #1
 800e6ce:	687a      	ldr	r2, [r7, #4]
 800e6d0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800e6d4:	687a      	ldr	r2, [r7, #4]
 800e6d6:	33de      	adds	r3, #222	; 0xde
 800e6d8:	6839      	ldr	r1, [r7, #0]
 800e6da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800e6de:	2300      	movs	r3, #0
 800e6e0:	73fb      	strb	r3, [r7, #15]
 800e6e2:	e004      	b.n	800e6ee <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800e6e4:	2302      	movs	r3, #2
 800e6e6:	73fb      	strb	r3, [r7, #15]
 800e6e8:	e001      	b.n	800e6ee <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800e6ea:	2302      	movs	r3, #2
 800e6ec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e6ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	3714      	adds	r7, #20
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fa:	4770      	bx	lr

0800e6fc <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800e6fc:	b480      	push	{r7}
 800e6fe:	b085      	sub	sp, #20
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
 800e704:	460b      	mov	r3, r1
 800e706:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800e708:	2300      	movs	r3, #0
 800e70a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800e712:	78fa      	ldrb	r2, [r7, #3]
 800e714:	429a      	cmp	r2, r3
 800e716:	d204      	bcs.n	800e722 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	78fa      	ldrb	r2, [r7, #3]
 800e71c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800e720:	e001      	b.n	800e726 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800e722:	2302      	movs	r3, #2
 800e724:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e726:	7bfb      	ldrb	r3, [r7, #15]
}
 800e728:	4618      	mov	r0, r3
 800e72a:	3714      	adds	r7, #20
 800e72c:	46bd      	mov	sp, r7
 800e72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e732:	4770      	bx	lr

0800e734 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800e734:	b480      	push	{r7}
 800e736:	b087      	sub	sp, #28
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
 800e73c:	4608      	mov	r0, r1
 800e73e:	4611      	mov	r1, r2
 800e740:	461a      	mov	r2, r3
 800e742:	4603      	mov	r3, r0
 800e744:	70fb      	strb	r3, [r7, #3]
 800e746:	460b      	mov	r3, r1
 800e748:	70bb      	strb	r3, [r7, #2]
 800e74a:	4613      	mov	r3, r2
 800e74c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800e74e:	2300      	movs	r3, #0
 800e750:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800e752:	2300      	movs	r3, #0
 800e754:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800e75c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e75e:	e025      	b.n	800e7ac <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800e760:	7dfb      	ldrb	r3, [r7, #23]
 800e762:	221a      	movs	r2, #26
 800e764:	fb02 f303 	mul.w	r3, r2, r3
 800e768:	3308      	adds	r3, #8
 800e76a:	68fa      	ldr	r2, [r7, #12]
 800e76c:	4413      	add	r3, r2
 800e76e:	3302      	adds	r3, #2
 800e770:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800e772:	693b      	ldr	r3, [r7, #16]
 800e774:	795b      	ldrb	r3, [r3, #5]
 800e776:	78fa      	ldrb	r2, [r7, #3]
 800e778:	429a      	cmp	r2, r3
 800e77a:	d002      	beq.n	800e782 <USBH_FindInterface+0x4e>
 800e77c:	78fb      	ldrb	r3, [r7, #3]
 800e77e:	2bff      	cmp	r3, #255	; 0xff
 800e780:	d111      	bne.n	800e7a6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e782:	693b      	ldr	r3, [r7, #16]
 800e784:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800e786:	78ba      	ldrb	r2, [r7, #2]
 800e788:	429a      	cmp	r2, r3
 800e78a:	d002      	beq.n	800e792 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e78c:	78bb      	ldrb	r3, [r7, #2]
 800e78e:	2bff      	cmp	r3, #255	; 0xff
 800e790:	d109      	bne.n	800e7a6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800e792:	693b      	ldr	r3, [r7, #16]
 800e794:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e796:	787a      	ldrb	r2, [r7, #1]
 800e798:	429a      	cmp	r2, r3
 800e79a:	d002      	beq.n	800e7a2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800e79c:	787b      	ldrb	r3, [r7, #1]
 800e79e:	2bff      	cmp	r3, #255	; 0xff
 800e7a0:	d101      	bne.n	800e7a6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800e7a2:	7dfb      	ldrb	r3, [r7, #23]
 800e7a4:	e006      	b.n	800e7b4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800e7a6:	7dfb      	ldrb	r3, [r7, #23]
 800e7a8:	3301      	adds	r3, #1
 800e7aa:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e7ac:	7dfb      	ldrb	r3, [r7, #23]
 800e7ae:	2b01      	cmp	r3, #1
 800e7b0:	d9d6      	bls.n	800e760 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800e7b2:	23ff      	movs	r3, #255	; 0xff
}
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	371c      	adds	r7, #28
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7be:	4770      	bx	lr

0800e7c0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b082      	sub	sp, #8
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800e7c8:	6878      	ldr	r0, [r7, #4]
 800e7ca:	f000 fce9 	bl	800f1a0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800e7ce:	2101      	movs	r1, #1
 800e7d0:	6878      	ldr	r0, [r7, #4]
 800e7d2:	f000 fdc0 	bl	800f356 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800e7d6:	2300      	movs	r3, #0
}
 800e7d8:	4618      	mov	r0, r3
 800e7da:	3708      	adds	r7, #8
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	bd80      	pop	{r7, pc}

0800e7e0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800e7e0:	b480      	push	{r7}
 800e7e2:	b083      	sub	sp, #12
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
 800e7e8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	683a      	ldr	r2, [r7, #0]
 800e7ee:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800e7f2:	bf00      	nop
 800e7f4:	370c      	adds	r7, #12
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fc:	4770      	bx	lr

0800e7fe <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800e7fe:	b580      	push	{r7, lr}
 800e800:	b082      	sub	sp, #8
 800e802:	af00      	add	r7, sp, #0
 800e804:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e80c:	1c5a      	adds	r2, r3, #1
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800e814:	6878      	ldr	r0, [r7, #4]
 800e816:	f000 f804 	bl	800e822 <USBH_HandleSof>
}
 800e81a:	bf00      	nop
 800e81c:	3708      	adds	r7, #8
 800e81e:	46bd      	mov	sp, r7
 800e820:	bd80      	pop	{r7, pc}

0800e822 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800e822:	b580      	push	{r7, lr}
 800e824:	b082      	sub	sp, #8
 800e826:	af00      	add	r7, sp, #0
 800e828:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	781b      	ldrb	r3, [r3, #0]
 800e82e:	b2db      	uxtb	r3, r3
 800e830:	2b0b      	cmp	r3, #11
 800e832:	d10a      	bne.n	800e84a <USBH_HandleSof+0x28>
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d005      	beq.n	800e84a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e844:	699b      	ldr	r3, [r3, #24]
 800e846:	6878      	ldr	r0, [r7, #4]
 800e848:	4798      	blx	r3
  }
}
 800e84a:	bf00      	nop
 800e84c:	3708      	adds	r7, #8
 800e84e:	46bd      	mov	sp, r7
 800e850:	bd80      	pop	{r7, pc}

0800e852 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800e852:	b480      	push	{r7}
 800e854:	b083      	sub	sp, #12
 800e856:	af00      	add	r7, sp, #0
 800e858:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	2201      	movs	r2, #1
 800e85e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800e862:	bf00      	nop
}
 800e864:	370c      	adds	r7, #12
 800e866:	46bd      	mov	sp, r7
 800e868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86c:	4770      	bx	lr

0800e86e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800e86e:	b480      	push	{r7}
 800e870:	b083      	sub	sp, #12
 800e872:	af00      	add	r7, sp, #0
 800e874:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	2200      	movs	r2, #0
 800e87a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800e87e:	bf00      	nop
}
 800e880:	370c      	adds	r7, #12
 800e882:	46bd      	mov	sp, r7
 800e884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e888:	4770      	bx	lr

0800e88a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800e88a:	b480      	push	{r7}
 800e88c:	b083      	sub	sp, #12
 800e88e:	af00      	add	r7, sp, #0
 800e890:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	2201      	movs	r2, #1
 800e896:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	2200      	movs	r2, #0
 800e89e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800e8aa:	2300      	movs	r3, #0
}
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	370c      	adds	r7, #12
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b6:	4770      	bx	lr

0800e8b8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b082      	sub	sp, #8
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	2201      	movs	r2, #1
 800e8c4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800e8d8:	6878      	ldr	r0, [r7, #4]
 800e8da:	f000 fc7c 	bl	800f1d6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	791b      	ldrb	r3, [r3, #4]
 800e8e2:	4619      	mov	r1, r3
 800e8e4:	6878      	ldr	r0, [r7, #4]
 800e8e6:	f000 fad3 	bl	800ee90 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	795b      	ldrb	r3, [r3, #5]
 800e8ee:	4619      	mov	r1, r3
 800e8f0:	6878      	ldr	r0, [r7, #4]
 800e8f2:	f000 facd 	bl	800ee90 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800e8f6:	2300      	movs	r3, #0
}
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	3708      	adds	r7, #8
 800e8fc:	46bd      	mov	sp, r7
 800e8fe:	bd80      	pop	{r7, pc}

0800e900 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800e900:	b580      	push	{r7, lr}
 800e902:	b082      	sub	sp, #8
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
 800e908:	460b      	mov	r3, r1
 800e90a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	789b      	ldrb	r3, [r3, #2]
 800e910:	2b01      	cmp	r3, #1
 800e912:	d10f      	bne.n	800e934 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	2202      	movs	r2, #2
 800e918:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	2201      	movs	r2, #1
 800e91e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	2200      	movs	r2, #0
 800e924:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800e926:	78fb      	ldrb	r3, [r7, #3]
 800e928:	b29a      	uxth	r2, r3
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	2200      	movs	r2, #0
 800e932:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800e934:	2200      	movs	r2, #0
 800e936:	2100      	movs	r1, #0
 800e938:	6878      	ldr	r0, [r7, #4]
 800e93a:	f000 f805 	bl	800e948 <USBH_CtlReq>
 800e93e:	4603      	mov	r3, r0
}
 800e940:	4618      	mov	r0, r3
 800e942:	3708      	adds	r7, #8
 800e944:	46bd      	mov	sp, r7
 800e946:	bd80      	pop	{r7, pc}

0800e948 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b086      	sub	sp, #24
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	60f8      	str	r0, [r7, #12]
 800e950:	60b9      	str	r1, [r7, #8]
 800e952:	4613      	mov	r3, r2
 800e954:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800e956:	2301      	movs	r3, #1
 800e958:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	789b      	ldrb	r3, [r3, #2]
 800e95e:	2b01      	cmp	r3, #1
 800e960:	d002      	beq.n	800e968 <USBH_CtlReq+0x20>
 800e962:	2b02      	cmp	r3, #2
 800e964:	d00f      	beq.n	800e986 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800e966:	e027      	b.n	800e9b8 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	68ba      	ldr	r2, [r7, #8]
 800e96c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	88fa      	ldrh	r2, [r7, #6]
 800e972:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	2201      	movs	r2, #1
 800e978:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	2202      	movs	r2, #2
 800e97e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800e980:	2301      	movs	r3, #1
 800e982:	75fb      	strb	r3, [r7, #23]
      break;
 800e984:	e018      	b.n	800e9b8 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800e986:	68f8      	ldr	r0, [r7, #12]
 800e988:	f000 f81c 	bl	800e9c4 <USBH_HandleControl>
 800e98c:	4603      	mov	r3, r0
 800e98e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800e990:	7dfb      	ldrb	r3, [r7, #23]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d002      	beq.n	800e99c <USBH_CtlReq+0x54>
 800e996:	7dfb      	ldrb	r3, [r7, #23]
 800e998:	2b03      	cmp	r3, #3
 800e99a:	d106      	bne.n	800e9aa <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	2201      	movs	r2, #1
 800e9a0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	761a      	strb	r2, [r3, #24]
      break;
 800e9a8:	e005      	b.n	800e9b6 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800e9aa:	7dfb      	ldrb	r3, [r7, #23]
 800e9ac:	2b02      	cmp	r3, #2
 800e9ae:	d102      	bne.n	800e9b6 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	2201      	movs	r2, #1
 800e9b4:	709a      	strb	r2, [r3, #2]
      break;
 800e9b6:	bf00      	nop
  }
  return status;
 800e9b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	3718      	adds	r7, #24
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	bd80      	pop	{r7, pc}
	...

0800e9c4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b086      	sub	sp, #24
 800e9c8:	af02      	add	r7, sp, #8
 800e9ca:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800e9cc:	2301      	movs	r3, #1
 800e9ce:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	7e1b      	ldrb	r3, [r3, #24]
 800e9d8:	3b01      	subs	r3, #1
 800e9da:	2b0a      	cmp	r3, #10
 800e9dc:	f200 8158 	bhi.w	800ec90 <USBH_HandleControl+0x2cc>
 800e9e0:	a201      	add	r2, pc, #4	; (adr r2, 800e9e8 <USBH_HandleControl+0x24>)
 800e9e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9e6:	bf00      	nop
 800e9e8:	0800ea15 	.word	0x0800ea15
 800e9ec:	0800ea2f 	.word	0x0800ea2f
 800e9f0:	0800ea99 	.word	0x0800ea99
 800e9f4:	0800eabf 	.word	0x0800eabf
 800e9f8:	0800eaf7 	.word	0x0800eaf7
 800e9fc:	0800eb23 	.word	0x0800eb23
 800ea00:	0800eb75 	.word	0x0800eb75
 800ea04:	0800eb97 	.word	0x0800eb97
 800ea08:	0800ebd3 	.word	0x0800ebd3
 800ea0c:	0800ebfb 	.word	0x0800ebfb
 800ea10:	0800ec39 	.word	0x0800ec39
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	f103 0110 	add.w	r1, r3, #16
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	795b      	ldrb	r3, [r3, #5]
 800ea1e:	461a      	mov	r2, r3
 800ea20:	6878      	ldr	r0, [r7, #4]
 800ea22:	f000 f945 	bl	800ecb0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	2202      	movs	r2, #2
 800ea2a:	761a      	strb	r2, [r3, #24]
      break;
 800ea2c:	e13b      	b.n	800eca6 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	795b      	ldrb	r3, [r3, #5]
 800ea32:	4619      	mov	r1, r3
 800ea34:	6878      	ldr	r0, [r7, #4]
 800ea36:	f000 fc7b 	bl	800f330 <USBH_LL_GetURBState>
 800ea3a:	4603      	mov	r3, r0
 800ea3c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800ea3e:	7bbb      	ldrb	r3, [r7, #14]
 800ea40:	2b01      	cmp	r3, #1
 800ea42:	d11e      	bne.n	800ea82 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	7c1b      	ldrb	r3, [r3, #16]
 800ea48:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ea4c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	8adb      	ldrh	r3, [r3, #22]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d00a      	beq.n	800ea6c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800ea56:	7b7b      	ldrb	r3, [r7, #13]
 800ea58:	2b80      	cmp	r3, #128	; 0x80
 800ea5a:	d103      	bne.n	800ea64 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	2203      	movs	r2, #3
 800ea60:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ea62:	e117      	b.n	800ec94 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	2205      	movs	r2, #5
 800ea68:	761a      	strb	r2, [r3, #24]
      break;
 800ea6a:	e113      	b.n	800ec94 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 800ea6c:	7b7b      	ldrb	r3, [r7, #13]
 800ea6e:	2b80      	cmp	r3, #128	; 0x80
 800ea70:	d103      	bne.n	800ea7a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	2209      	movs	r2, #9
 800ea76:	761a      	strb	r2, [r3, #24]
      break;
 800ea78:	e10c      	b.n	800ec94 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	2207      	movs	r2, #7
 800ea7e:	761a      	strb	r2, [r3, #24]
      break;
 800ea80:	e108      	b.n	800ec94 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ea82:	7bbb      	ldrb	r3, [r7, #14]
 800ea84:	2b04      	cmp	r3, #4
 800ea86:	d003      	beq.n	800ea90 <USBH_HandleControl+0xcc>
 800ea88:	7bbb      	ldrb	r3, [r7, #14]
 800ea8a:	2b02      	cmp	r3, #2
 800ea8c:	f040 8102 	bne.w	800ec94 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	220b      	movs	r2, #11
 800ea94:	761a      	strb	r2, [r3, #24]
      break;
 800ea96:	e0fd      	b.n	800ec94 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ea9e:	b29a      	uxth	r2, r3
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	6899      	ldr	r1, [r3, #8]
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	899a      	ldrh	r2, [r3, #12]
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	791b      	ldrb	r3, [r3, #4]
 800eab0:	6878      	ldr	r0, [r7, #4]
 800eab2:	f000 f93c 	bl	800ed2e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	2204      	movs	r2, #4
 800eaba:	761a      	strb	r2, [r3, #24]
      break;
 800eabc:	e0f3      	b.n	800eca6 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	791b      	ldrb	r3, [r3, #4]
 800eac2:	4619      	mov	r1, r3
 800eac4:	6878      	ldr	r0, [r7, #4]
 800eac6:	f000 fc33 	bl	800f330 <USBH_LL_GetURBState>
 800eaca:	4603      	mov	r3, r0
 800eacc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800eace:	7bbb      	ldrb	r3, [r7, #14]
 800ead0:	2b01      	cmp	r3, #1
 800ead2:	d102      	bne.n	800eada <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	2209      	movs	r2, #9
 800ead8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800eada:	7bbb      	ldrb	r3, [r7, #14]
 800eadc:	2b05      	cmp	r3, #5
 800eade:	d102      	bne.n	800eae6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800eae0:	2303      	movs	r3, #3
 800eae2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800eae4:	e0d8      	b.n	800ec98 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800eae6:	7bbb      	ldrb	r3, [r7, #14]
 800eae8:	2b04      	cmp	r3, #4
 800eaea:	f040 80d5 	bne.w	800ec98 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	220b      	movs	r2, #11
 800eaf2:	761a      	strb	r2, [r3, #24]
      break;
 800eaf4:	e0d0      	b.n	800ec98 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	6899      	ldr	r1, [r3, #8]
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	899a      	ldrh	r2, [r3, #12]
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	7958      	ldrb	r0, [r3, #5]
 800eb02:	2301      	movs	r3, #1
 800eb04:	9300      	str	r3, [sp, #0]
 800eb06:	4603      	mov	r3, r0
 800eb08:	6878      	ldr	r0, [r7, #4]
 800eb0a:	f000 f8eb 	bl	800ece4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800eb14:	b29a      	uxth	r2, r3
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	2206      	movs	r2, #6
 800eb1e:	761a      	strb	r2, [r3, #24]
      break;
 800eb20:	e0c1      	b.n	800eca6 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	795b      	ldrb	r3, [r3, #5]
 800eb26:	4619      	mov	r1, r3
 800eb28:	6878      	ldr	r0, [r7, #4]
 800eb2a:	f000 fc01 	bl	800f330 <USBH_LL_GetURBState>
 800eb2e:	4603      	mov	r3, r0
 800eb30:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800eb32:	7bbb      	ldrb	r3, [r7, #14]
 800eb34:	2b01      	cmp	r3, #1
 800eb36:	d103      	bne.n	800eb40 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	2207      	movs	r2, #7
 800eb3c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800eb3e:	e0ad      	b.n	800ec9c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 800eb40:	7bbb      	ldrb	r3, [r7, #14]
 800eb42:	2b05      	cmp	r3, #5
 800eb44:	d105      	bne.n	800eb52 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	220c      	movs	r2, #12
 800eb4a:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800eb4c:	2303      	movs	r3, #3
 800eb4e:	73fb      	strb	r3, [r7, #15]
      break;
 800eb50:	e0a4      	b.n	800ec9c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800eb52:	7bbb      	ldrb	r3, [r7, #14]
 800eb54:	2b02      	cmp	r3, #2
 800eb56:	d103      	bne.n	800eb60 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	2205      	movs	r2, #5
 800eb5c:	761a      	strb	r2, [r3, #24]
      break;
 800eb5e:	e09d      	b.n	800ec9c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 800eb60:	7bbb      	ldrb	r3, [r7, #14]
 800eb62:	2b04      	cmp	r3, #4
 800eb64:	f040 809a 	bne.w	800ec9c <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	220b      	movs	r2, #11
 800eb6c:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800eb6e:	2302      	movs	r3, #2
 800eb70:	73fb      	strb	r3, [r7, #15]
      break;
 800eb72:	e093      	b.n	800ec9c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	791b      	ldrb	r3, [r3, #4]
 800eb78:	2200      	movs	r2, #0
 800eb7a:	2100      	movs	r1, #0
 800eb7c:	6878      	ldr	r0, [r7, #4]
 800eb7e:	f000 f8d6 	bl	800ed2e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800eb88:	b29a      	uxth	r2, r3
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	2208      	movs	r2, #8
 800eb92:	761a      	strb	r2, [r3, #24]

      break;
 800eb94:	e087      	b.n	800eca6 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	791b      	ldrb	r3, [r3, #4]
 800eb9a:	4619      	mov	r1, r3
 800eb9c:	6878      	ldr	r0, [r7, #4]
 800eb9e:	f000 fbc7 	bl	800f330 <USBH_LL_GetURBState>
 800eba2:	4603      	mov	r3, r0
 800eba4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800eba6:	7bbb      	ldrb	r3, [r7, #14]
 800eba8:	2b01      	cmp	r3, #1
 800ebaa:	d105      	bne.n	800ebb8 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	220d      	movs	r2, #13
 800ebb0:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800ebb2:	2300      	movs	r3, #0
 800ebb4:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ebb6:	e073      	b.n	800eca0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 800ebb8:	7bbb      	ldrb	r3, [r7, #14]
 800ebba:	2b04      	cmp	r3, #4
 800ebbc:	d103      	bne.n	800ebc6 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	220b      	movs	r2, #11
 800ebc2:	761a      	strb	r2, [r3, #24]
      break;
 800ebc4:	e06c      	b.n	800eca0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 800ebc6:	7bbb      	ldrb	r3, [r7, #14]
 800ebc8:	2b05      	cmp	r3, #5
 800ebca:	d169      	bne.n	800eca0 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 800ebcc:	2303      	movs	r3, #3
 800ebce:	73fb      	strb	r3, [r7, #15]
      break;
 800ebd0:	e066      	b.n	800eca0 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	795a      	ldrb	r2, [r3, #5]
 800ebd6:	2301      	movs	r3, #1
 800ebd8:	9300      	str	r3, [sp, #0]
 800ebda:	4613      	mov	r3, r2
 800ebdc:	2200      	movs	r2, #0
 800ebde:	2100      	movs	r1, #0
 800ebe0:	6878      	ldr	r0, [r7, #4]
 800ebe2:	f000 f87f 	bl	800ece4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ebec:	b29a      	uxth	r2, r3
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	220a      	movs	r2, #10
 800ebf6:	761a      	strb	r2, [r3, #24]
      break;
 800ebf8:	e055      	b.n	800eca6 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	795b      	ldrb	r3, [r3, #5]
 800ebfe:	4619      	mov	r1, r3
 800ec00:	6878      	ldr	r0, [r7, #4]
 800ec02:	f000 fb95 	bl	800f330 <USBH_LL_GetURBState>
 800ec06:	4603      	mov	r3, r0
 800ec08:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800ec0a:	7bbb      	ldrb	r3, [r7, #14]
 800ec0c:	2b01      	cmp	r3, #1
 800ec0e:	d105      	bne.n	800ec1c <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 800ec10:	2300      	movs	r3, #0
 800ec12:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	220d      	movs	r2, #13
 800ec18:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ec1a:	e043      	b.n	800eca4 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ec1c:	7bbb      	ldrb	r3, [r7, #14]
 800ec1e:	2b02      	cmp	r3, #2
 800ec20:	d103      	bne.n	800ec2a <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	2209      	movs	r2, #9
 800ec26:	761a      	strb	r2, [r3, #24]
      break;
 800ec28:	e03c      	b.n	800eca4 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 800ec2a:	7bbb      	ldrb	r3, [r7, #14]
 800ec2c:	2b04      	cmp	r3, #4
 800ec2e:	d139      	bne.n	800eca4 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	220b      	movs	r2, #11
 800ec34:	761a      	strb	r2, [r3, #24]
      break;
 800ec36:	e035      	b.n	800eca4 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	7e5b      	ldrb	r3, [r3, #25]
 800ec3c:	3301      	adds	r3, #1
 800ec3e:	b2da      	uxtb	r2, r3
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	765a      	strb	r2, [r3, #25]
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	7e5b      	ldrb	r3, [r3, #25]
 800ec48:	2b02      	cmp	r3, #2
 800ec4a:	d806      	bhi.n	800ec5a <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	2201      	movs	r2, #1
 800ec50:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	2201      	movs	r2, #1
 800ec56:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800ec58:	e025      	b.n	800eca6 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ec60:	2106      	movs	r1, #6
 800ec62:	6878      	ldr	r0, [r7, #4]
 800ec64:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	2200      	movs	r2, #0
 800ec6a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	795b      	ldrb	r3, [r3, #5]
 800ec70:	4619      	mov	r1, r3
 800ec72:	6878      	ldr	r0, [r7, #4]
 800ec74:	f000 f90c 	bl	800ee90 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	791b      	ldrb	r3, [r3, #4]
 800ec7c:	4619      	mov	r1, r3
 800ec7e:	6878      	ldr	r0, [r7, #4]
 800ec80:	f000 f906 	bl	800ee90 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	2200      	movs	r2, #0
 800ec88:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800ec8a:	2302      	movs	r3, #2
 800ec8c:	73fb      	strb	r3, [r7, #15]
      break;
 800ec8e:	e00a      	b.n	800eca6 <USBH_HandleControl+0x2e2>

    default:
      break;
 800ec90:	bf00      	nop
 800ec92:	e008      	b.n	800eca6 <USBH_HandleControl+0x2e2>
      break;
 800ec94:	bf00      	nop
 800ec96:	e006      	b.n	800eca6 <USBH_HandleControl+0x2e2>
      break;
 800ec98:	bf00      	nop
 800ec9a:	e004      	b.n	800eca6 <USBH_HandleControl+0x2e2>
      break;
 800ec9c:	bf00      	nop
 800ec9e:	e002      	b.n	800eca6 <USBH_HandleControl+0x2e2>
      break;
 800eca0:	bf00      	nop
 800eca2:	e000      	b.n	800eca6 <USBH_HandleControl+0x2e2>
      break;
 800eca4:	bf00      	nop
  }

  return status;
 800eca6:	7bfb      	ldrb	r3, [r7, #15]
}
 800eca8:	4618      	mov	r0, r3
 800ecaa:	3710      	adds	r7, #16
 800ecac:	46bd      	mov	sp, r7
 800ecae:	bd80      	pop	{r7, pc}

0800ecb0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b088      	sub	sp, #32
 800ecb4:	af04      	add	r7, sp, #16
 800ecb6:	60f8      	str	r0, [r7, #12]
 800ecb8:	60b9      	str	r1, [r7, #8]
 800ecba:	4613      	mov	r3, r2
 800ecbc:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ecbe:	79f9      	ldrb	r1, [r7, #7]
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	9303      	str	r3, [sp, #12]
 800ecc4:	2308      	movs	r3, #8
 800ecc6:	9302      	str	r3, [sp, #8]
 800ecc8:	68bb      	ldr	r3, [r7, #8]
 800ecca:	9301      	str	r3, [sp, #4]
 800eccc:	2300      	movs	r3, #0
 800ecce:	9300      	str	r3, [sp, #0]
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	68f8      	ldr	r0, [r7, #12]
 800ecd6:	f000 fafa 	bl	800f2ce <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800ecda:	2300      	movs	r3, #0
}
 800ecdc:	4618      	mov	r0, r3
 800ecde:	3710      	adds	r7, #16
 800ece0:	46bd      	mov	sp, r7
 800ece2:	bd80      	pop	{r7, pc}

0800ece4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b088      	sub	sp, #32
 800ece8:	af04      	add	r7, sp, #16
 800ecea:	60f8      	str	r0, [r7, #12]
 800ecec:	60b9      	str	r1, [r7, #8]
 800ecee:	4611      	mov	r1, r2
 800ecf0:	461a      	mov	r2, r3
 800ecf2:	460b      	mov	r3, r1
 800ecf4:	80fb      	strh	r3, [r7, #6]
 800ecf6:	4613      	mov	r3, r2
 800ecf8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d001      	beq.n	800ed08 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800ed04:	2300      	movs	r3, #0
 800ed06:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ed08:	7979      	ldrb	r1, [r7, #5]
 800ed0a:	7e3b      	ldrb	r3, [r7, #24]
 800ed0c:	9303      	str	r3, [sp, #12]
 800ed0e:	88fb      	ldrh	r3, [r7, #6]
 800ed10:	9302      	str	r3, [sp, #8]
 800ed12:	68bb      	ldr	r3, [r7, #8]
 800ed14:	9301      	str	r3, [sp, #4]
 800ed16:	2301      	movs	r3, #1
 800ed18:	9300      	str	r3, [sp, #0]
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	2200      	movs	r2, #0
 800ed1e:	68f8      	ldr	r0, [r7, #12]
 800ed20:	f000 fad5 	bl	800f2ce <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800ed24:	2300      	movs	r3, #0
}
 800ed26:	4618      	mov	r0, r3
 800ed28:	3710      	adds	r7, #16
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	bd80      	pop	{r7, pc}

0800ed2e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800ed2e:	b580      	push	{r7, lr}
 800ed30:	b088      	sub	sp, #32
 800ed32:	af04      	add	r7, sp, #16
 800ed34:	60f8      	str	r0, [r7, #12]
 800ed36:	60b9      	str	r1, [r7, #8]
 800ed38:	4611      	mov	r1, r2
 800ed3a:	461a      	mov	r2, r3
 800ed3c:	460b      	mov	r3, r1
 800ed3e:	80fb      	strh	r3, [r7, #6]
 800ed40:	4613      	mov	r3, r2
 800ed42:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ed44:	7979      	ldrb	r1, [r7, #5]
 800ed46:	2300      	movs	r3, #0
 800ed48:	9303      	str	r3, [sp, #12]
 800ed4a:	88fb      	ldrh	r3, [r7, #6]
 800ed4c:	9302      	str	r3, [sp, #8]
 800ed4e:	68bb      	ldr	r3, [r7, #8]
 800ed50:	9301      	str	r3, [sp, #4]
 800ed52:	2301      	movs	r3, #1
 800ed54:	9300      	str	r3, [sp, #0]
 800ed56:	2300      	movs	r3, #0
 800ed58:	2201      	movs	r2, #1
 800ed5a:	68f8      	ldr	r0, [r7, #12]
 800ed5c:	f000 fab7 	bl	800f2ce <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800ed60:	2300      	movs	r3, #0

}
 800ed62:	4618      	mov	r0, r3
 800ed64:	3710      	adds	r7, #16
 800ed66:	46bd      	mov	sp, r7
 800ed68:	bd80      	pop	{r7, pc}

0800ed6a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800ed6a:	b580      	push	{r7, lr}
 800ed6c:	b088      	sub	sp, #32
 800ed6e:	af04      	add	r7, sp, #16
 800ed70:	60f8      	str	r0, [r7, #12]
 800ed72:	60b9      	str	r1, [r7, #8]
 800ed74:	4611      	mov	r1, r2
 800ed76:	461a      	mov	r2, r3
 800ed78:	460b      	mov	r3, r1
 800ed7a:	80fb      	strh	r3, [r7, #6]
 800ed7c:	4613      	mov	r3, r2
 800ed7e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d001      	beq.n	800ed8e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ed8e:	7979      	ldrb	r1, [r7, #5]
 800ed90:	7e3b      	ldrb	r3, [r7, #24]
 800ed92:	9303      	str	r3, [sp, #12]
 800ed94:	88fb      	ldrh	r3, [r7, #6]
 800ed96:	9302      	str	r3, [sp, #8]
 800ed98:	68bb      	ldr	r3, [r7, #8]
 800ed9a:	9301      	str	r3, [sp, #4]
 800ed9c:	2301      	movs	r3, #1
 800ed9e:	9300      	str	r3, [sp, #0]
 800eda0:	2302      	movs	r3, #2
 800eda2:	2200      	movs	r2, #0
 800eda4:	68f8      	ldr	r0, [r7, #12]
 800eda6:	f000 fa92 	bl	800f2ce <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800edaa:	2300      	movs	r3, #0
}
 800edac:	4618      	mov	r0, r3
 800edae:	3710      	adds	r7, #16
 800edb0:	46bd      	mov	sp, r7
 800edb2:	bd80      	pop	{r7, pc}

0800edb4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800edb4:	b580      	push	{r7, lr}
 800edb6:	b088      	sub	sp, #32
 800edb8:	af04      	add	r7, sp, #16
 800edba:	60f8      	str	r0, [r7, #12]
 800edbc:	60b9      	str	r1, [r7, #8]
 800edbe:	4611      	mov	r1, r2
 800edc0:	461a      	mov	r2, r3
 800edc2:	460b      	mov	r3, r1
 800edc4:	80fb      	strh	r3, [r7, #6]
 800edc6:	4613      	mov	r3, r2
 800edc8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800edca:	7979      	ldrb	r1, [r7, #5]
 800edcc:	2300      	movs	r3, #0
 800edce:	9303      	str	r3, [sp, #12]
 800edd0:	88fb      	ldrh	r3, [r7, #6]
 800edd2:	9302      	str	r3, [sp, #8]
 800edd4:	68bb      	ldr	r3, [r7, #8]
 800edd6:	9301      	str	r3, [sp, #4]
 800edd8:	2301      	movs	r3, #1
 800edda:	9300      	str	r3, [sp, #0]
 800eddc:	2302      	movs	r3, #2
 800edde:	2201      	movs	r2, #1
 800ede0:	68f8      	ldr	r0, [r7, #12]
 800ede2:	f000 fa74 	bl	800f2ce <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800ede6:	2300      	movs	r3, #0
}
 800ede8:	4618      	mov	r0, r3
 800edea:	3710      	adds	r7, #16
 800edec:	46bd      	mov	sp, r7
 800edee:	bd80      	pop	{r7, pc}

0800edf0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b086      	sub	sp, #24
 800edf4:	af04      	add	r7, sp, #16
 800edf6:	6078      	str	r0, [r7, #4]
 800edf8:	4608      	mov	r0, r1
 800edfa:	4611      	mov	r1, r2
 800edfc:	461a      	mov	r2, r3
 800edfe:	4603      	mov	r3, r0
 800ee00:	70fb      	strb	r3, [r7, #3]
 800ee02:	460b      	mov	r3, r1
 800ee04:	70bb      	strb	r3, [r7, #2]
 800ee06:	4613      	mov	r3, r2
 800ee08:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800ee0a:	7878      	ldrb	r0, [r7, #1]
 800ee0c:	78ba      	ldrb	r2, [r7, #2]
 800ee0e:	78f9      	ldrb	r1, [r7, #3]
 800ee10:	8b3b      	ldrh	r3, [r7, #24]
 800ee12:	9302      	str	r3, [sp, #8]
 800ee14:	7d3b      	ldrb	r3, [r7, #20]
 800ee16:	9301      	str	r3, [sp, #4]
 800ee18:	7c3b      	ldrb	r3, [r7, #16]
 800ee1a:	9300      	str	r3, [sp, #0]
 800ee1c:	4603      	mov	r3, r0
 800ee1e:	6878      	ldr	r0, [r7, #4]
 800ee20:	f000 fa07 	bl	800f232 <USBH_LL_OpenPipe>

  return USBH_OK;
 800ee24:	2300      	movs	r3, #0
}
 800ee26:	4618      	mov	r0, r3
 800ee28:	3708      	adds	r7, #8
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	bd80      	pop	{r7, pc}

0800ee2e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800ee2e:	b580      	push	{r7, lr}
 800ee30:	b082      	sub	sp, #8
 800ee32:	af00      	add	r7, sp, #0
 800ee34:	6078      	str	r0, [r7, #4]
 800ee36:	460b      	mov	r3, r1
 800ee38:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800ee3a:	78fb      	ldrb	r3, [r7, #3]
 800ee3c:	4619      	mov	r1, r3
 800ee3e:	6878      	ldr	r0, [r7, #4]
 800ee40:	f000 fa26 	bl	800f290 <USBH_LL_ClosePipe>

  return USBH_OK;
 800ee44:	2300      	movs	r3, #0
}
 800ee46:	4618      	mov	r0, r3
 800ee48:	3708      	adds	r7, #8
 800ee4a:	46bd      	mov	sp, r7
 800ee4c:	bd80      	pop	{r7, pc}

0800ee4e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ee4e:	b580      	push	{r7, lr}
 800ee50:	b084      	sub	sp, #16
 800ee52:	af00      	add	r7, sp, #0
 800ee54:	6078      	str	r0, [r7, #4]
 800ee56:	460b      	mov	r3, r1
 800ee58:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ee5a:	6878      	ldr	r0, [r7, #4]
 800ee5c:	f000 f836 	bl	800eecc <USBH_GetFreePipe>
 800ee60:	4603      	mov	r3, r0
 800ee62:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ee64:	89fb      	ldrh	r3, [r7, #14]
 800ee66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ee6a:	4293      	cmp	r3, r2
 800ee6c:	d00a      	beq.n	800ee84 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800ee6e:	78fa      	ldrb	r2, [r7, #3]
 800ee70:	89fb      	ldrh	r3, [r7, #14]
 800ee72:	f003 030f 	and.w	r3, r3, #15
 800ee76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ee7a:	6879      	ldr	r1, [r7, #4]
 800ee7c:	33e0      	adds	r3, #224	; 0xe0
 800ee7e:	009b      	lsls	r3, r3, #2
 800ee80:	440b      	add	r3, r1
 800ee82:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800ee84:	89fb      	ldrh	r3, [r7, #14]
 800ee86:	b2db      	uxtb	r3, r3
}
 800ee88:	4618      	mov	r0, r3
 800ee8a:	3710      	adds	r7, #16
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	bd80      	pop	{r7, pc}

0800ee90 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ee90:	b480      	push	{r7}
 800ee92:	b083      	sub	sp, #12
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	6078      	str	r0, [r7, #4]
 800ee98:	460b      	mov	r3, r1
 800ee9a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800ee9c:	78fb      	ldrb	r3, [r7, #3]
 800ee9e:	2b0a      	cmp	r3, #10
 800eea0:	d80d      	bhi.n	800eebe <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800eea2:	78fb      	ldrb	r3, [r7, #3]
 800eea4:	687a      	ldr	r2, [r7, #4]
 800eea6:	33e0      	adds	r3, #224	; 0xe0
 800eea8:	009b      	lsls	r3, r3, #2
 800eeaa:	4413      	add	r3, r2
 800eeac:	685a      	ldr	r2, [r3, #4]
 800eeae:	78fb      	ldrb	r3, [r7, #3]
 800eeb0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800eeb4:	6879      	ldr	r1, [r7, #4]
 800eeb6:	33e0      	adds	r3, #224	; 0xe0
 800eeb8:	009b      	lsls	r3, r3, #2
 800eeba:	440b      	add	r3, r1
 800eebc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800eebe:	2300      	movs	r3, #0
}
 800eec0:	4618      	mov	r0, r3
 800eec2:	370c      	adds	r7, #12
 800eec4:	46bd      	mov	sp, r7
 800eec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeca:	4770      	bx	lr

0800eecc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800eecc:	b480      	push	{r7}
 800eece:	b085      	sub	sp, #20
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800eed4:	2300      	movs	r3, #0
 800eed6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800eed8:	2300      	movs	r3, #0
 800eeda:	73fb      	strb	r3, [r7, #15]
 800eedc:	e00f      	b.n	800eefe <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800eede:	7bfb      	ldrb	r3, [r7, #15]
 800eee0:	687a      	ldr	r2, [r7, #4]
 800eee2:	33e0      	adds	r3, #224	; 0xe0
 800eee4:	009b      	lsls	r3, r3, #2
 800eee6:	4413      	add	r3, r2
 800eee8:	685b      	ldr	r3, [r3, #4]
 800eeea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d102      	bne.n	800eef8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800eef2:	7bfb      	ldrb	r3, [r7, #15]
 800eef4:	b29b      	uxth	r3, r3
 800eef6:	e007      	b.n	800ef08 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800eef8:	7bfb      	ldrb	r3, [r7, #15]
 800eefa:	3301      	adds	r3, #1
 800eefc:	73fb      	strb	r3, [r7, #15]
 800eefe:	7bfb      	ldrb	r3, [r7, #15]
 800ef00:	2b0a      	cmp	r3, #10
 800ef02:	d9ec      	bls.n	800eede <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ef04:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800ef08:	4618      	mov	r0, r3
 800ef0a:	3714      	adds	r7, #20
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef12:	4770      	bx	lr

0800ef14 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ef18:	2201      	movs	r2, #1
 800ef1a:	490e      	ldr	r1, [pc, #56]	; (800ef54 <MX_USB_HOST_Init+0x40>)
 800ef1c:	480e      	ldr	r0, [pc, #56]	; (800ef58 <MX_USB_HOST_Init+0x44>)
 800ef1e:	f7ff fb35 	bl	800e58c <USBH_Init>
 800ef22:	4603      	mov	r3, r0
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d001      	beq.n	800ef2c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ef28:	f7f9 fd58 	bl	80089dc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800ef2c:	490b      	ldr	r1, [pc, #44]	; (800ef5c <MX_USB_HOST_Init+0x48>)
 800ef2e:	480a      	ldr	r0, [pc, #40]	; (800ef58 <MX_USB_HOST_Init+0x44>)
 800ef30:	f7ff fbba 	bl	800e6a8 <USBH_RegisterClass>
 800ef34:	4603      	mov	r3, r0
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d001      	beq.n	800ef3e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ef3a:	f7f9 fd4f 	bl	80089dc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ef3e:	4806      	ldr	r0, [pc, #24]	; (800ef58 <MX_USB_HOST_Init+0x44>)
 800ef40:	f7ff fc3e 	bl	800e7c0 <USBH_Start>
 800ef44:	4603      	mov	r3, r0
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d001      	beq.n	800ef4e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ef4a:	f7f9 fd47 	bl	80089dc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ef4e:	bf00      	nop
 800ef50:	bd80      	pop	{r7, pc}
 800ef52:	bf00      	nop
 800ef54:	0800ef61 	.word	0x0800ef61
 800ef58:	20000204 	.word	0x20000204
 800ef5c:	2000000c 	.word	0x2000000c

0800ef60 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ef60:	b480      	push	{r7}
 800ef62:	b083      	sub	sp, #12
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
 800ef68:	460b      	mov	r3, r1
 800ef6a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800ef6c:	78fb      	ldrb	r3, [r7, #3]
 800ef6e:	3b01      	subs	r3, #1
 800ef70:	2b04      	cmp	r3, #4
 800ef72:	d819      	bhi.n	800efa8 <USBH_UserProcess+0x48>
 800ef74:	a201      	add	r2, pc, #4	; (adr r2, 800ef7c <USBH_UserProcess+0x1c>)
 800ef76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef7a:	bf00      	nop
 800ef7c:	0800efa9 	.word	0x0800efa9
 800ef80:	0800ef99 	.word	0x0800ef99
 800ef84:	0800efa9 	.word	0x0800efa9
 800ef88:	0800efa1 	.word	0x0800efa1
 800ef8c:	0800ef91 	.word	0x0800ef91
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800ef90:	4b09      	ldr	r3, [pc, #36]	; (800efb8 <USBH_UserProcess+0x58>)
 800ef92:	2203      	movs	r2, #3
 800ef94:	701a      	strb	r2, [r3, #0]
  break;
 800ef96:	e008      	b.n	800efaa <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ef98:	4b07      	ldr	r3, [pc, #28]	; (800efb8 <USBH_UserProcess+0x58>)
 800ef9a:	2202      	movs	r2, #2
 800ef9c:	701a      	strb	r2, [r3, #0]
  break;
 800ef9e:	e004      	b.n	800efaa <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800efa0:	4b05      	ldr	r3, [pc, #20]	; (800efb8 <USBH_UserProcess+0x58>)
 800efa2:	2201      	movs	r2, #1
 800efa4:	701a      	strb	r2, [r3, #0]
  break;
 800efa6:	e000      	b.n	800efaa <USBH_UserProcess+0x4a>

  default:
  break;
 800efa8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800efaa:	bf00      	nop
 800efac:	370c      	adds	r7, #12
 800efae:	46bd      	mov	sp, r7
 800efb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb4:	4770      	bx	lr
 800efb6:	bf00      	nop
 800efb8:	200000b4 	.word	0x200000b4

0800efbc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b08a      	sub	sp, #40	; 0x28
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800efc4:	f107 0314 	add.w	r3, r7, #20
 800efc8:	2200      	movs	r2, #0
 800efca:	601a      	str	r2, [r3, #0]
 800efcc:	605a      	str	r2, [r3, #4]
 800efce:	609a      	str	r2, [r3, #8]
 800efd0:	60da      	str	r2, [r3, #12]
 800efd2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800efdc:	d147      	bne.n	800f06e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800efde:	2300      	movs	r3, #0
 800efe0:	613b      	str	r3, [r7, #16]
 800efe2:	4b25      	ldr	r3, [pc, #148]	; (800f078 <HAL_HCD_MspInit+0xbc>)
 800efe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800efe6:	4a24      	ldr	r2, [pc, #144]	; (800f078 <HAL_HCD_MspInit+0xbc>)
 800efe8:	f043 0301 	orr.w	r3, r3, #1
 800efec:	6313      	str	r3, [r2, #48]	; 0x30
 800efee:	4b22      	ldr	r3, [pc, #136]	; (800f078 <HAL_HCD_MspInit+0xbc>)
 800eff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eff2:	f003 0301 	and.w	r3, r3, #1
 800eff6:	613b      	str	r3, [r7, #16]
 800eff8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800effa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800effe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f000:	2300      	movs	r3, #0
 800f002:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f004:	2300      	movs	r3, #0
 800f006:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800f008:	f107 0314 	add.w	r3, r7, #20
 800f00c:	4619      	mov	r1, r3
 800f00e:	481b      	ldr	r0, [pc, #108]	; (800f07c <HAL_HCD_MspInit+0xc0>)
 800f010:	f7fa f8e6 	bl	80091e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800f014:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800f018:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f01a:	2302      	movs	r3, #2
 800f01c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f01e:	2300      	movs	r3, #0
 800f020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f022:	2300      	movs	r3, #0
 800f024:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f026:	230a      	movs	r3, #10
 800f028:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f02a:	f107 0314 	add.w	r3, r7, #20
 800f02e:	4619      	mov	r1, r3
 800f030:	4812      	ldr	r0, [pc, #72]	; (800f07c <HAL_HCD_MspInit+0xc0>)
 800f032:	f7fa f8d5 	bl	80091e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f036:	4b10      	ldr	r3, [pc, #64]	; (800f078 <HAL_HCD_MspInit+0xbc>)
 800f038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f03a:	4a0f      	ldr	r2, [pc, #60]	; (800f078 <HAL_HCD_MspInit+0xbc>)
 800f03c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f040:	6353      	str	r3, [r2, #52]	; 0x34
 800f042:	2300      	movs	r3, #0
 800f044:	60fb      	str	r3, [r7, #12]
 800f046:	4b0c      	ldr	r3, [pc, #48]	; (800f078 <HAL_HCD_MspInit+0xbc>)
 800f048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f04a:	4a0b      	ldr	r2, [pc, #44]	; (800f078 <HAL_HCD_MspInit+0xbc>)
 800f04c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f050:	6453      	str	r3, [r2, #68]	; 0x44
 800f052:	4b09      	ldr	r3, [pc, #36]	; (800f078 <HAL_HCD_MspInit+0xbc>)
 800f054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f05a:	60fb      	str	r3, [r7, #12]
 800f05c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f05e:	2200      	movs	r2, #0
 800f060:	2100      	movs	r1, #0
 800f062:	2043      	movs	r0, #67	; 0x43
 800f064:	f7fa f869 	bl	800913a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f068:	2043      	movs	r0, #67	; 0x43
 800f06a:	f7fa f882 	bl	8009172 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f06e:	bf00      	nop
 800f070:	3728      	adds	r7, #40	; 0x28
 800f072:	46bd      	mov	sp, r7
 800f074:	bd80      	pop	{r7, pc}
 800f076:	bf00      	nop
 800f078:	40023800 	.word	0x40023800
 800f07c:	40020000 	.word	0x40020000

0800f080 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800f080:	b580      	push	{r7, lr}
 800f082:	b082      	sub	sp, #8
 800f084:	af00      	add	r7, sp, #0
 800f086:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f08e:	4618      	mov	r0, r3
 800f090:	f7ff fbb5 	bl	800e7fe <USBH_LL_IncTimer>
}
 800f094:	bf00      	nop
 800f096:	3708      	adds	r7, #8
 800f098:	46bd      	mov	sp, r7
 800f09a:	bd80      	pop	{r7, pc}

0800f09c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b082      	sub	sp, #8
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	f7ff fbed 	bl	800e88a <USBH_LL_Connect>
}
 800f0b0:	bf00      	nop
 800f0b2:	3708      	adds	r7, #8
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	bd80      	pop	{r7, pc}

0800f0b8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b082      	sub	sp, #8
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	f7ff fbf6 	bl	800e8b8 <USBH_LL_Disconnect>
}
 800f0cc:	bf00      	nop
 800f0ce:	3708      	adds	r7, #8
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	bd80      	pop	{r7, pc}

0800f0d4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800f0d4:	b480      	push	{r7}
 800f0d6:	b083      	sub	sp, #12
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
 800f0dc:	460b      	mov	r3, r1
 800f0de:	70fb      	strb	r3, [r7, #3]
 800f0e0:	4613      	mov	r3, r2
 800f0e2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800f0e4:	bf00      	nop
 800f0e6:	370c      	adds	r7, #12
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ee:	4770      	bx	lr

0800f0f0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b082      	sub	sp, #8
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f0fe:	4618      	mov	r0, r3
 800f100:	f7ff fba7 	bl	800e852 <USBH_LL_PortEnabled>
}
 800f104:	bf00      	nop
 800f106:	3708      	adds	r7, #8
 800f108:	46bd      	mov	sp, r7
 800f10a:	bd80      	pop	{r7, pc}

0800f10c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b082      	sub	sp, #8
 800f110:	af00      	add	r7, sp, #0
 800f112:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f11a:	4618      	mov	r0, r3
 800f11c:	f7ff fba7 	bl	800e86e <USBH_LL_PortDisabled>
}
 800f120:	bf00      	nop
 800f122:	3708      	adds	r7, #8
 800f124:	46bd      	mov	sp, r7
 800f126:	bd80      	pop	{r7, pc}

0800f128 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800f128:	b580      	push	{r7, lr}
 800f12a:	b082      	sub	sp, #8
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800f136:	2b01      	cmp	r3, #1
 800f138:	d12a      	bne.n	800f190 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800f13a:	4a18      	ldr	r2, [pc, #96]	; (800f19c <USBH_LL_Init+0x74>)
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	4a15      	ldr	r2, [pc, #84]	; (800f19c <USBH_LL_Init+0x74>)
 800f146:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f14a:	4b14      	ldr	r3, [pc, #80]	; (800f19c <USBH_LL_Init+0x74>)
 800f14c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f150:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800f152:	4b12      	ldr	r3, [pc, #72]	; (800f19c <USBH_LL_Init+0x74>)
 800f154:	2208      	movs	r2, #8
 800f156:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800f158:	4b10      	ldr	r3, [pc, #64]	; (800f19c <USBH_LL_Init+0x74>)
 800f15a:	2201      	movs	r2, #1
 800f15c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f15e:	4b0f      	ldr	r3, [pc, #60]	; (800f19c <USBH_LL_Init+0x74>)
 800f160:	2200      	movs	r2, #0
 800f162:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800f164:	4b0d      	ldr	r3, [pc, #52]	; (800f19c <USBH_LL_Init+0x74>)
 800f166:	2202      	movs	r2, #2
 800f168:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f16a:	4b0c      	ldr	r3, [pc, #48]	; (800f19c <USBH_LL_Init+0x74>)
 800f16c:	2200      	movs	r2, #0
 800f16e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800f170:	480a      	ldr	r0, [pc, #40]	; (800f19c <USBH_LL_Init+0x74>)
 800f172:	f7fa fa03 	bl	800957c <HAL_HCD_Init>
 800f176:	4603      	mov	r3, r0
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d001      	beq.n	800f180 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800f17c:	f7f9 fc2e 	bl	80089dc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800f180:	4806      	ldr	r0, [pc, #24]	; (800f19c <USBH_LL_Init+0x74>)
 800f182:	f7fa fdf9 	bl	8009d78 <HAL_HCD_GetCurrentFrame>
 800f186:	4603      	mov	r3, r0
 800f188:	4619      	mov	r1, r3
 800f18a:	6878      	ldr	r0, [r7, #4]
 800f18c:	f7ff fb28 	bl	800e7e0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800f190:	2300      	movs	r3, #0
}
 800f192:	4618      	mov	r0, r3
 800f194:	3708      	adds	r7, #8
 800f196:	46bd      	mov	sp, r7
 800f198:	bd80      	pop	{r7, pc}
 800f19a:	bf00      	nop
 800f19c:	200005dc 	.word	0x200005dc

0800f1a0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b084      	sub	sp, #16
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	f7fa fd74 	bl	8009ca4 <HAL_HCD_Start>
 800f1bc:	4603      	mov	r3, r0
 800f1be:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f1c0:	7bfb      	ldrb	r3, [r7, #15]
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	f000 f912 	bl	800f3ec <USBH_Get_USB_Status>
 800f1c8:	4603      	mov	r3, r0
 800f1ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f1cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	3710      	adds	r7, #16
 800f1d2:	46bd      	mov	sp, r7
 800f1d4:	bd80      	pop	{r7, pc}

0800f1d6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800f1d6:	b580      	push	{r7, lr}
 800f1d8:	b084      	sub	sp, #16
 800f1da:	af00      	add	r7, sp, #0
 800f1dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f1de:	2300      	movs	r3, #0
 800f1e0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	f7fa fd7c 	bl	8009cea <HAL_HCD_Stop>
 800f1f2:	4603      	mov	r3, r0
 800f1f4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f1f6:	7bfb      	ldrb	r3, [r7, #15]
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	f000 f8f7 	bl	800f3ec <USBH_Get_USB_Status>
 800f1fe:	4603      	mov	r3, r0
 800f200:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f202:	7bbb      	ldrb	r3, [r7, #14]
}
 800f204:	4618      	mov	r0, r3
 800f206:	3710      	adds	r7, #16
 800f208:	46bd      	mov	sp, r7
 800f20a:	bd80      	pop	{r7, pc}

0800f20c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b082      	sub	sp, #8
 800f210:	af00      	add	r7, sp, #0
 800f212:	6078      	str	r0, [r7, #4]
 800f214:	460b      	mov	r3, r1
 800f216:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f21e:	78fa      	ldrb	r2, [r7, #3]
 800f220:	4611      	mov	r1, r2
 800f222:	4618      	mov	r0, r3
 800f224:	f7fa fd93 	bl	8009d4e <HAL_HCD_HC_GetXferCount>
 800f228:	4603      	mov	r3, r0
}
 800f22a:	4618      	mov	r0, r3
 800f22c:	3708      	adds	r7, #8
 800f22e:	46bd      	mov	sp, r7
 800f230:	bd80      	pop	{r7, pc}

0800f232 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f232:	b590      	push	{r4, r7, lr}
 800f234:	b089      	sub	sp, #36	; 0x24
 800f236:	af04      	add	r7, sp, #16
 800f238:	6078      	str	r0, [r7, #4]
 800f23a:	4608      	mov	r0, r1
 800f23c:	4611      	mov	r1, r2
 800f23e:	461a      	mov	r2, r3
 800f240:	4603      	mov	r3, r0
 800f242:	70fb      	strb	r3, [r7, #3]
 800f244:	460b      	mov	r3, r1
 800f246:	70bb      	strb	r3, [r7, #2]
 800f248:	4613      	mov	r3, r2
 800f24a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f24c:	2300      	movs	r3, #0
 800f24e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f250:	2300      	movs	r3, #0
 800f252:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f25a:	787c      	ldrb	r4, [r7, #1]
 800f25c:	78ba      	ldrb	r2, [r7, #2]
 800f25e:	78f9      	ldrb	r1, [r7, #3]
 800f260:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f262:	9302      	str	r3, [sp, #8]
 800f264:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f268:	9301      	str	r3, [sp, #4]
 800f26a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f26e:	9300      	str	r3, [sp, #0]
 800f270:	4623      	mov	r3, r4
 800f272:	f7fa f9e5 	bl	8009640 <HAL_HCD_HC_Init>
 800f276:	4603      	mov	r3, r0
 800f278:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800f27a:	7bfb      	ldrb	r3, [r7, #15]
 800f27c:	4618      	mov	r0, r3
 800f27e:	f000 f8b5 	bl	800f3ec <USBH_Get_USB_Status>
 800f282:	4603      	mov	r3, r0
 800f284:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f286:	7bbb      	ldrb	r3, [r7, #14]
}
 800f288:	4618      	mov	r0, r3
 800f28a:	3714      	adds	r7, #20
 800f28c:	46bd      	mov	sp, r7
 800f28e:	bd90      	pop	{r4, r7, pc}

0800f290 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f290:	b580      	push	{r7, lr}
 800f292:	b084      	sub	sp, #16
 800f294:	af00      	add	r7, sp, #0
 800f296:	6078      	str	r0, [r7, #4]
 800f298:	460b      	mov	r3, r1
 800f29a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f29c:	2300      	movs	r3, #0
 800f29e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f2aa:	78fa      	ldrb	r2, [r7, #3]
 800f2ac:	4611      	mov	r1, r2
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	f7fa fa5e 	bl	8009770 <HAL_HCD_HC_Halt>
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f2b8:	7bfb      	ldrb	r3, [r7, #15]
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	f000 f896 	bl	800f3ec <USBH_Get_USB_Status>
 800f2c0:	4603      	mov	r3, r0
 800f2c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f2c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	3710      	adds	r7, #16
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	bd80      	pop	{r7, pc}

0800f2ce <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800f2ce:	b590      	push	{r4, r7, lr}
 800f2d0:	b089      	sub	sp, #36	; 0x24
 800f2d2:	af04      	add	r7, sp, #16
 800f2d4:	6078      	str	r0, [r7, #4]
 800f2d6:	4608      	mov	r0, r1
 800f2d8:	4611      	mov	r1, r2
 800f2da:	461a      	mov	r2, r3
 800f2dc:	4603      	mov	r3, r0
 800f2de:	70fb      	strb	r3, [r7, #3]
 800f2e0:	460b      	mov	r3, r1
 800f2e2:	70bb      	strb	r3, [r7, #2]
 800f2e4:	4613      	mov	r3, r2
 800f2e6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f2f6:	787c      	ldrb	r4, [r7, #1]
 800f2f8:	78ba      	ldrb	r2, [r7, #2]
 800f2fa:	78f9      	ldrb	r1, [r7, #3]
 800f2fc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f300:	9303      	str	r3, [sp, #12]
 800f302:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f304:	9302      	str	r3, [sp, #8]
 800f306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f308:	9301      	str	r3, [sp, #4]
 800f30a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f30e:	9300      	str	r3, [sp, #0]
 800f310:	4623      	mov	r3, r4
 800f312:	f7fa fa51 	bl	80097b8 <HAL_HCD_HC_SubmitRequest>
 800f316:	4603      	mov	r3, r0
 800f318:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800f31a:	7bfb      	ldrb	r3, [r7, #15]
 800f31c:	4618      	mov	r0, r3
 800f31e:	f000 f865 	bl	800f3ec <USBH_Get_USB_Status>
 800f322:	4603      	mov	r3, r0
 800f324:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f326:	7bbb      	ldrb	r3, [r7, #14]
}
 800f328:	4618      	mov	r0, r3
 800f32a:	3714      	adds	r7, #20
 800f32c:	46bd      	mov	sp, r7
 800f32e:	bd90      	pop	{r4, r7, pc}

0800f330 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b082      	sub	sp, #8
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
 800f338:	460b      	mov	r3, r1
 800f33a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f342:	78fa      	ldrb	r2, [r7, #3]
 800f344:	4611      	mov	r1, r2
 800f346:	4618      	mov	r0, r3
 800f348:	f7fa fcec 	bl	8009d24 <HAL_HCD_HC_GetURBState>
 800f34c:	4603      	mov	r3, r0
}
 800f34e:	4618      	mov	r0, r3
 800f350:	3708      	adds	r7, #8
 800f352:	46bd      	mov	sp, r7
 800f354:	bd80      	pop	{r7, pc}

0800f356 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800f356:	b580      	push	{r7, lr}
 800f358:	b082      	sub	sp, #8
 800f35a:	af00      	add	r7, sp, #0
 800f35c:	6078      	str	r0, [r7, #4]
 800f35e:	460b      	mov	r3, r1
 800f360:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800f368:	2b01      	cmp	r3, #1
 800f36a:	d103      	bne.n	800f374 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800f36c:	78fb      	ldrb	r3, [r7, #3]
 800f36e:	4618      	mov	r0, r3
 800f370:	f000 f868 	bl	800f444 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800f374:	20c8      	movs	r0, #200	; 0xc8
 800f376:	f7f9 fde3 	bl	8008f40 <HAL_Delay>
  return USBH_OK;
 800f37a:	2300      	movs	r3, #0
}
 800f37c:	4618      	mov	r0, r3
 800f37e:	3708      	adds	r7, #8
 800f380:	46bd      	mov	sp, r7
 800f382:	bd80      	pop	{r7, pc}

0800f384 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800f384:	b480      	push	{r7}
 800f386:	b085      	sub	sp, #20
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
 800f38c:	460b      	mov	r3, r1
 800f38e:	70fb      	strb	r3, [r7, #3]
 800f390:	4613      	mov	r3, r2
 800f392:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f39a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800f39c:	78fa      	ldrb	r2, [r7, #3]
 800f39e:	68f9      	ldr	r1, [r7, #12]
 800f3a0:	4613      	mov	r3, r2
 800f3a2:	009b      	lsls	r3, r3, #2
 800f3a4:	4413      	add	r3, r2
 800f3a6:	00db      	lsls	r3, r3, #3
 800f3a8:	440b      	add	r3, r1
 800f3aa:	333b      	adds	r3, #59	; 0x3b
 800f3ac:	781b      	ldrb	r3, [r3, #0]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d00a      	beq.n	800f3c8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800f3b2:	78fa      	ldrb	r2, [r7, #3]
 800f3b4:	68f9      	ldr	r1, [r7, #12]
 800f3b6:	4613      	mov	r3, r2
 800f3b8:	009b      	lsls	r3, r3, #2
 800f3ba:	4413      	add	r3, r2
 800f3bc:	00db      	lsls	r3, r3, #3
 800f3be:	440b      	add	r3, r1
 800f3c0:	3350      	adds	r3, #80	; 0x50
 800f3c2:	78ba      	ldrb	r2, [r7, #2]
 800f3c4:	701a      	strb	r2, [r3, #0]
 800f3c6:	e009      	b.n	800f3dc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800f3c8:	78fa      	ldrb	r2, [r7, #3]
 800f3ca:	68f9      	ldr	r1, [r7, #12]
 800f3cc:	4613      	mov	r3, r2
 800f3ce:	009b      	lsls	r3, r3, #2
 800f3d0:	4413      	add	r3, r2
 800f3d2:	00db      	lsls	r3, r3, #3
 800f3d4:	440b      	add	r3, r1
 800f3d6:	3351      	adds	r3, #81	; 0x51
 800f3d8:	78ba      	ldrb	r2, [r7, #2]
 800f3da:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800f3dc:	2300      	movs	r3, #0
}
 800f3de:	4618      	mov	r0, r3
 800f3e0:	3714      	adds	r7, #20
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e8:	4770      	bx	lr
	...

0800f3ec <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f3ec:	b480      	push	{r7}
 800f3ee:	b085      	sub	sp, #20
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	4603      	mov	r3, r0
 800f3f4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f3fa:	79fb      	ldrb	r3, [r7, #7]
 800f3fc:	2b03      	cmp	r3, #3
 800f3fe:	d817      	bhi.n	800f430 <USBH_Get_USB_Status+0x44>
 800f400:	a201      	add	r2, pc, #4	; (adr r2, 800f408 <USBH_Get_USB_Status+0x1c>)
 800f402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f406:	bf00      	nop
 800f408:	0800f419 	.word	0x0800f419
 800f40c:	0800f41f 	.word	0x0800f41f
 800f410:	0800f425 	.word	0x0800f425
 800f414:	0800f42b 	.word	0x0800f42b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800f418:	2300      	movs	r3, #0
 800f41a:	73fb      	strb	r3, [r7, #15]
    break;
 800f41c:	e00b      	b.n	800f436 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800f41e:	2302      	movs	r3, #2
 800f420:	73fb      	strb	r3, [r7, #15]
    break;
 800f422:	e008      	b.n	800f436 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800f424:	2301      	movs	r3, #1
 800f426:	73fb      	strb	r3, [r7, #15]
    break;
 800f428:	e005      	b.n	800f436 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800f42a:	2302      	movs	r3, #2
 800f42c:	73fb      	strb	r3, [r7, #15]
    break;
 800f42e:	e002      	b.n	800f436 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800f430:	2302      	movs	r3, #2
 800f432:	73fb      	strb	r3, [r7, #15]
    break;
 800f434:	bf00      	nop
  }
  return usb_status;
 800f436:	7bfb      	ldrb	r3, [r7, #15]
}
 800f438:	4618      	mov	r0, r3
 800f43a:	3714      	adds	r7, #20
 800f43c:	46bd      	mov	sp, r7
 800f43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f442:	4770      	bx	lr

0800f444 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800f444:	b580      	push	{r7, lr}
 800f446:	b084      	sub	sp, #16
 800f448:	af00      	add	r7, sp, #0
 800f44a:	4603      	mov	r3, r0
 800f44c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800f44e:	79fb      	ldrb	r3, [r7, #7]
 800f450:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800f452:	79fb      	ldrb	r3, [r7, #7]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d102      	bne.n	800f45e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800f458:	2301      	movs	r3, #1
 800f45a:	73fb      	strb	r3, [r7, #15]
 800f45c:	e001      	b.n	800f462 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800f45e:	2300      	movs	r3, #0
 800f460:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800f462:	7bfb      	ldrb	r3, [r7, #15]
 800f464:	461a      	mov	r2, r3
 800f466:	2101      	movs	r1, #1
 800f468:	4803      	ldr	r0, [pc, #12]	; (800f478 <MX_DriverVbusFS+0x34>)
 800f46a:	f7fa f853 	bl	8009514 <HAL_GPIO_WritePin>
}
 800f46e:	bf00      	nop
 800f470:	3710      	adds	r7, #16
 800f472:	46bd      	mov	sp, r7
 800f474:	bd80      	pop	{r7, pc}
 800f476:	bf00      	nop
 800f478:	40020800 	.word	0x40020800

0800f47c <__errno>:
 800f47c:	4b01      	ldr	r3, [pc, #4]	; (800f484 <__errno+0x8>)
 800f47e:	6818      	ldr	r0, [r3, #0]
 800f480:	4770      	bx	lr
 800f482:	bf00      	nop
 800f484:	2000002c 	.word	0x2000002c

0800f488 <__libc_init_array>:
 800f488:	b570      	push	{r4, r5, r6, lr}
 800f48a:	4e0d      	ldr	r6, [pc, #52]	; (800f4c0 <__libc_init_array+0x38>)
 800f48c:	4c0d      	ldr	r4, [pc, #52]	; (800f4c4 <__libc_init_array+0x3c>)
 800f48e:	1ba4      	subs	r4, r4, r6
 800f490:	10a4      	asrs	r4, r4, #2
 800f492:	2500      	movs	r5, #0
 800f494:	42a5      	cmp	r5, r4
 800f496:	d109      	bne.n	800f4ac <__libc_init_array+0x24>
 800f498:	4e0b      	ldr	r6, [pc, #44]	; (800f4c8 <__libc_init_array+0x40>)
 800f49a:	4c0c      	ldr	r4, [pc, #48]	; (800f4cc <__libc_init_array+0x44>)
 800f49c:	f000 f8ea 	bl	800f674 <_init>
 800f4a0:	1ba4      	subs	r4, r4, r6
 800f4a2:	10a4      	asrs	r4, r4, #2
 800f4a4:	2500      	movs	r5, #0
 800f4a6:	42a5      	cmp	r5, r4
 800f4a8:	d105      	bne.n	800f4b6 <__libc_init_array+0x2e>
 800f4aa:	bd70      	pop	{r4, r5, r6, pc}
 800f4ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f4b0:	4798      	blx	r3
 800f4b2:	3501      	adds	r5, #1
 800f4b4:	e7ee      	b.n	800f494 <__libc_init_array+0xc>
 800f4b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f4ba:	4798      	blx	r3
 800f4bc:	3501      	adds	r5, #1
 800f4be:	e7f2      	b.n	800f4a6 <__libc_init_array+0x1e>
 800f4c0:	0800f6d8 	.word	0x0800f6d8
 800f4c4:	0800f6d8 	.word	0x0800f6d8
 800f4c8:	0800f6d8 	.word	0x0800f6d8
 800f4cc:	0800f6dc 	.word	0x0800f6dc

0800f4d0 <malloc>:
 800f4d0:	4b02      	ldr	r3, [pc, #8]	; (800f4dc <malloc+0xc>)
 800f4d2:	4601      	mov	r1, r0
 800f4d4:	6818      	ldr	r0, [r3, #0]
 800f4d6:	f000 b861 	b.w	800f59c <_malloc_r>
 800f4da:	bf00      	nop
 800f4dc:	2000002c 	.word	0x2000002c

0800f4e0 <free>:
 800f4e0:	4b02      	ldr	r3, [pc, #8]	; (800f4ec <free+0xc>)
 800f4e2:	4601      	mov	r1, r0
 800f4e4:	6818      	ldr	r0, [r3, #0]
 800f4e6:	f000 b80b 	b.w	800f500 <_free_r>
 800f4ea:	bf00      	nop
 800f4ec:	2000002c 	.word	0x2000002c

0800f4f0 <memset>:
 800f4f0:	4402      	add	r2, r0
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	4293      	cmp	r3, r2
 800f4f6:	d100      	bne.n	800f4fa <memset+0xa>
 800f4f8:	4770      	bx	lr
 800f4fa:	f803 1b01 	strb.w	r1, [r3], #1
 800f4fe:	e7f9      	b.n	800f4f4 <memset+0x4>

0800f500 <_free_r>:
 800f500:	b538      	push	{r3, r4, r5, lr}
 800f502:	4605      	mov	r5, r0
 800f504:	2900      	cmp	r1, #0
 800f506:	d045      	beq.n	800f594 <_free_r+0x94>
 800f508:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f50c:	1f0c      	subs	r4, r1, #4
 800f50e:	2b00      	cmp	r3, #0
 800f510:	bfb8      	it	lt
 800f512:	18e4      	addlt	r4, r4, r3
 800f514:	f000 f8ac 	bl	800f670 <__malloc_lock>
 800f518:	4a1f      	ldr	r2, [pc, #124]	; (800f598 <_free_r+0x98>)
 800f51a:	6813      	ldr	r3, [r2, #0]
 800f51c:	4610      	mov	r0, r2
 800f51e:	b933      	cbnz	r3, 800f52e <_free_r+0x2e>
 800f520:	6063      	str	r3, [r4, #4]
 800f522:	6014      	str	r4, [r2, #0]
 800f524:	4628      	mov	r0, r5
 800f526:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f52a:	f000 b8a2 	b.w	800f672 <__malloc_unlock>
 800f52e:	42a3      	cmp	r3, r4
 800f530:	d90c      	bls.n	800f54c <_free_r+0x4c>
 800f532:	6821      	ldr	r1, [r4, #0]
 800f534:	1862      	adds	r2, r4, r1
 800f536:	4293      	cmp	r3, r2
 800f538:	bf04      	itt	eq
 800f53a:	681a      	ldreq	r2, [r3, #0]
 800f53c:	685b      	ldreq	r3, [r3, #4]
 800f53e:	6063      	str	r3, [r4, #4]
 800f540:	bf04      	itt	eq
 800f542:	1852      	addeq	r2, r2, r1
 800f544:	6022      	streq	r2, [r4, #0]
 800f546:	6004      	str	r4, [r0, #0]
 800f548:	e7ec      	b.n	800f524 <_free_r+0x24>
 800f54a:	4613      	mov	r3, r2
 800f54c:	685a      	ldr	r2, [r3, #4]
 800f54e:	b10a      	cbz	r2, 800f554 <_free_r+0x54>
 800f550:	42a2      	cmp	r2, r4
 800f552:	d9fa      	bls.n	800f54a <_free_r+0x4a>
 800f554:	6819      	ldr	r1, [r3, #0]
 800f556:	1858      	adds	r0, r3, r1
 800f558:	42a0      	cmp	r0, r4
 800f55a:	d10b      	bne.n	800f574 <_free_r+0x74>
 800f55c:	6820      	ldr	r0, [r4, #0]
 800f55e:	4401      	add	r1, r0
 800f560:	1858      	adds	r0, r3, r1
 800f562:	4282      	cmp	r2, r0
 800f564:	6019      	str	r1, [r3, #0]
 800f566:	d1dd      	bne.n	800f524 <_free_r+0x24>
 800f568:	6810      	ldr	r0, [r2, #0]
 800f56a:	6852      	ldr	r2, [r2, #4]
 800f56c:	605a      	str	r2, [r3, #4]
 800f56e:	4401      	add	r1, r0
 800f570:	6019      	str	r1, [r3, #0]
 800f572:	e7d7      	b.n	800f524 <_free_r+0x24>
 800f574:	d902      	bls.n	800f57c <_free_r+0x7c>
 800f576:	230c      	movs	r3, #12
 800f578:	602b      	str	r3, [r5, #0]
 800f57a:	e7d3      	b.n	800f524 <_free_r+0x24>
 800f57c:	6820      	ldr	r0, [r4, #0]
 800f57e:	1821      	adds	r1, r4, r0
 800f580:	428a      	cmp	r2, r1
 800f582:	bf04      	itt	eq
 800f584:	6811      	ldreq	r1, [r2, #0]
 800f586:	6852      	ldreq	r2, [r2, #4]
 800f588:	6062      	str	r2, [r4, #4]
 800f58a:	bf04      	itt	eq
 800f58c:	1809      	addeq	r1, r1, r0
 800f58e:	6021      	streq	r1, [r4, #0]
 800f590:	605c      	str	r4, [r3, #4]
 800f592:	e7c7      	b.n	800f524 <_free_r+0x24>
 800f594:	bd38      	pop	{r3, r4, r5, pc}
 800f596:	bf00      	nop
 800f598:	200000b8 	.word	0x200000b8

0800f59c <_malloc_r>:
 800f59c:	b570      	push	{r4, r5, r6, lr}
 800f59e:	1ccd      	adds	r5, r1, #3
 800f5a0:	f025 0503 	bic.w	r5, r5, #3
 800f5a4:	3508      	adds	r5, #8
 800f5a6:	2d0c      	cmp	r5, #12
 800f5a8:	bf38      	it	cc
 800f5aa:	250c      	movcc	r5, #12
 800f5ac:	2d00      	cmp	r5, #0
 800f5ae:	4606      	mov	r6, r0
 800f5b0:	db01      	blt.n	800f5b6 <_malloc_r+0x1a>
 800f5b2:	42a9      	cmp	r1, r5
 800f5b4:	d903      	bls.n	800f5be <_malloc_r+0x22>
 800f5b6:	230c      	movs	r3, #12
 800f5b8:	6033      	str	r3, [r6, #0]
 800f5ba:	2000      	movs	r0, #0
 800f5bc:	bd70      	pop	{r4, r5, r6, pc}
 800f5be:	f000 f857 	bl	800f670 <__malloc_lock>
 800f5c2:	4a21      	ldr	r2, [pc, #132]	; (800f648 <_malloc_r+0xac>)
 800f5c4:	6814      	ldr	r4, [r2, #0]
 800f5c6:	4621      	mov	r1, r4
 800f5c8:	b991      	cbnz	r1, 800f5f0 <_malloc_r+0x54>
 800f5ca:	4c20      	ldr	r4, [pc, #128]	; (800f64c <_malloc_r+0xb0>)
 800f5cc:	6823      	ldr	r3, [r4, #0]
 800f5ce:	b91b      	cbnz	r3, 800f5d8 <_malloc_r+0x3c>
 800f5d0:	4630      	mov	r0, r6
 800f5d2:	f000 f83d 	bl	800f650 <_sbrk_r>
 800f5d6:	6020      	str	r0, [r4, #0]
 800f5d8:	4629      	mov	r1, r5
 800f5da:	4630      	mov	r0, r6
 800f5dc:	f000 f838 	bl	800f650 <_sbrk_r>
 800f5e0:	1c43      	adds	r3, r0, #1
 800f5e2:	d124      	bne.n	800f62e <_malloc_r+0x92>
 800f5e4:	230c      	movs	r3, #12
 800f5e6:	6033      	str	r3, [r6, #0]
 800f5e8:	4630      	mov	r0, r6
 800f5ea:	f000 f842 	bl	800f672 <__malloc_unlock>
 800f5ee:	e7e4      	b.n	800f5ba <_malloc_r+0x1e>
 800f5f0:	680b      	ldr	r3, [r1, #0]
 800f5f2:	1b5b      	subs	r3, r3, r5
 800f5f4:	d418      	bmi.n	800f628 <_malloc_r+0x8c>
 800f5f6:	2b0b      	cmp	r3, #11
 800f5f8:	d90f      	bls.n	800f61a <_malloc_r+0x7e>
 800f5fa:	600b      	str	r3, [r1, #0]
 800f5fc:	50cd      	str	r5, [r1, r3]
 800f5fe:	18cc      	adds	r4, r1, r3
 800f600:	4630      	mov	r0, r6
 800f602:	f000 f836 	bl	800f672 <__malloc_unlock>
 800f606:	f104 000b 	add.w	r0, r4, #11
 800f60a:	1d23      	adds	r3, r4, #4
 800f60c:	f020 0007 	bic.w	r0, r0, #7
 800f610:	1ac3      	subs	r3, r0, r3
 800f612:	d0d3      	beq.n	800f5bc <_malloc_r+0x20>
 800f614:	425a      	negs	r2, r3
 800f616:	50e2      	str	r2, [r4, r3]
 800f618:	e7d0      	b.n	800f5bc <_malloc_r+0x20>
 800f61a:	428c      	cmp	r4, r1
 800f61c:	684b      	ldr	r3, [r1, #4]
 800f61e:	bf16      	itet	ne
 800f620:	6063      	strne	r3, [r4, #4]
 800f622:	6013      	streq	r3, [r2, #0]
 800f624:	460c      	movne	r4, r1
 800f626:	e7eb      	b.n	800f600 <_malloc_r+0x64>
 800f628:	460c      	mov	r4, r1
 800f62a:	6849      	ldr	r1, [r1, #4]
 800f62c:	e7cc      	b.n	800f5c8 <_malloc_r+0x2c>
 800f62e:	1cc4      	adds	r4, r0, #3
 800f630:	f024 0403 	bic.w	r4, r4, #3
 800f634:	42a0      	cmp	r0, r4
 800f636:	d005      	beq.n	800f644 <_malloc_r+0xa8>
 800f638:	1a21      	subs	r1, r4, r0
 800f63a:	4630      	mov	r0, r6
 800f63c:	f000 f808 	bl	800f650 <_sbrk_r>
 800f640:	3001      	adds	r0, #1
 800f642:	d0cf      	beq.n	800f5e4 <_malloc_r+0x48>
 800f644:	6025      	str	r5, [r4, #0]
 800f646:	e7db      	b.n	800f600 <_malloc_r+0x64>
 800f648:	200000b8 	.word	0x200000b8
 800f64c:	200000bc 	.word	0x200000bc

0800f650 <_sbrk_r>:
 800f650:	b538      	push	{r3, r4, r5, lr}
 800f652:	4c06      	ldr	r4, [pc, #24]	; (800f66c <_sbrk_r+0x1c>)
 800f654:	2300      	movs	r3, #0
 800f656:	4605      	mov	r5, r0
 800f658:	4608      	mov	r0, r1
 800f65a:	6023      	str	r3, [r4, #0]
 800f65c:	f7f9 fb88 	bl	8008d70 <_sbrk>
 800f660:	1c43      	adds	r3, r0, #1
 800f662:	d102      	bne.n	800f66a <_sbrk_r+0x1a>
 800f664:	6823      	ldr	r3, [r4, #0]
 800f666:	b103      	cbz	r3, 800f66a <_sbrk_r+0x1a>
 800f668:	602b      	str	r3, [r5, #0]
 800f66a:	bd38      	pop	{r3, r4, r5, pc}
 800f66c:	200008a0 	.word	0x200008a0

0800f670 <__malloc_lock>:
 800f670:	4770      	bx	lr

0800f672 <__malloc_unlock>:
 800f672:	4770      	bx	lr

0800f674 <_init>:
 800f674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f676:	bf00      	nop
 800f678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f67a:	bc08      	pop	{r3}
 800f67c:	469e      	mov	lr, r3
 800f67e:	4770      	bx	lr

0800f680 <_fini>:
 800f680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f682:	bf00      	nop
 800f684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f686:	bc08      	pop	{r3}
 800f688:	469e      	mov	lr, r3
 800f68a:	4770      	bx	lr
